<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风尘</title>
  
  <subtitle>每个人的心里都有一扇窗!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fcwalkers.com/"/>
  <updated>2018-06-06T09:28:51.000Z</updated>
  <id>http://fcwalkers.com/</id>
  
  <author>
    <name>风尘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小米耍猴第8季</title>
    <link href="http://fcwalkers.com/2018/06/05/blog/%E5%B0%8F%E7%B1%B3%E8%80%8D%E7%8C%B4%E7%AC%AC8%E5%AD%A3/"/>
    <id>http://fcwalkers.com/2018/06/05/blog/小米耍猴第8季/</id>
    <published>2018-06-04T16:00:00.000Z</published>
    <updated>2018-06-06T09:28:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>没错，是我，就是我，就是那只在抢小米的猴!<br>——　风尘</p></blockquote><a id="more"></a><p>在此之前我仅感受过春运时期12306那种点击的无力感，那种就像便秘有劲没处使的赶脚！就算如此，人家最终还能“出来”不是。</p><p>在我看来今年算是是手机的大年吧，之所以这么说，是因为今年的手机集体剪了齐刘海。。。恰巧我用了两年多的三星　note5也该到了光荣退休的年纪，所以就到处搜索攻略研究了一下今年新品手机。其实我一直喜欢的机型是三星note8　双曲面系列，那种感觉让无力抗拒，经过双手掏兜这个动作后也就放弃了。。。年初那段时间vivo x21、oppo r15率先出场了，不出意外刘海妹登场了，但vivo的骁龙660 CPU实在是提不起兴趣，最关键的还那么贵，还不如去年给女票买的小米6吸引我。对于华为手机不知道为什么，我始终看不出它的美在哪里，所以直接忽略了。无意中发现了一加手机这个品牌，之前真心没听过，网上查了一番居然2014年就有了这个品牌，瞬间觉得我是火星来的。一加6从配置到外观都是我比较满意的，唯一问题就是价格感觉略高（当然跟小米比）。于是乎在仔细斟酌和女票的强烈推荐下，终于走了一条不归路。</p><p>从发布惯例的4初到现在2个多月的煎熬等等终于发布了，发布会直播的2个小时我一直在看，当小米8的配置售价一出后，有些兴奋也有一些失望。单看售价确实让人疯狂，唯一3千以下超配手机，但是就想弱弱的问一句为啥没有8G版。虽然和自己的理想机型还差点，但也算是比较满意了。晚上18点开售，我兴奋的打开官网，点击预售按钮，结果提示我人数太多排队中……大约1分钟左右排除超时……什么鬼xxoo?!(*233＆＃‧。<br>我继续点预售再一次排队中……又过了大约1分钟提示售罄晚上24点再次预售……</p><p>鉴于之前的经验，在快到24点前我准备了两台手机一台电脑同时登陆多个账号抢，结果万幸…依旧没没买上。<br>期间又抢了两次，去过万达小米之家都买不到，连预订的机会都不给。这就是传说的中备货充足，这次真真体会到了耍猴模式。买个手机买的好心累，小米你样做真的好吗，你已经耍了米粉们8年了（虽然我不是米粉，才是第一次被耍），你靠耍猴模式的都快上市了，还不能有诚意一回吗？</p><h4 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h4><hr><p>原谅我又一次低俗的举例形容，一句话总结米粉不容易，且行且珍惜！再次声明我真不是一个米粉！！！我只是一个米粉的临时工！！！<br>气愤之下准备放弃了，最后看看了配置，看看了钱包，我决定要锻炼一下自己的意志……<br>祈祷下个猴年马月到来前我能买到吧！</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;没错，是我，就是我，就是那只在抢小米的猴!&lt;br&gt;——　风尘&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="芬芳年华" scheme="http://fcwalkers.com/categories/%E8%8A%AC%E8%8A%B3%E5%B9%B4%E5%8D%8E/"/>
    
    
      <category term="手机" scheme="http://fcwalkers.com/tags/%E6%89%8B%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>迟来的驾照</title>
    <link href="http://fcwalkers.com/2018/05/24/blog/%E8%BF%9F%E6%9D%A5%E7%9A%84%E9%A9%BE%E7%85%A7/"/>
    <id>http://fcwalkers.com/2018/05/24/blog/迟来的驾照/</id>
    <published>2018-05-23T16:00:00.000Z</published>
    <updated>2018-06-11T10:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于开车这件事儿，貌似没有其他人那么强烈的欲望，所以一拖再拖的到了现在才提上日程。具体萌生出想法是去年冬天，也不知道因为什么，还是受什么刺激，突然想开车了。终于磨了大半年的时间开始行动了。</p><p>之前一直的想法是，自己又没有车，考了也没什么用。包括身边好多朋友，驾驶证都快换终身了，除了驾校学习，还没摸过车。也许我就是看到了这种情况，一直提不起去学的兴趣。现在想想还有点小小的后悔，为什么不早点去考呢。之前无论从学费，还是难易程度都比现在好很多。身边的人十之八九都考了好几年了，而我还是一个预备新手。。。</p><a id="more"></a><p>伴随着欲望的愈加强烈，终于在5号上午开启了我的学车之旅：</p><hr><ul><li><code>2018年5月5日</code>　咨询报名资费一气呵成</li><li><code>2018年5月25日</code>　经过几个星期的法规学习参加了科目一考试（雄心壮志的100分，结果得了94。。。大写的“囧”）</li></ul><hr><p>科一考完后的一个星期驾校打来电话帮我约科目二练车,原本报名时候选的车型是宝来(据说比其它车型好一些)。可能由于车少人多原因,推荐我换成了伊兰特。为了尽早学习拿到驾照，也就同意了变更。</p><hr><ul><li><code>2018年6月9日</code>　科目二模拟课，感觉像是来打游戏的，不过老师讲课还从中学到了一些东西</li><li><code>2018年6月10日</code> 第一次上车，坐在车上练了差不多半个小时的换档和打方向盘，然后开始练习带速行驶、曲线、直角、换档道路行驶。整体感觉有些生疏，主要是教练总在身旁喊太紧张了。。。</li><li><code>2018年7月8日</code>  科目二学习最后一课</li></ul><hr><p>未完，待续。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于开车这件事儿，貌似没有其他人那么强烈的欲望，所以一拖再拖的到了现在才提上日程。具体萌生出想法是去年冬天，也不知道因为什么，还是受什么刺激，突然想开车了。终于磨了大半年的时间开始行动了。&lt;/p&gt;
&lt;p&gt;之前一直的想法是，自己又没有车，考了也没什么用。包括身边好多朋友，驾驶证都快换终身了，除了驾校学习，还没摸过车。也许我就是看到了这种情况，一直提不起去学的兴趣。现在想想还有点小小的后悔，为什么不早点去考呢。之前无论从学费，还是难易程度都比现在好很多。身边的人十之八九都考了好几年了，而我还是一个预备新手。。。&lt;/p&gt;
    
    </summary>
    
      <category term="芬芳年华" scheme="http://fcwalkers.com/categories/%E8%8A%AC%E8%8A%B3%E5%B9%B4%E5%8D%8E/"/>
    
    
      <category term="汽车" scheme="http://fcwalkers.com/tags/%E6%B1%BD%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>圈圈</title>
    <link href="http://fcwalkers.com/2018/05/03/blog/%E5%9C%88%E5%9C%88/"/>
    <id>http://fcwalkers.com/2018/05/03/blog/圈圈/</id>
    <published>2018-05-02T16:00:00.000Z</published>
    <updated>2018-06-05T06:34:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>圈圈是一只被粗心的主人忘记了问出生日期的小泰迪，也是一只坚强的与病魔抗争过小英雄。　　<br>圈圈是一只长23高13厘米的呆萌型男，圈圈更是一只集智慧、乖巧等等优点于一身的小伙伴。　　<br>圈圈的名字源于它那一身金灿灿的毛发，是它的主人穷尽词汇，浪费了不少脑细胞得来的。　　</p><a id="more"></a><p>眨眼间，从出生两个多月后来到主人身边已经一个月零两天了。聪明的圈圈已经学会了上厕所、坐下、握手和卖萌。圈圈喜欢粘着主人要抱抱，圈圈也会乖巧在家等待主人的归来。虽然圈圈还是不能听懂很多命令，但它正在努力的去理解！</p><p>虽然圈圈的主人在一个没有计划的下午冲动的把它带回家，但他(她）一直在努力的做的更好，对这个新到来的伙伴负责。因为这是他（她）的第一只自己的宠物，并且他（她）也很爱它。</p><p>忘了说，圈圈的生辰被它的糊涂主人定为了腊月初八！</p><p>圈圈欢迎你的到来～</p><hr><p>我们不是一名铲屎官，我们只是它的搬运工！</p><p>　　　　　　　　　　　　　　　　　——　圈圈的主人</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;圈圈是一只被粗心的主人忘记了问出生日期的小泰迪，也是一只坚强的与病魔抗争过小英雄。　　&lt;br&gt;圈圈是一只长23高13厘米的呆萌型男，圈圈更是一只集智慧、乖巧等等优点于一身的小伙伴。　　&lt;br&gt;圈圈的名字源于它那一身金灿灿的毛发，是它的主人穷尽词汇，浪费了不少脑细胞得来的。　　&lt;/p&gt;
    
    </summary>
    
      <category term="芬芳年华" scheme="http://fcwalkers.com/categories/%E8%8A%AC%E8%8A%B3%E5%B9%B4%E5%8D%8E/"/>
    
    
      <category term="狗狗" scheme="http://fcwalkers.com/tags/%E7%8B%97%E7%8B%97/"/>
    
  </entry>
  
  <entry>
    <title>全文检索Sphinx—多索引配置文件</title>
    <link href="http://fcwalkers.com/2018/04/18/tech_stack/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2Sphinx%E4%B9%8B%E7%B4%A2%E5%BC%95%E7%8B%AC%E7%AB%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://fcwalkers.com/2018/04/18/tech_stack/全文检索Sphinx之索引独立配置文件/</id>
    <published>2018-04-17T16:00:00.000Z</published>
    <updated>2018-06-05T09:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><blockquote class="blockquote-center"><p>Sphinx是一个基于SQL的全文检索引擎，可以结合MySQL,PostgreSQL做全文搜索.</p></blockquote>  <p>开发过程中,可能涉及公共配置和多个索引配置,如果配置在一个文件中将导致文件庞大,难于维护所以考虑拆分配置文件,场景如下:  </p><a id="more"></a><h4 id="公共索引配置"><a href="#公共索引配置" class="headerlink" title="公共索引配置"></a>公共索引配置</h4><p>建立公共索引配置文件(sphinx-base.conf,包括数据源、索引、索引查询等配置)　如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">source main_src</span><br><span class="line">&#123;</span><br><span class="line">    type            = mysql</span><br><span class="line"></span><br><span class="line">    sql_host        = localhost</span><br><span class="line">    sql_user        = 数据库用户名</span><br><span class="line">    sql_pass        = 数据库密码</span><br><span class="line">    sql_db          = 数据库名</span><br><span class="line">    sql_port        = 3306    # 数据库端口(可选)，默认3306</span><br><span class="line"></span><br><span class="line">    sql_query_pre   = SET NAMES utf8 #数据库编码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">indexer</span><br><span class="line">&#123;</span><br><span class="line">    mem_limit       = 256M</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">searchd</span><br><span class="line">&#123;</span><br><span class="line">    listen          = 9312</span><br><span class="line">    listen          = 9306:mysql41</span><br><span class="line">    mysql_version_string    = 5.0.37</span><br><span class="line">    log         = /usr/local/sphinx/var/log/searchd.log</span><br><span class="line">    query_log       = /usr/local/sphinx/var/log/query.log</span><br><span class="line">    read_timeout        = 5</span><br><span class="line">    max_children        = 30</span><br><span class="line">    pid_file        = /usr/local/sphinx/var/log/searchd.pid</span><br><span class="line">    seamless_rotate = 1</span><br><span class="line">    preopen_indexes = 1</span><br><span class="line">    unlink_old      = 1</span><br><span class="line">    workers         = threads # for RT to work</span><br><span class="line">    binlog_path     = /usr/local/sphinx/var/data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="索引一"><a href="#索引一" class="headerlink" title="索引一"></a>索引一</h4><p>建立博客文章表索引(sphinx-article.conf)如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br></pre></td><td class="code"><pre><span class="line">source article_src:main_src</span><br><span class="line">&#123;</span><br><span class="line">    sql_query_pre           = SET NAMES utf8</span><br><span class="line">    #初始化索引记数表</span><br><span class="line">    sql_query_pre           = REPLACE INTO yy_sphinx_counter SELECT 1,MAX(id) from yy_article</span><br><span class="line">    #分步查询</span><br><span class="line">    sql_query_range         = SELECT MIN(id),MAX(id) FROM yy_article</span><br><span class="line">    sql_range_step          = 1000</span><br><span class="line">    sql_query               = \</span><br><span class="line">    SELECT  \</span><br><span class="line">    a.id,  a.titile,  a.thumbnail,  a.page_view,  a.privacy,  a.type,  a.gmt_create, a.create_by, \</span><br><span class="line">    a.destination_id, a.destination_tag_id,  b.name destinaiton_name,  c.name destination_tag_name, d.content \</span><br><span class="line">        FROM yy_article a \</span><br><span class="line">        LEFT JOIN yy_destination b ON a.destination_id = b.id \</span><br><span class="line">            LEFT JOIN yy_destination_tag c ON a.destination_tag_id = c.id \</span><br><span class="line">            LEFT JOIN yy_article_content d ON a.id = d.article_id \</span><br><span class="line">    WHERE a.is_deleted = 0 AND a.audit_status = 1 and a.id &gt;= $start and a.id &lt;= $end</span><br><span class="line"></span><br><span class="line">    sql_attr_string        = gmt_create</span><br><span class="line">    sql_attr_string        = destinaiton_name </span><br><span class="line">    sql_attr_string        = destination_tag_name</span><br><span class="line">    sql_attr_string        = thumbnail </span><br><span class="line">    sql_attr_uint          = page_view</span><br><span class="line">    sql_attr_uint          = type</span><br><span class="line">    sql_attr_bigint        = create_by</span><br><span class="line">    sql_attr_bigint        = destination_id</span><br><span class="line">    sql_attr_bigint        = destination_tag_id </span><br><span class="line"></span><br><span class="line">  # 被索引字段</span><br><span class="line">    sql_field_string     = titile</span><br><span class="line">    sql_field_string     = privacy </span><br><span class="line">    sql_field_string     = content </span><br><span class="line">&#125;</span><br><span class="line">#增量数据源</span><br><span class="line">source article_delta_src : article_src</span><br><span class="line">&#123;</span><br><span class="line">    sql_query_pre           = REPLACE INTO yy_sphinx_counter SELECT 1,MAX(id) from yy_article</span><br><span class="line">    sql_query_pre           = SET NAMES utf8</span><br><span class="line">    #分步查询</span><br><span class="line">    sql_query_range     = SELECT  (    SELECT max_doc_id    FROM yy_sphinx_counter    WHERE id = 1),  (SELECT max(id)   FROM yy_article)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index article&#123;</span><br><span class="line">    source            = article_src</span><br><span class="line">    path              = /usr/local/sphinx/var/data/article_index</span><br><span class="line">    # 索引最小前缀(0表示任意字符)</span><br><span class="line">    min_infix_len     = 0</span><br><span class="line">    # 最小索引字符数(1表示每个字符都索引)</span><br><span class="line">    min_word_len      = 1</span><br><span class="line">    # 中文编码</span><br><span class="line">    charset_table     = 0..9, U+27, U+41..U+5a-&gt;U+61..U+7a,  U+61..U+7a, \</span><br><span class="line">U+aa, U+b5, U+ba, \</span><br><span class="line">U+c0..U+d6-&gt;U+e0..U+f6,  U+d8..U+de-&gt;U+f8..U+fe,  U+df..U+f6, \</span><br><span class="line">U+f8..U+ff,  U+100..U+12f/2,  U+130-&gt;U+69, \</span><br><span class="line">U+131,  U+132..U+137/2,  U+138, \</span><br><span class="line">U+139..U+148/2,  U+149,  U+14a..U+177/2, \</span><br><span class="line">U+178-&gt;U+ff,  U+179..U+17e/2,  U+17f..U+180, \</span><br><span class="line">U+181-&gt;U+253,  U+182..U+185/2,  U+186-&gt;U+254, \</span><br><span class="line">U+187..U+188/2,  U+189..U+18a-&gt;U+256..U+257,  U+18b..U+18c/2, \</span><br><span class="line">U+18d,  U+18e-&gt;U+1dd,  U+18f-&gt;U+259, \</span><br><span class="line">U+190-&gt;U+25b,  U+191..U+192/2,  U+193-&gt;U+260, \</span><br><span class="line">U+194-&gt;U+263,  U+195,  U+196-&gt;U+269, \</span><br><span class="line">U+197-&gt;U+268,  U+198..U+199/2,  U+19a..U+19b, \</span><br><span class="line">U+19c-&gt;U+26f,  U+19d-&gt;U+272,  U+19e, \</span><br><span class="line">U+19f-&gt;U+275,  U+1a0..U+1a5/2,  U+1a6-&gt;U+280, \</span><br><span class="line">U+1a7..U+1a8/2,  U+1a9-&gt;U+283,  U+1aa..U+1ab, \</span><br><span class="line">U+1ac..U+1ad/2,  U+1ae-&gt;U+288,  U+1af..U+1b0/2, \</span><br><span class="line">U+1b1..U+1b2-&gt;U+28a..U+28b,  U+1b3..U+1b6/2,  U+1b7-&gt;U+292, \</span><br><span class="line">U+1b8..U+1b9/2,  U+1ba..U+1bb,  U+1bc..U+1bd/2, \</span><br><span class="line">U+1be..U+1c3,  U+1c4-&gt;U+1c6,  U+1c5..U+1c6/2, \</span><br><span class="line">U+1c7-&gt;U+1c9,  U+1c8..U+1c9/2,  U+1ca-&gt;U+1cc, \</span><br><span class="line">U+1cb..U+1dc/2,  U+1dd,  U+1de..U+1ef/2, \</span><br><span class="line">U+1f0,  U+1f1-&gt;U+1f3,  U+1f2..U+1f5/2, \</span><br><span class="line">U+1f6-&gt;U+195,  U+1f7-&gt;U+1bf,  U+1f8..U+21f/2, \</span><br><span class="line">U+220-&gt;U+19e,  U+221,  U+222..U+233/2, \</span><br><span class="line">U+234..U+23a,  U+23b..U+23c/2,  U+23d-&gt;U+19a, \</span><br><span class="line">U+23e..U+240,  U+241-&gt;U+294,  U+250..U+2c1, \</span><br><span class="line">U+2c6..U+2d1,  U+2e0..U+2e4,  U+2ee, \</span><br><span class="line">U+1e96..U+1e9b,  U+1ea0..U+1ef9/2,  U+3005..U+3006, \</span><br><span class="line">U+3031..U+3035,  U+303b..U+303c,  U+3041..U+3096, \</span><br><span class="line">U+309d..U+309f,  U+30a1..U+30fa,  U+30fc..U+30ff, \</span><br><span class="line">U+31f0..U+31ff, U+F900-&gt;U+8C48, U+F901-&gt;U+66F4, \</span><br><span class="line">U+F902-&gt;U+8ECA, U+F903-&gt;U+8CC8, U+F904-&gt;U+6ED1, \</span><br><span class="line">U+F905-&gt;U+4E32, U+F906-&gt;U+53E5, U+F907-&gt;U+9F9C, \</span><br><span class="line">U+F908-&gt;U+9F9C, U+F909-&gt;U+5951, U+F90A-&gt;U+91D1, \</span><br><span class="line">U+F90B-&gt;U+5587, U+F90C-&gt;U+5948, U+F90D-&gt;U+61F6, \</span><br><span class="line">U+F90E-&gt;U+7669, U+F90F-&gt;U+7F85, U+F910-&gt;U+863F, \</span><br><span class="line">U+F911-&gt;U+87BA, U+F912-&gt;U+88F8, U+F913-&gt;U+908F, \</span><br><span class="line">U+F914-&gt;U+6A02, U+F915-&gt;U+6D1B, U+F916-&gt;U+70D9, \</span><br><span class="line">U+F917-&gt;U+73DE, U+F918-&gt;U+843D, U+F919-&gt;U+916A, \</span><br><span class="line">U+F91A-&gt;U+99F1, U+F91B-&gt;U+4E82, U+F91C-&gt;U+5375, \</span><br><span class="line">U+F91D-&gt;U+6B04, U+F91E-&gt;U+721B, U+F91F-&gt;U+862D, \</span><br><span class="line">U+F920-&gt;U+9E1E, U+F921-&gt;U+5D50, U+F922-&gt;U+6FEB, \</span><br><span class="line">U+F923-&gt;U+85CD, U+F924-&gt;U+8964, U+F925-&gt;U+62C9, \</span><br><span class="line">U+F926-&gt;U+81D8, U+F927-&gt;U+881F, U+F928-&gt;U+5ECA, \</span><br><span class="line">U+F929-&gt;U+6717, U+F92A-&gt;U+6D6A, U+F92B-&gt;U+72FC, \</span><br><span class="line">U+F92C-&gt;U+90CE, U+F92D-&gt;U+4F86, U+F92E-&gt;U+51B7, \</span><br><span class="line">U+F92F-&gt;U+52DE, U+F930-&gt;U+64C4, U+F931-&gt;U+6AD3, \</span><br><span class="line">U+F932-&gt;U+7210, U+F933-&gt;U+76E7, U+F934-&gt;U+8001, \</span><br><span class="line">U+F935-&gt;U+8606, U+F936-&gt;U+865C, U+F937-&gt;U+8DEF, \</span><br><span class="line">U+F938-&gt;U+9732, U+F939-&gt;U+9B6F, U+F93A-&gt;U+9DFA, \</span><br><span class="line">U+F93B-&gt;U+788C, U+F93C-&gt;U+797F, U+F93D-&gt;U+7DA0, \</span><br><span class="line">U+F93E-&gt;U+83C9, U+F93F-&gt;U+9304, U+F940-&gt;U+9E7F, \</span><br><span class="line">U+F941-&gt;U+8AD6, U+F942-&gt;U+58DF, U+F943-&gt;U+5F04, \</span><br><span class="line">U+F944-&gt;U+7C60, U+F945-&gt;U+807E, U+F946-&gt;U+7262, \</span><br><span class="line">U+F947-&gt;U+78CA, U+F948-&gt;U+8CC2, U+F949-&gt;U+96F7, \</span><br><span class="line">U+F94A-&gt;U+58D8, U+F94B-&gt;U+5C62, U+F94C-&gt;U+6A13, \</span><br><span class="line">U+F94D-&gt;U+6DDA, U+F94E-&gt;U+6F0F, U+F94F-&gt;U+7D2F, \</span><br><span class="line">U+F950-&gt;U+7E37, U+F951-&gt;U+964B, U+F952-&gt;U+52D2, \</span><br><span class="line">U+F953-&gt;U+808B, U+F954-&gt;U+51DC, U+F955-&gt;U+51CC, \</span><br><span class="line">U+F956-&gt;U+7A1C, U+F957-&gt;U+7DBE, U+F958-&gt;U+83F1, \</span><br><span class="line">U+F959-&gt;U+9675, U+F95A-&gt;U+8B80, U+F95B-&gt;U+62CF, \</span><br><span class="line">U+F95C-&gt;U+6A02, U+F95D-&gt;U+8AFE, U+F95E-&gt;U+4E39, \</span><br><span class="line">U+F95F-&gt;U+5BE7, U+F960-&gt;U+6012, U+F961-&gt;U+7387, \</span><br><span class="line">U+F962-&gt;U+7570, U+F963-&gt;U+5317, U+F964-&gt;U+78FB, \</span><br><span class="line">U+F965-&gt;U+4FBF, U+F966-&gt;U+5FA9, U+F967-&gt;U+4E0D, \</span><br><span class="line">U+F968-&gt;U+6CCC, U+F969-&gt;U+6578, U+F96A-&gt;U+7D22, \</span><br><span class="line">U+F96B-&gt;U+53C3, U+F96C-&gt;U+585E, U+F96D-&gt;U+7701, \</span><br><span class="line">U+F96E-&gt;U+8449, U+F96F-&gt;U+8AAA, U+F970-&gt;U+6BBA, \</span><br><span class="line">U+F971-&gt;U+8FB0, U+F972-&gt;U+6C88, U+F973-&gt;U+62FE, \</span><br><span class="line">U+F974-&gt;U+82E5, U+F975-&gt;U+63A0, U+F976-&gt;U+7565, \</span><br><span class="line">U+F977-&gt;U+4EAE, U+F978-&gt;U+5169, U+F979-&gt;U+51C9, \</span><br><span class="line">U+F97A-&gt;U+6881, U+F97B-&gt;U+7CE7, U+F97C-&gt;U+826F, \</span><br><span class="line">U+F97D-&gt;U+8AD2, U+F97E-&gt;U+91CF, U+F97F-&gt;U+52F5, \</span><br><span class="line">U+F980-&gt;U+5442, U+F981-&gt;U+5973, U+F982-&gt;U+5EEC, \</span><br><span class="line">U+F983-&gt;U+65C5, U+F984-&gt;U+6FFE, U+F985-&gt;U+792A, \</span><br><span class="line">U+F986-&gt;U+95AD, U+F987-&gt;U+9A6A, U+F988-&gt;U+9E97, \</span><br><span class="line">U+F989-&gt;U+9ECE, U+F98A-&gt;U+529B, U+F98B-&gt;U+66C6, \</span><br><span class="line">U+F98C-&gt;U+6B77, U+F98D-&gt;U+8F62, U+F98E-&gt;U+5E74, \</span><br><span class="line">U+F98F-&gt;U+6190, U+F990-&gt;U+6200, U+F991-&gt;U+649A, \</span><br><span class="line">U+F992-&gt;U+6F23, U+F993-&gt;U+7149, U+F994-&gt;U+7489, \</span><br><span class="line">U+F995-&gt;U+79CA, U+F996-&gt;U+7DF4, U+F997-&gt;U+806F, \</span><br><span class="line">U+F998-&gt;U+8F26, U+F999-&gt;U+84EE, U+F99A-&gt;U+9023, \</span><br><span class="line">U+F99B-&gt;U+934A, U+F99C-&gt;U+5217, U+F99D-&gt;U+52A3, \</span><br><span class="line">U+F99E-&gt;U+54BD, U+F99F-&gt;U+70C8, U+F9A0-&gt;U+88C2, \</span><br><span class="line">U+F9A1-&gt;U+8AAA, U+F9A2-&gt;U+5EC9, U+F9A3-&gt;U+5FF5, \</span><br><span class="line">U+F9A4-&gt;U+637B, U+F9A5-&gt;U+6BAE, U+F9A6-&gt;U+7C3E, \</span><br><span class="line">U+F9A7-&gt;U+7375, U+F9A8-&gt;U+4EE4, U+F9A9-&gt;U+56F9, \</span><br><span class="line">U+F9AA-&gt;U+5BE7, U+F9AB-&gt;U+5DBA, U+F9AC-&gt;U+601C, \</span><br><span class="line">U+F9AD-&gt;U+73B2, U+F9AE-&gt;U+7469, U+F9AF-&gt;U+7F9A, \</span><br><span class="line">U+F9B0-&gt;U+8046, U+F9B1-&gt;U+9234, U+F9B2-&gt;U+96F6, \</span><br><span class="line">U+F9B3-&gt;U+9748, U+F9B4-&gt;U+9818, U+F9B5-&gt;U+4F8B, \</span><br><span class="line">U+F9B6-&gt;U+79AE, U+F9B7-&gt;U+91B4, U+F9B8-&gt;U+96B8, \</span><br><span class="line">U+F9B9-&gt;U+60E1, U+F9BA-&gt;U+4E86, U+F9BB-&gt;U+50DA, \</span><br><span class="line">U+F9BC-&gt;U+5BEE, U+F9BD-&gt;U+5C3F, U+F9BE-&gt;U+6599, \</span><br><span class="line">U+F9BF-&gt;U+6A02, U+F9C0-&gt;U+71CE, U+F9C1-&gt;U+7642, \</span><br><span class="line">U+F9C2-&gt;U+84FC, U+F9C3-&gt;U+907C, U+F9C4-&gt;U+9F8D, \</span><br><span class="line">U+F9C5-&gt;U+6688, U+F9C6-&gt;U+962E, U+F9C7-&gt;U+5289, \</span><br><span class="line">U+F9C8-&gt;U+677B, U+F9C9-&gt;U+67F3, U+F9CA-&gt;U+6D41, \</span><br><span class="line">U+F9CB-&gt;U+6E9C, U+F9CC-&gt;U+7409, U+F9CD-&gt;U+7559, \</span><br><span class="line">U+F9CE-&gt;U+786B, U+F9CF-&gt;U+7D10, U+F9D0-&gt;U+985E, \</span><br><span class="line">U+F9D1-&gt;U+516D, U+F9D2-&gt;U+622E, U+F9D3-&gt;U+9678, \</span><br><span class="line">U+F9D4-&gt;U+502B, U+F9D5-&gt;U+5D19, U+F9D6-&gt;U+6DEA, \</span><br><span class="line">U+F9D7-&gt;U+8F2A, U+F9D8-&gt;U+5F8B, U+F9D9-&gt;U+6144, \</span><br><span class="line">U+F9DA-&gt;U+6817, U+F9DB-&gt;U+7387, U+F9DC-&gt;U+9686, \</span><br><span class="line">U+F9DD-&gt;U+5229, U+F9DE-&gt;U+540F, U+F9DF-&gt;U+5C65, \</span><br><span class="line">U+F9E0-&gt;U+6613, U+F9E1-&gt;U+674E, U+F9E2-&gt;U+68A8, \</span><br><span class="line">U+F9E3-&gt;U+6CE5, U+F9E4-&gt;U+7406, U+F9E5-&gt;U+75E2, \</span><br><span class="line">U+F9E6-&gt;U+7F79, U+F9E7-&gt;U+88CF, U+F9E8-&gt;U+88E1, \</span><br><span class="line">U+F9E9-&gt;U+91CC, U+F9EA-&gt;U+96E2, U+F9EB-&gt;U+533F, \</span><br><span class="line">U+F9EC-&gt;U+6EBA, U+F9ED-&gt;U+541D, U+F9EE-&gt;U+71D0, \</span><br><span class="line">U+F9EF-&gt;U+7498, U+F9F0-&gt;U+85FA, U+F9F1-&gt;U+96A3, \</span><br><span class="line">U+F9F2-&gt;U+9C57, U+F9F3-&gt;U+9E9F, U+F9F4-&gt;U+6797, \</span><br><span class="line">U+F9F5-&gt;U+6DCB, U+F9F6-&gt;U+81E8, U+F9F7-&gt;U+7ACB, \</span><br><span class="line">U+F9F8-&gt;U+7B20, U+F9F9-&gt;U+7C92, U+F9FA-&gt;U+72C0, \</span><br><span class="line">U+F9FB-&gt;U+7099, U+F9FC-&gt;U+8B58, U+F9FD-&gt;U+4EC0, \</span><br><span class="line">U+F9FE-&gt;U+8336, U+F9FF-&gt;U+523A, U+FA00-&gt;U+5207, \</span><br><span class="line">U+FA01-&gt;U+5EA6, U+FA02-&gt;U+62D3, U+FA03-&gt;U+7CD6, \</span><br><span class="line">U+FA04-&gt;U+5B85, U+FA05-&gt;U+6D1E, U+FA06-&gt;U+66B4, \</span><br><span class="line">U+FA07-&gt;U+8F3B, U+FA08-&gt;U+884C, U+FA09-&gt;U+964D, \</span><br><span class="line">U+FA0A-&gt;U+898B, U+FA0B-&gt;U+5ED3, U+FA0C-&gt;U+5140, \</span><br><span class="line">U+FA0D-&gt;U+55C0, U+FA10-&gt;U+585A, U+FA12-&gt;U+6674, \</span><br><span class="line">U+FA15-&gt;U+51DE, U+FA16-&gt;U+732A, U+FA17-&gt;U+76CA, \</span><br><span class="line">U+FA18-&gt;U+793C, U+FA19-&gt;U+795E, U+FA1A-&gt;U+7965, \</span><br><span class="line">U+FA1B-&gt;U+798F, U+FA1C-&gt;U+9756, U+FA1D-&gt;U+7CBE, \</span><br><span class="line">U+FA1E-&gt;U+7FBD, U+FA20-&gt;U+8612, U+FA22-&gt;U+8AF8, \</span><br><span class="line">U+FA25-&gt;U+9038, U+FA26-&gt;U+90FD, U+FA2A-&gt;U+98EF, \</span><br><span class="line">U+FA2B-&gt;U+98FC, U+FA2C-&gt;U+9928, U+FA2D-&gt;U+9DB4, \</span><br><span class="line">U+FA30-&gt;U+4FAE, U+FA31-&gt;U+50E7, U+FA32-&gt;U+514D, \</span><br><span class="line">U+FA33-&gt;U+52C9, U+FA34-&gt;U+52E4, U+FA35-&gt;U+5351, \</span><br><span class="line">U+FA36-&gt;U+559D, U+FA37-&gt;U+5606, U+FA38-&gt;U+5668, \</span><br><span class="line">U+FA39-&gt;U+5840, U+FA3A-&gt;U+58A8, U+FA3B-&gt;U+5C64, \</span><br><span class="line">U+FA3C-&gt;U+5C6E, U+FA3D-&gt;U+6094, U+FA3E-&gt;U+6168, \</span><br><span class="line">U+FA3F-&gt;U+618E, U+FA40-&gt;U+61F2, U+FA41-&gt;U+654F, \</span><br><span class="line">U+FA42-&gt;U+65E2, U+FA43-&gt;U+6691, U+FA44-&gt;U+6885, \</span><br><span class="line">U+FA45-&gt;U+6D77, U+FA46-&gt;U+6E1A, U+FA47-&gt;U+6F22, \</span><br><span class="line">U+FA48-&gt;U+716E, U+FA49-&gt;U+722B, U+FA4A-&gt;U+7422, \</span><br><span class="line">U+FA4B-&gt;U+7891, U+FA4C-&gt;U+793E, U+FA4D-&gt;U+7949, \</span><br><span class="line">U+FA4E-&gt;U+7948, U+FA4F-&gt;U+7950, U+FA50-&gt;U+7956, \</span><br><span class="line">U+FA51-&gt;U+795D, U+FA52-&gt;U+798D, U+FA53-&gt;U+798E, \</span><br><span class="line">U+FA54-&gt;U+7A40, U+FA55-&gt;U+7A81, U+FA56-&gt;U+7BC0, \</span><br><span class="line">U+FA57-&gt;U+7DF4, U+FA58-&gt;U+7E09, U+FA59-&gt;U+7E41, \</span><br><span class="line">U+FA5A-&gt;U+7F72, U+FA5B-&gt;U+8005, U+FA5C-&gt;U+81ED, \</span><br><span class="line">U+FA5D-&gt;U+8279, U+FA5E-&gt;U+8279, U+FA5F-&gt;U+8457, \</span><br><span class="line">U+FA60-&gt;U+8910, U+FA61-&gt;U+8996, U+FA62-&gt;U+8B01, \</span><br><span class="line">U+FA63-&gt;U+8B39, U+FA64-&gt;U+8CD3, U+FA65-&gt;U+8D08, \</span><br><span class="line">U+FA66-&gt;U+8FB6, U+FA67-&gt;U+9038, U+FA68-&gt;U+96E3, \</span><br><span class="line">U+FA69-&gt;U+97FF, U+FA6A-&gt;U+983B, U+FA70-&gt;U+4E26, \</span><br><span class="line">U+FA71-&gt;U+51B5, U+FA72-&gt;U+5168, U+FA73-&gt;U+4F80, \</span><br><span class="line">U+FA74-&gt;U+5145, U+FA75-&gt;U+5180, U+FA76-&gt;U+52C7, \</span><br><span class="line">U+FA77-&gt;U+52FA, U+FA78-&gt;U+559D, U+FA79-&gt;U+5555, \</span><br><span class="line">U+FA7A-&gt;U+5599, U+FA7B-&gt;U+55E2, U+FA7C-&gt;U+585A, \</span><br><span class="line">U+FA7D-&gt;U+58B3, U+FA7E-&gt;U+5944, U+FA7F-&gt;U+5954, \</span><br><span class="line">U+FA80-&gt;U+5A62, U+FA81-&gt;U+5B28, U+FA82-&gt;U+5ED2, \</span><br><span class="line">U+FA83-&gt;U+5ED9, U+FA84-&gt;U+5F69, U+FA85-&gt;U+5FAD, \</span><br><span class="line">U+FA86-&gt;U+60D8, U+FA87-&gt;U+614E, U+FA88-&gt;U+6108, \</span><br><span class="line">U+FA89-&gt;U+618E, U+FA8A-&gt;U+6160, U+FA8B-&gt;U+61F2, \</span><br><span class="line">U+FA8C-&gt;U+6234, U+FA8D-&gt;U+63C4, U+FA8E-&gt;U+641C, \</span><br><span class="line">U+FA8F-&gt;U+6452, U+FA90-&gt;U+6556, U+FA91-&gt;U+6674, \</span><br><span class="line">U+FA92-&gt;U+6717, U+FA93-&gt;U+671B, U+FA94-&gt;U+6756, \</span><br><span class="line">U+FA95-&gt;U+6B79, U+FA96-&gt;U+6BBA, U+FA97-&gt;U+6D41, \</span><br><span class="line">U+FA98-&gt;U+6EDB, U+FA99-&gt;U+6ECB, U+FA9A-&gt;U+6F22, \</span><br><span class="line">U+FA9B-&gt;U+701E, U+FA9C-&gt;U+716E, U+FA9D-&gt;U+77A7, \</span><br><span class="line">U+FA9E-&gt;U+7235, U+FA9F-&gt;U+72AF, U+FAA0-&gt;U+732A, \</span><br><span class="line">U+FAA1-&gt;U+7471, U+FAA2-&gt;U+7506, U+FAA3-&gt;U+753B, \</span><br><span class="line">U+FAA4-&gt;U+761D, U+FAA5-&gt;U+761F, U+FAA6-&gt;U+76CA, \</span><br><span class="line">U+FAA7-&gt;U+76DB, U+FAA8-&gt;U+76F4, U+FAA9-&gt;U+774A, \</span><br><span class="line">U+FAAA-&gt;U+7740, U+FAAB-&gt;U+78CC, U+FAAC-&gt;U+7AB1, \</span><br><span class="line">U+FAAD-&gt;U+7BC0, U+FAAE-&gt;U+7C7B, U+FAAF-&gt;U+7D5B, \</span><br><span class="line">U+FAB0-&gt;U+7DF4, U+FAB1-&gt;U+7F3E, U+FAB2-&gt;U+8005, \</span><br><span class="line">U+FAB3-&gt;U+8352, U+FAB4-&gt;U+83EF, U+FAB5-&gt;U+8779, \</span><br><span class="line">U+FAB6-&gt;U+8941, U+FAB7-&gt;U+8986, U+FAB8-&gt;U+8996, \</span><br><span class="line">U+FAB9-&gt;U+8ABF, U+FABA-&gt;U+8AF8, U+FABB-&gt;U+8ACB, \</span><br><span class="line">U+FABC-&gt;U+8B01, U+FABD-&gt;U+8AFE, U+FABE-&gt;U+8AED, \</span><br><span class="line">U+FABF-&gt;U+8B39, U+FAC0-&gt;U+8B8A, U+FAC1-&gt;U+8D08, \</span><br><span class="line">U+FAC2-&gt;U+8F38, U+FAC3-&gt;U+9072, U+FAC4-&gt;U+9199, \</span><br><span class="line">U+FAC5-&gt;U+9276, U+FAC6-&gt;U+967C, U+FAC7-&gt;U+96E3, \</span><br><span class="line">U+FAC8-&gt;U+9756, U+FAC9-&gt;U+97DB, U+FACA-&gt;U+97FF, \</span><br><span class="line">U+FACB-&gt;U+980B, U+FACC-&gt;U+983B, U+FACD-&gt;U+9B12, \</span><br><span class="line">U+FACE-&gt;U+9F9C, U+FACF-&gt;U+2284A, U+FAD0-&gt;U+22844, \</span><br><span class="line">U+FAD1-&gt;U+233D5, U+FAD2-&gt;U+3B9D, U+FAD3-&gt;U+4018, \</span><br><span class="line">U+FAD4-&gt;U+4039, U+FAD5-&gt;U+25249, U+FAD6-&gt;U+25CD0, \</span><br><span class="line">U+FAD7-&gt;U+27ED3, U+FAD8-&gt;U+9F43, U+FAD9-&gt;U+9F8E, \</span><br><span class="line">U+2F800-&gt;U+4E3D, U+2F801-&gt;U+4E38, U+2F802-&gt;U+4E41, \</span><br><span class="line">U+2F803-&gt;U+20122, U+2F804-&gt;U+4F60, U+2F805-&gt;U+4FAE, \</span><br><span class="line">U+2F806-&gt;U+4FBB, U+2F807-&gt;U+5002, U+2F808-&gt;U+507A, \</span><br><span class="line">U+2F809-&gt;U+5099, U+2F80A-&gt;U+50E7, U+2F80B-&gt;U+50CF, \</span><br><span class="line">U+2F80C-&gt;U+349E, U+2F80D-&gt;U+2063A, U+2F80E-&gt;U+514D, \</span><br><span class="line">U+2F80F-&gt;U+5154, U+2F810-&gt;U+5164, U+2F811-&gt;U+5177, \</span><br><span class="line">U+2F812-&gt;U+2051C, U+2F813-&gt;U+34B9, U+2F814-&gt;U+5167, \</span><br><span class="line">U+2F815-&gt;U+518D, U+2F816-&gt;U+2054B, U+2F817-&gt;U+5197, \</span><br><span class="line">U+2F818-&gt;U+51A4, U+2F819-&gt;U+4ECC, U+2F81A-&gt;U+51AC, \</span><br><span class="line">U+2F81B-&gt;U+51B5, U+2F81C-&gt;U+291DF, U+2F81D-&gt;U+51F5, \</span><br><span class="line">U+2F81E-&gt;U+5203, U+2F81F-&gt;U+34DF, U+2F820-&gt;U+523B, \</span><br><span class="line">U+2F821-&gt;U+5246, U+2F822-&gt;U+5272, U+2F823-&gt;U+5277, \</span><br><span class="line">U+2F824-&gt;U+3515, U+2F825-&gt;U+52C7, U+2F826-&gt;U+52C9, \</span><br><span class="line">U+2F827-&gt;U+52E4, U+2F828-&gt;U+52FA, U+2F829-&gt;U+5305, \</span><br><span class="line">U+2F82A-&gt;U+5306, U+2F82B-&gt;U+5317, U+2F82C-&gt;U+5349, \</span><br><span class="line">U+2F82D-&gt;U+5351, U+2F82E-&gt;U+535A, U+2F82F-&gt;U+5373, \</span><br><span class="line">U+2F830-&gt;U+537D, U+2F831-&gt;U+537F, U+2F832-&gt;U+537F, \</span><br><span class="line">U+2F833-&gt;U+537F, U+2F834-&gt;U+20A2C, U+2F835-&gt;U+7070, \</span><br><span class="line">U+2F836-&gt;U+53CA, U+2F837-&gt;U+53DF, U+2F838-&gt;U+20B63, \</span><br><span class="line">U+2F839-&gt;U+53EB, U+2F83A-&gt;U+53F1, U+2F83B-&gt;U+5406, \</span><br><span class="line">U+2F83C-&gt;U+549E, U+2F83D-&gt;U+5438, U+2F83E-&gt;U+5448, \</span><br><span class="line">U+2F83F-&gt;U+5468, U+2F840-&gt;U+54A2, U+2F841-&gt;U+54F6, \</span><br><span class="line">U+2F842-&gt;U+5510, U+2F843-&gt;U+5553, U+2F844-&gt;U+5563, \</span><br><span class="line">U+2F845-&gt;U+5584, U+2F846-&gt;U+5584, U+2F847-&gt;U+5599, \</span><br><span class="line">U+2F848-&gt;U+55AB, U+2F849-&gt;U+55B3, U+2F84A-&gt;U+55C2, \</span><br><span class="line">U+2F84B-&gt;U+5716, U+2F84C-&gt;U+5606, U+2F84D-&gt;U+5717, \</span><br><span class="line">U+2F84E-&gt;U+5651, U+2F84F-&gt;U+5674, U+2F850-&gt;U+5207, \</span><br><span class="line">U+2F851-&gt;U+58EE, U+2F852-&gt;U+57CE, U+2F853-&gt;U+57F4, \</span><br><span class="line">U+2F854-&gt;U+580D, U+2F855-&gt;U+578B, U+2F856-&gt;U+5832, \</span><br><span class="line">U+2F857-&gt;U+5831, U+2F858-&gt;U+58AC, U+2F859-&gt;U+214E4, \</span><br><span class="line">U+2F85A-&gt;U+58F2, U+2F85B-&gt;U+58F7, U+2F85C-&gt;U+5906, \</span><br><span class="line">U+2F85D-&gt;U+591A, U+2F85E-&gt;U+5922, U+2F85F-&gt;U+5962, \</span><br><span class="line">U+2F860-&gt;U+216A8, U+2F861-&gt;U+216EA, U+2F862-&gt;U+59EC, \</span><br><span class="line">U+2F863-&gt;U+5A1B, U+2F864-&gt;U+5A27, U+2F865-&gt;U+59D8, \</span><br><span class="line">U+2F866-&gt;U+5A66, U+2F867-&gt;U+36EE, U+2F868-&gt;U+36FC, \</span><br><span class="line">U+2F869-&gt;U+5B08, U+2F86A-&gt;U+5B3E, U+2F86B-&gt;U+5B3E, \</span><br><span class="line">U+2F86C-&gt;U+219C8, U+2F86D-&gt;U+5BC3, U+2F86E-&gt;U+5BD8, \</span><br><span class="line">U+2F86F-&gt;U+5BE7, U+2F870-&gt;U+5BF3, U+2F871-&gt;U+21B18, \</span><br><span class="line">U+2F872-&gt;U+5BFF, U+2F873-&gt;U+5C06, U+2F874-&gt;U+5F53, \</span><br><span class="line">U+2F875-&gt;U+5C22, U+2F876-&gt;U+3781, U+2F877-&gt;U+5C60, \</span><br><span class="line">U+2F878-&gt;U+5C6E, U+2F879-&gt;U+5CC0, U+2F87A-&gt;U+5C8D, \</span><br><span class="line">U+2F87B-&gt;U+21DE4, U+2F87C-&gt;U+5D43, U+2F87D-&gt;U+21DE6, \</span><br><span class="line">U+2F87E-&gt;U+5D6E, U+2F87F-&gt;U+5D6B, U+2F880-&gt;U+5D7C, \</span><br><span class="line">U+2F881-&gt;U+5DE1, U+2F882-&gt;U+5DE2, U+2F883-&gt;U+382F, \</span><br><span class="line">U+2F884-&gt;U+5DFD, U+2F885-&gt;U+5E28, U+2F886-&gt;U+5E3D, \</span><br><span class="line">U+2F887-&gt;U+5E69, U+2F888-&gt;U+3862, U+2F889-&gt;U+22183, \</span><br><span class="line">U+2F88A-&gt;U+387C, U+2F88B-&gt;U+5EB0, U+2F88C-&gt;U+5EB3, \</span><br><span class="line">U+2F88D-&gt;U+5EB6, U+2F88E-&gt;U+5ECA, U+2F88F-&gt;U+2A392, \</span><br><span class="line">U+2F890-&gt;U+5EFE, U+2F891-&gt;U+22331, U+2F892-&gt;U+22331, \</span><br><span class="line">U+2F893-&gt;U+8201, U+2F894-&gt;U+5F22, U+2F895-&gt;U+5F22, \</span><br><span class="line">U+2F896-&gt;U+38C7, U+2F897-&gt;U+232B8, U+2F898-&gt;U+261DA, \</span><br><span class="line">U+2F899-&gt;U+5F62, U+2F89A-&gt;U+5F6B, U+2F89B-&gt;U+38E3, \</span><br><span class="line">U+2F89C-&gt;U+5F9A, U+2F89D-&gt;U+5FCD, U+2F89E-&gt;U+5FD7, \</span><br><span class="line">U+2F89F-&gt;U+5FF9, U+2F8A0-&gt;U+6081, U+2F8A1-&gt;U+393A, \</span><br><span class="line">U+2F8A2-&gt;U+391C, U+2F8A3-&gt;U+6094, U+2F8A4-&gt;U+226D4, \</span><br><span class="line">U+2F8A5-&gt;U+60C7, U+2F8A6-&gt;U+6148, U+2F8A7-&gt;U+614C, \</span><br><span class="line">U+2F8A8-&gt;U+614E, U+2F8A9-&gt;U+614C, U+2F8AA-&gt;U+617A, \</span><br><span class="line">U+2F8AB-&gt;U+618E, U+2F8AC-&gt;U+61B2, U+2F8AD-&gt;U+61A4, \</span><br><span class="line">U+2F8AE-&gt;U+61AF, U+2F8AF-&gt;U+61DE, U+2F8B0-&gt;U+61F2, \</span><br><span class="line">U+2F8B1-&gt;U+61F6, U+2F8B2-&gt;U+6210, U+2F8B3-&gt;U+621B, \</span><br><span class="line">U+2F8B4-&gt;U+625D, U+2F8B5-&gt;U+62B1, U+2F8B6-&gt;U+62D4, \</span><br><span class="line">U+2F8B7-&gt;U+6350, U+2F8B8-&gt;U+22B0C, U+2F8B9-&gt;U+633D, \</span><br><span class="line">U+2F8BA-&gt;U+62FC, U+2F8BB-&gt;U+6368, U+2F8BC-&gt;U+6383, \</span><br><span class="line">U+2F8BD-&gt;U+63E4, U+2F8BE-&gt;U+22BF1, U+2F8BF-&gt;U+6422, \</span><br><span class="line">U+2F8C0-&gt;U+63C5, U+2F8C1-&gt;U+63A9, U+2F8C2-&gt;U+3A2E, \</span><br><span class="line">U+2F8C3-&gt;U+6469, U+2F8C4-&gt;U+647E, U+2F8C5-&gt;U+649D, \</span><br><span class="line">U+2F8C6-&gt;U+6477, U+2F8C7-&gt;U+3A6C, U+2F8C8-&gt;U+654F, \</span><br><span class="line">U+2F8C9-&gt;U+656C, U+2F8CA-&gt;U+2300A, U+2F8CB-&gt;U+65E3, \</span><br><span class="line">U+2F8CC-&gt;U+66F8, U+2F8CD-&gt;U+6649, U+2F8CE-&gt;U+3B19, \</span><br><span class="line">U+2F8CF-&gt;U+6691, U+2F8D0-&gt;U+3B08, U+2F8D1-&gt;U+3AE4, \</span><br><span class="line">U+2F8D2-&gt;U+5192, U+2F8D3-&gt;U+5195, U+2F8D4-&gt;U+6700, \</span><br><span class="line">U+2F8D5-&gt;U+669C, U+2F8D6-&gt;U+80AD, U+2F8D7-&gt;U+43D9, \</span><br><span class="line">U+2F8D8-&gt;U+6717, U+2F8D9-&gt;U+671B, U+2F8DA-&gt;U+6721, \</span><br><span class="line">U+2F8DB-&gt;U+675E, U+2F8DC-&gt;U+6753, U+2F8DD-&gt;U+233C3, \</span><br><span class="line">U+2F8DE-&gt;U+3B49, U+2F8DF-&gt;U+67FA, U+2F8E0-&gt;U+6785, \</span><br><span class="line">U+2F8E1-&gt;U+6852, U+2F8E2-&gt;U+6885, U+2F8E3-&gt;U+2346D, \</span><br><span class="line">U+2F8E4-&gt;U+688E, U+2F8E5-&gt;U+681F, U+2F8E6-&gt;U+6914, \</span><br><span class="line">U+2F8E7-&gt;U+3B9D, U+2F8E8-&gt;U+6942, U+2F8E9-&gt;U+69A3, \</span><br><span class="line">U+2F8EA-&gt;U+69EA, U+2F8EB-&gt;U+6AA8, U+2F8EC-&gt;U+236A3, \</span><br><span class="line">U+2F8ED-&gt;U+6ADB, U+2F8EE-&gt;U+3C18, U+2F8EF-&gt;U+6B21, \</span><br><span class="line">U+2F8F0-&gt;U+238A7, U+2F8F1-&gt;U+6B54, U+2F8F2-&gt;U+3C4E, \</span><br><span class="line">U+2F8F3-&gt;U+6B72, U+2F8F4-&gt;U+6B9F, U+2F8F5-&gt;U+6BBA, \</span><br><span class="line">U+2F8F6-&gt;U+6BBB, U+2F8F7-&gt;U+23A8D, U+2F8F8-&gt;U+21D0B, \</span><br><span class="line">U+2F8F9-&gt;U+23AFA, U+2F8FA-&gt;U+6C4E, U+2F8FB-&gt;U+23CBC, \</span><br><span class="line">U+2F8FC-&gt;U+6CBF, U+2F8FD-&gt;U+6CCD, U+2F8FE-&gt;U+6C67, \</span><br><span class="line">U+2F8FF-&gt;U+6D16, U+2F900-&gt;U+6D3E, U+2F901-&gt;U+6D77, \</span><br><span class="line">U+2F902-&gt;U+6D41, U+2F903-&gt;U+6D69, U+2F904-&gt;U+6D78, \</span><br><span class="line">U+2F905-&gt;U+6D85, U+2F906-&gt;U+23D1E, U+2F907-&gt;U+6D34, \</span><br><span class="line">U+2F908-&gt;U+6E2F, U+2F909-&gt;U+6E6E, U+2F90A-&gt;U+3D33, \</span><br><span class="line">U+2F90B-&gt;U+6ECB, U+2F90C-&gt;U+6EC7, U+2F90D-&gt;U+23ED1, \</span><br><span class="line">U+2F90E-&gt;U+6DF9, U+2F90F-&gt;U+6F6E, U+2F910-&gt;U+23F5E, \</span><br><span class="line">U+2F911-&gt;U+23F8E, U+2F912-&gt;U+6FC6, U+2F913-&gt;U+7039, \</span><br><span class="line">U+2F914-&gt;U+701E, U+2F915-&gt;U+701B, U+2F916-&gt;U+3D96, \</span><br><span class="line">U+2F917-&gt;U+704A, U+2F918-&gt;U+707D, U+2F919-&gt;U+7077, \</span><br><span class="line">U+2F91A-&gt;U+70AD, U+2F91B-&gt;U+20525, U+2F91C-&gt;U+7145, \</span><br><span class="line">U+2F91D-&gt;U+24263, U+2F91E-&gt;U+719C, U+2F91F-&gt;U+243AB, \</span><br><span class="line">U+2F920-&gt;U+7228, U+2F921-&gt;U+7235, U+2F922-&gt;U+7250, \</span><br><span class="line">U+2F923-&gt;U+24608, U+2F924-&gt;U+7280, U+2F925-&gt;U+7295, \</span><br><span class="line">U+2F926-&gt;U+24735, U+2F927-&gt;U+24814, U+2F928-&gt;U+737A, \</span><br><span class="line">U+2F929-&gt;U+738B, U+2F92A-&gt;U+3EAC, U+2F92B-&gt;U+73A5, \</span><br><span class="line">U+2F92C-&gt;U+3EB8, U+2F92D-&gt;U+3EB8, U+2F92E-&gt;U+7447, \</span><br><span class="line">U+2F92F-&gt;U+745C, U+2F930-&gt;U+7471, U+2F931-&gt;U+7485, \</span><br><span class="line">U+2F932-&gt;U+74CA, U+2F933-&gt;U+3F1B, U+2F934-&gt;U+7524, \</span><br><span class="line">U+2F935-&gt;U+24C36, U+2F936-&gt;U+753E, U+2F937-&gt;U+24C92, \</span><br><span class="line">U+2F938-&gt;U+7570, U+2F939-&gt;U+2219F, U+2F93A-&gt;U+7610, \</span><br><span class="line">U+2F93B-&gt;U+24FA1, U+2F93C-&gt;U+24FB8, U+2F93D-&gt;U+25044, \</span><br><span class="line">U+2F93E-&gt;U+3FFC, U+2F93F-&gt;U+4008, U+2F940-&gt;U+76F4, \</span><br><span class="line">U+2F941-&gt;U+250F3, U+2F942-&gt;U+250F2, U+2F943-&gt;U+25119, \</span><br><span class="line">U+2F944-&gt;U+25133, U+2F945-&gt;U+771E, U+2F946-&gt;U+771F, \</span><br><span class="line">U+2F947-&gt;U+771F, U+2F948-&gt;U+774A, U+2F949-&gt;U+4039, \</span><br><span class="line">U+2F94A-&gt;U+778B, U+2F94B-&gt;U+4046, U+2F94C-&gt;U+4096, \</span><br><span class="line">U+2F94D-&gt;U+2541D, U+2F94E-&gt;U+784E, U+2F94F-&gt;U+788C, \</span><br><span class="line">U+2F950-&gt;U+78CC, U+2F951-&gt;U+40E3, U+2F952-&gt;U+25626, \</span><br><span class="line">U+2F953-&gt;U+7956, U+2F954-&gt;U+2569A, U+2F955-&gt;U+256C5, \</span><br><span class="line">U+2F956-&gt;U+798F, U+2F957-&gt;U+79EB, U+2F958-&gt;U+412F, \</span><br><span class="line">U+2F959-&gt;U+7A40, U+2F95A-&gt;U+7A4A, U+2F95B-&gt;U+7A4F, \</span><br><span class="line">U+2F95C-&gt;U+2597C, U+2F95D-&gt;U+25AA7, U+2F95E-&gt;U+25AA7, \</span><br><span class="line">U+2F95F-&gt;U+7AEE, U+2F960-&gt;U+4202, U+2F961-&gt;U+25BAB, \</span><br><span class="line">U+2F962-&gt;U+7BC6, U+2F963-&gt;U+7BC9, U+2F964-&gt;U+4227, \</span><br><span class="line">U+2F965-&gt;U+25C80, U+2F966-&gt;U+7CD2, U+2F967-&gt;U+42A0, \</span><br><span class="line">U+2F968-&gt;U+7CE8, U+2F969-&gt;U+7CE3, U+2F96A-&gt;U+7D00, \</span><br><span class="line">U+2F96B-&gt;U+25F86, U+2F96C-&gt;U+7D63, U+2F96D-&gt;U+4301, \</span><br><span class="line">U+2F96E-&gt;U+7DC7, U+2F96F-&gt;U+7E02, U+2F970-&gt;U+7E45, \</span><br><span class="line">U+2F971-&gt;U+4334, U+2F972-&gt;U+26228, U+2F973-&gt;U+26247, \</span><br><span class="line">U+2F974-&gt;U+4359, U+2F975-&gt;U+262D9, U+2F976-&gt;U+7F7A, \</span><br><span class="line">U+2F977-&gt;U+2633E, U+2F978-&gt;U+7F95, U+2F979-&gt;U+7FFA, \</span><br><span class="line">U+2F97A-&gt;U+8005, U+2F97B-&gt;U+264DA, U+2F97C-&gt;U+26523, \</span><br><span class="line">U+2F97D-&gt;U+8060, U+2F97E-&gt;U+265A8, U+2F97F-&gt;U+8070, \</span><br><span class="line">U+2F980-&gt;U+2335F, U+2F981-&gt;U+43D5, U+2F982-&gt;U+80B2, \</span><br><span class="line">U+2F983-&gt;U+8103, U+2F984-&gt;U+440B, U+2F985-&gt;U+813E, \</span><br><span class="line">U+2F986-&gt;U+5AB5, U+2F987-&gt;U+267A7, U+2F988-&gt;U+267B5, \</span><br><span class="line">U+2F989-&gt;U+23393, U+2F98A-&gt;U+2339C, U+2F98B-&gt;U+8201, \</span><br><span class="line">U+2F98C-&gt;U+8204, U+2F98D-&gt;U+8F9E, U+2F98E-&gt;U+446B, \</span><br><span class="line">U+2F98F-&gt;U+8291, U+2F990-&gt;U+828B, U+2F991-&gt;U+829D, \</span><br><span class="line">U+2F992-&gt;U+52B3, U+2F993-&gt;U+82B1, U+2F994-&gt;U+82B3, \</span><br><span class="line">U+2F995-&gt;U+82BD, U+2F996-&gt;U+82E6, U+2F997-&gt;U+26B3C, \</span><br><span class="line">U+2F998-&gt;U+82E5, U+2F999-&gt;U+831D, U+2F99A-&gt;U+8363, \</span><br><span class="line">U+2F99B-&gt;U+83AD, U+2F99C-&gt;U+8323, U+2F99D-&gt;U+83BD, \</span><br><span class="line">U+2F99E-&gt;U+83E7, U+2F99F-&gt;U+8457, U+2F9A0-&gt;U+8353, \</span><br><span class="line">U+2F9A1-&gt;U+83CA, U+2F9A2-&gt;U+83CC, U+2F9A3-&gt;U+83DC, \</span><br><span class="line">U+2F9A4-&gt;U+26C36, U+2F9A5-&gt;U+26D6B, U+2F9A6-&gt;U+26CD5, \</span><br><span class="line">U+2F9A7-&gt;U+452B, U+2F9A8-&gt;U+84F1, U+2F9A9-&gt;U+84F3, \</span><br><span class="line">U+2F9AA-&gt;U+8516, U+2F9AB-&gt;U+273CA, U+2F9AC-&gt;U+8564, \</span><br><span class="line">U+2F9AD-&gt;U+26F2C, U+2F9AE-&gt;U+455D, U+2F9AF-&gt;U+4561, \</span><br><span class="line">U+2F9B0-&gt;U+26FB1, U+2F9B1-&gt;U+270D2, U+2F9B2-&gt;U+456B, \</span><br><span class="line">U+2F9B3-&gt;U+8650, U+2F9B4-&gt;U+865C, U+2F9B5-&gt;U+8667, \</span><br><span class="line">U+2F9B6-&gt;U+8669, U+2F9B7-&gt;U+86A9, U+2F9B8-&gt;U+8688, \</span><br><span class="line">U+2F9B9-&gt;U+870E, U+2F9BA-&gt;U+86E2, U+2F9BB-&gt;U+8779, \</span><br><span class="line">U+2F9BC-&gt;U+8728, U+2F9BD-&gt;U+876B, U+2F9BE-&gt;U+8786, \</span><br><span class="line">U+2F9BF-&gt;U+45D7, U+2F9C0-&gt;U+87E1, U+2F9C1-&gt;U+8801, \</span><br><span class="line">U+2F9C2-&gt;U+45F9, U+2F9C3-&gt;U+8860, U+2F9C4-&gt;U+8863, \</span><br><span class="line">U+2F9C5-&gt;U+27667, U+2F9C6-&gt;U+88D7, U+2F9C7-&gt;U+88DE, \</span><br><span class="line">U+2F9C8-&gt;U+4635, U+2F9C9-&gt;U+88FA, U+2F9CA-&gt;U+34BB, \</span><br><span class="line">U+2F9CB-&gt;U+278AE, U+2F9CC-&gt;U+27966, U+2F9CD-&gt;U+46BE, \</span><br><span class="line">U+2F9CE-&gt;U+46C7, U+2F9CF-&gt;U+8AA0, U+2F9D0-&gt;U+8AED, \</span><br><span class="line">U+2F9D1-&gt;U+8B8A, U+2F9D2-&gt;U+8C55, U+2F9D3-&gt;U+27CA8, \</span><br><span class="line">U+2F9D4-&gt;U+8CAB, U+2F9D5-&gt;U+8CC1, U+2F9D6-&gt;U+8D1B, \</span><br><span class="line">U+2F9D7-&gt;U+8D77, U+2F9D8-&gt;U+27F2F, U+2F9D9-&gt;U+20804, \</span><br><span class="line">U+2F9DA-&gt;U+8DCB, U+2F9DB-&gt;U+8DBC, U+2F9DC-&gt;U+8DF0, \</span><br><span class="line">U+2F9DD-&gt;U+208DE, U+2F9DE-&gt;U+8ED4, U+2F9DF-&gt;U+8F38, \</span><br><span class="line">U+2F9E0-&gt;U+285D2, U+2F9E1-&gt;U+285ED, U+2F9E2-&gt;U+9094, \</span><br><span class="line">U+2F9E3-&gt;U+90F1, U+2F9E4-&gt;U+9111, U+2F9E5-&gt;U+2872E, \</span><br><span class="line">U+2F9E6-&gt;U+911B, U+2F9E7-&gt;U+9238, U+2F9E8-&gt;U+92D7, \</span><br><span class="line">U+2F9E9-&gt;U+92D8, U+2F9EA-&gt;U+927C, U+2F9EB-&gt;U+93F9, \</span><br><span class="line">U+2F9EC-&gt;U+9415, U+2F9ED-&gt;U+28BFA, U+2F9EE-&gt;U+958B, \</span><br><span class="line">U+2F9EF-&gt;U+4995, U+2F9F0-&gt;U+95B7, U+2F9F1-&gt;U+28D77, \</span><br><span class="line">U+2F9F2-&gt;U+49E6, U+2F9F3-&gt;U+96C3, U+2F9F4-&gt;U+5DB2, \</span><br><span class="line">U+2F9F5-&gt;U+9723, U+2F9F6-&gt;U+29145, U+2F9F7-&gt;U+2921A, \</span><br><span class="line">U+2F9F8-&gt;U+4A6E, U+2F9F9-&gt;U+4A76, U+2F9FA-&gt;U+97E0, \</span><br><span class="line">U+2F9FB-&gt;U+2940A, U+2F9FC-&gt;U+4AB2, U+2F9FD-&gt;U+29496, \</span><br><span class="line">U+2F9FE-&gt;U+980B, U+2F9FF-&gt;U+980B, U+2FA00-&gt;U+9829, \</span><br><span class="line">U+2FA01-&gt;U+295B6, U+2FA02-&gt;U+98E2, U+2FA03-&gt;U+4B33, \</span><br><span class="line">U+2FA04-&gt;U+9929, U+2FA05-&gt;U+99A7, U+2FA06-&gt;U+99C2, \</span><br><span class="line">U+2FA07-&gt;U+99FE, U+2FA08-&gt;U+4BCE, U+2FA09-&gt;U+29B30, \</span><br><span class="line">U+2FA0A-&gt;U+9B12, U+2FA0B-&gt;U+9C40, U+2FA0C-&gt;U+9CFD, \</span><br><span class="line">U+2FA0D-&gt;U+4CCE, U+2FA0E-&gt;U+4CED, U+2FA0F-&gt;U+9D67, \</span><br><span class="line">U+2FA10-&gt;U+2A0CE, U+2FA11-&gt;U+4CF8, U+2FA12-&gt;U+2A105, \</span><br><span class="line">U+2FA13-&gt;U+2A20E, U+2FA14-&gt;U+2A291, U+2FA15-&gt;U+9EBB, \</span><br><span class="line">U+2FA16-&gt;U+4D56, U+2FA17-&gt;U+9EF9, U+2FA18-&gt;U+9EFE, \</span><br><span class="line">U+2FA19-&gt;U+9F05, U+2FA1A-&gt;U+9F0F, U+2FA1B-&gt;U+9F16, \</span><br><span class="line">U+2FA1C-&gt;U+9F3B, U+2FA1D-&gt;U+2A600, U+2F00-&gt;U+4E00, \</span><br><span class="line">U+2F01-&gt;U+4E28, U+2F02-&gt;U+4E36, U+2F03-&gt;U+4E3F, \</span><br><span class="line">U+2F04-&gt;U+4E59, U+2F05-&gt;U+4E85, U+2F06-&gt;U+4E8C, \</span><br><span class="line">U+2F07-&gt;U+4EA0, U+2F08-&gt;U+4EBA, U+2F09-&gt;U+513F, \</span><br><span class="line">U+2F0A-&gt;U+5165, U+2F0B-&gt;U+516B, U+2F0C-&gt;U+5182, \</span><br><span class="line">U+2F0D-&gt;U+5196, U+2F0E-&gt;U+51AB, U+2F0F-&gt;U+51E0, \</span><br><span class="line">U+2F10-&gt;U+51F5, U+2F11-&gt;U+5200, U+2F12-&gt;U+529B, \</span><br><span class="line">U+2F13-&gt;U+52F9, U+2F14-&gt;U+5315, U+2F15-&gt;U+531A, \</span><br><span class="line">U+2F16-&gt;U+5338, U+2F17-&gt;U+5341, U+2F18-&gt;U+535C, \</span><br><span class="line">U+2F19-&gt;U+5369, U+2F1A-&gt;U+5382, U+2F1B-&gt;U+53B6, \</span><br><span class="line">U+2F1C-&gt;U+53C8, U+2F1D-&gt;U+53E3, U+2F1E-&gt;U+56D7, \</span><br><span class="line">U+2F1F-&gt;U+571F, U+2F20-&gt;U+58EB, U+2F21-&gt;U+5902, \</span><br><span class="line">U+2F22-&gt;U+590A, U+2F23-&gt;U+5915, U+2F24-&gt;U+5927, \</span><br><span class="line">U+2F25-&gt;U+5973, U+2F26-&gt;U+5B50, U+2F27-&gt;U+5B80, \</span><br><span class="line">U+2F28-&gt;U+5BF8, U+2F29-&gt;U+5C0F, U+2F2A-&gt;U+5C22, \</span><br><span class="line">U+2F2B-&gt;U+5C38, U+2F2C-&gt;U+5C6E, U+2F2D-&gt;U+5C71, \</span><br><span class="line">U+2F2E-&gt;U+5DDB, U+2F2F-&gt;U+5DE5, U+2F30-&gt;U+5DF1, \</span><br><span class="line">U+2F31-&gt;U+5DFE, U+2F32-&gt;U+5E72, U+2F33-&gt;U+5E7A, \</span><br><span class="line">U+2F34-&gt;U+5E7F, U+2F35-&gt;U+5EF4, U+2F36-&gt;U+5EFE, \</span><br><span class="line">U+2F37-&gt;U+5F0B, U+2F38-&gt;U+5F13, U+2F39-&gt;U+5F50, \</span><br><span class="line">U+2F3A-&gt;U+5F61, U+2F3B-&gt;U+5F73, U+2F3C-&gt;U+5FC3, \</span><br><span class="line">U+2F3D-&gt;U+6208, U+2F3E-&gt;U+6236, U+2F3F-&gt;U+624B, \</span><br><span class="line">U+2F40-&gt;U+652F, U+2F41-&gt;U+6534, U+2F42-&gt;U+6587, \</span><br><span class="line">U+2F43-&gt;U+6597, U+2F44-&gt;U+65A4, U+2F45-&gt;U+65B9, \</span><br><span class="line">U+2F46-&gt;U+65E0, U+2F47-&gt;U+65E5, U+2F48-&gt;U+66F0, \</span><br><span class="line">U+2F49-&gt;U+6708, U+2F4A-&gt;U+6728, U+2F4B-&gt;U+6B20, \</span><br><span class="line">U+2F4C-&gt;U+6B62, U+2F4D-&gt;U+6B79, U+2F4E-&gt;U+6BB3, \</span><br><span class="line">U+2F4F-&gt;U+6BCB, U+2F50-&gt;U+6BD4, U+2F51-&gt;U+6BDB, \</span><br><span class="line">U+2F52-&gt;U+6C0F, U+2F53-&gt;U+6C14, U+2F54-&gt;U+6C34, \</span><br><span class="line">U+2F55-&gt;U+706B, U+2F56-&gt;U+722A, U+2F57-&gt;U+7236, \</span><br><span class="line">U+2F58-&gt;U+723B, U+2F59-&gt;U+723F, U+2F5A-&gt;U+7247, \</span><br><span class="line">U+2F5B-&gt;U+7259, U+2F5C-&gt;U+725B, U+2F5D-&gt;U+72AC, \</span><br><span class="line">U+2F5E-&gt;U+7384, U+2F5F-&gt;U+7389, U+2F60-&gt;U+74DC, \</span><br><span class="line">U+2F61-&gt;U+74E6, U+2F62-&gt;U+7518, U+2F63-&gt;U+751F, \</span><br><span class="line">U+2F64-&gt;U+7528, U+2F65-&gt;U+7530, U+2F66-&gt;U+758B, \</span><br><span class="line">U+2F67-&gt;U+7592, U+2F68-&gt;U+7676, U+2F69-&gt;U+767D, \</span><br><span class="line">U+2F6A-&gt;U+76AE, U+2F6B-&gt;U+76BF, U+2F6C-&gt;U+76EE, \</span><br><span class="line">U+2F6D-&gt;U+77DB, U+2F6E-&gt;U+77E2, U+2F6F-&gt;U+77F3, \</span><br><span class="line">U+2F70-&gt;U+793A, U+2F71-&gt;U+79B8, U+2F72-&gt;U+79BE, \</span><br><span class="line">U+2F73-&gt;U+7A74, U+2F74-&gt;U+7ACB, U+2F75-&gt;U+7AF9, \</span><br><span class="line">U+2F76-&gt;U+7C73, U+2F77-&gt;U+7CF8, U+2F78-&gt;U+7F36, \</span><br><span class="line">U+2F79-&gt;U+7F51, U+2F7A-&gt;U+7F8A, U+2F7B-&gt;U+7FBD, \</span><br><span class="line">U+2F7C-&gt;U+8001, U+2F7D-&gt;U+800C, U+2F7E-&gt;U+8012, \</span><br><span class="line">U+2F7F-&gt;U+8033, U+2F80-&gt;U+807F, U+2F81-&gt;U+8089, \</span><br><span class="line">U+2F82-&gt;U+81E3, U+2F83-&gt;U+81EA, U+2F84-&gt;U+81F3, \</span><br><span class="line">U+2F85-&gt;U+81FC, U+2F86-&gt;U+820C, U+2F87-&gt;U+821B, \</span><br><span class="line">U+2F88-&gt;U+821F, U+2F89-&gt;U+826E, U+2F8A-&gt;U+8272, \</span><br><span class="line">U+2F8B-&gt;U+8278, U+2F8C-&gt;U+864D, U+2F8D-&gt;U+866B, \</span><br><span class="line">U+2F8E-&gt;U+8840, U+2F8F-&gt;U+884C, U+2F90-&gt;U+8863, \</span><br><span class="line">U+2F91-&gt;U+897E, U+2F92-&gt;U+898B, U+2F93-&gt;U+89D2, \</span><br><span class="line">U+2F94-&gt;U+8A00, U+2F95-&gt;U+8C37, U+2F96-&gt;U+8C46, \</span><br><span class="line">U+2F97-&gt;U+8C55, U+2F98-&gt;U+8C78, U+2F99-&gt;U+8C9D, \</span><br><span class="line">U+2F9A-&gt;U+8D64, U+2F9B-&gt;U+8D70, U+2F9C-&gt;U+8DB3, \</span><br><span class="line">U+2F9D-&gt;U+8EAB, U+2F9E-&gt;U+8ECA, U+2F9F-&gt;U+8F9B, \</span><br><span class="line">U+2FA0-&gt;U+8FB0, U+2FA1-&gt;U+8FB5, U+2FA2-&gt;U+9091, \</span><br><span class="line">U+2FA3-&gt;U+9149, U+2FA4-&gt;U+91C6, U+2FA5-&gt;U+91CC, \</span><br><span class="line">U+2FA6-&gt;U+91D1, U+2FA7-&gt;U+9577, U+2FA8-&gt;U+9580, \</span><br><span class="line">U+2FA9-&gt;U+961C, U+2FAA-&gt;U+96B6, U+2FAB-&gt;U+96B9, \</span><br><span class="line">U+2FAC-&gt;U+96E8, U+2FAD-&gt;U+9751, U+2FAE-&gt;U+975E, \</span><br><span class="line">U+2FAF-&gt;U+9762, U+2FB0-&gt;U+9769, U+2FB1-&gt;U+97CB, \</span><br><span class="line">U+2FB2-&gt;U+97ED, U+2FB3-&gt;U+97F3, U+2FB4-&gt;U+9801, \</span><br><span class="line">U+2FB5-&gt;U+98A8, U+2FB6-&gt;U+98DB, U+2FB7-&gt;U+98DF, \</span><br><span class="line">U+2FB8-&gt;U+9996, U+2FB9-&gt;U+9999, U+2FBA-&gt;U+99AC, \</span><br><span class="line">U+2FBB-&gt;U+9AA8, U+2FBC-&gt;U+9AD8, U+2FBD-&gt;U+9ADF, \</span><br><span class="line">U+2FBE-&gt;U+9B25, U+2FBF-&gt;U+9B2F, U+2FC0-&gt;U+9B32, \</span><br><span class="line">U+2FC1-&gt;U+9B3C, U+2FC2-&gt;U+9B5A, U+2FC3-&gt;U+9CE5, \</span><br><span class="line">U+2FC4-&gt;U+9E75, U+2FC5-&gt;U+9E7F, U+2FC6-&gt;U+9EA5, \</span><br><span class="line">U+2FC7-&gt;U+9EBB, U+2FC8-&gt;U+9EC3, U+2FC9-&gt;U+9ECD, \</span><br><span class="line">U+2FCA-&gt;U+9ED1, U+2FCB-&gt;U+9EF9, U+2FCC-&gt;U+9EFD, \</span><br><span class="line">U+2FCD-&gt;U+9F0E, U+2FCE-&gt;U+9F13, U+2FCF-&gt;U+9F20, \</span><br><span class="line">U+2FD0-&gt;U+9F3B, U+2FD1-&gt;U+9F4A, U+2FD2-&gt;U+9F52, \</span><br><span class="line">U+2FD3-&gt;U+9F8D, U+2FD4-&gt;U+9F9C, U+2FD5-&gt;U+9FA0, \</span><br><span class="line">U+3042-&gt;U+3041, U+3044-&gt;U+3043, U+3046-&gt;U+3045, \</span><br><span class="line">U+3048-&gt;U+3047, U+304A-&gt;U+3049, U+304C-&gt;U+304B, \</span><br><span class="line">U+304E-&gt;U+304D, U+3050-&gt;U+304F, U+3052-&gt;U+3051, \</span><br><span class="line">U+3054-&gt;U+3053, U+3056-&gt;U+3055, U+3058-&gt;U+3057, \</span><br><span class="line">U+305A-&gt;U+3059, U+305C-&gt;U+305B, U+305E-&gt;U+305D, \</span><br><span class="line">U+3060-&gt;U+305F, U+3062-&gt;U+3061, U+3064-&gt;U+3063, \</span><br><span class="line">U+3065-&gt;U+3063, U+3067-&gt;U+3066, U+3069-&gt;U+3068, \</span><br><span class="line">U+3070-&gt;U+306F, U+3071-&gt;U+306F, U+3073-&gt;U+3072, \</span><br><span class="line">U+3074-&gt;U+3072, U+3076-&gt;U+3075, U+3077-&gt;U+3075, \</span><br><span class="line">U+3079-&gt;U+3078, U+307A-&gt;U+3078, U+307C-&gt;U+307B, \</span><br><span class="line">U+307D-&gt;U+307B, U+3084-&gt;U+3083, U+3086-&gt;U+3085, \</span><br><span class="line">U+3088-&gt;U+3087, U+308F-&gt;U+308E, U+3094-&gt;U+3046, \</span><br><span class="line">U+3095-&gt;U+304B, U+3096-&gt;U+3051, U+30A2-&gt;U+30A1, \</span><br><span class="line">U+30A4-&gt;U+30A3, U+30A6-&gt;U+30A5, U+30A8-&gt;U+30A7, \</span><br><span class="line">U+30AA-&gt;U+30A9, U+30AC-&gt;U+30AB, U+30AE-&gt;U+30AD, \</span><br><span class="line">U+30B0-&gt;U+30AF, U+30B2-&gt;U+30B1, U+30B4-&gt;U+30B3, \</span><br><span class="line">U+30B6-&gt;U+30B5, U+30B8-&gt;U+30B7, U+30BA-&gt;U+30B9, \</span><br><span class="line">U+30BC-&gt;U+30BB, U+30BE-&gt;U+30BD, U+30C0-&gt;U+30BF, \</span><br><span class="line">U+30C2-&gt;U+30C1, U+30C5-&gt;U+30C4, U+30C7-&gt;U+30C6, \</span><br><span class="line">U+30C9-&gt;U+30C8, U+30D0-&gt;U+30CF, U+30D1-&gt;U+30CF, \</span><br><span class="line">U+30D3-&gt;U+30D2, U+30D4-&gt;U+30D2, U+30D6-&gt;U+30D5, \</span><br><span class="line">U+30D7-&gt;U+30D5, U+30D9-&gt;U+30D8, U+30DA-&gt;U+30D8, \</span><br><span class="line">U+30DC-&gt;U+30DB, U+30DD-&gt;U+30DB, U+30E4-&gt;U+30E3, \</span><br><span class="line">U+30E6-&gt;U+30E5, U+30E8-&gt;U+30E7, U+30EF-&gt;U+30EE, \</span><br><span class="line">U+30F4-&gt;U+30A6, U+30AB-&gt;U+30F5, U+30B1-&gt;U+30F6, \</span><br><span class="line">U+30F7-&gt;U+30EF, U+30F8-&gt;U+30F0, U+30F9-&gt;U+30F1, \</span><br><span class="line">U+30FA-&gt;U+30F2, U+30AF-&gt;U+31F0, U+30B7-&gt;U+31F1, \</span><br><span class="line">U+30B9-&gt;U+31F2, U+30C8-&gt;U+31F3, U+30CC-&gt;U+31F4, \</span><br><span class="line">U+30CF-&gt;U+31F5, U+30D2-&gt;U+31F6, U+30D5-&gt;U+31F7, \</span><br><span class="line">U+30D8-&gt;U+31F8, U+30DB-&gt;U+31F9, U+30E0-&gt;U+31FA, \</span><br><span class="line">U+30E9-&gt;U+31FB, U+30EA-&gt;U+31FC, U+30EB-&gt;U+31FD, \</span><br><span class="line">U+30EC-&gt;U+31FE, U+30ED-&gt;U+31FF, U+FF66-&gt;U+30F2, \</span><br><span class="line">U+FF67-&gt;U+30A1, U+FF68-&gt;U+30A3, U+FF69-&gt;U+30A5, \</span><br><span class="line">U+FF6A-&gt;U+30A7, U+FF6B-&gt;U+30A9, U+FF6C-&gt;U+30E3, \</span><br><span class="line">U+FF6D-&gt;U+30E5, U+FF6E-&gt;U+30E7, U+FF6F-&gt;U+30C3, \</span><br><span class="line">U+FF71-&gt;U+30A1, U+FF72-&gt;U+30A3, U+FF73-&gt;U+30A5, \</span><br><span class="line">U+FF74-&gt;U+30A7, U+FF75-&gt;U+30A9, U+FF76-&gt;U+30AB, \</span><br><span class="line">U+FF77-&gt;U+30AD, U+FF78-&gt;U+30AF, U+FF79-&gt;U+30B1, \</span><br><span class="line">U+FF7A-&gt;U+30B3, U+FF7B-&gt;U+30B5, U+FF7C-&gt;U+30B7, \</span><br><span class="line">U+FF7D-&gt;U+30B9, U+FF7E-&gt;U+30BB, U+FF7F-&gt;U+30BD, \</span><br><span class="line">U+FF80-&gt;U+30BF, U+FF81-&gt;U+30C1, U+FF82-&gt;U+30C3, \</span><br><span class="line">U+FF83-&gt;U+30C6, U+FF84-&gt;U+30C8, U+FF85-&gt;U+30CA, \</span><br><span class="line">U+FF86-&gt;U+30CB, U+FF87-&gt;U+30CC, U+FF88-&gt;U+30CD, \</span><br><span class="line">U+FF89-&gt;U+30CE, U+FF8A-&gt;U+30CF, U+FF8B-&gt;U+30D2, \</span><br><span class="line">U+FF8C-&gt;U+30D5, U+FF8D-&gt;U+30D8, U+FF8E-&gt;U+30DB, \</span><br><span class="line">U+FF8F-&gt;U+30DE, U+FF90-&gt;U+30DF, U+FF91-&gt;U+30E0, \</span><br><span class="line">U+FF92-&gt;U+30E1, U+FF93-&gt;U+30E2, U+FF94-&gt;U+30E3, \</span><br><span class="line">U+FF95-&gt;U+30E5, U+FF96-&gt;U+30E7, U+FF97-&gt;U+30E9, \</span><br><span class="line">U+FF98-&gt;U+30EA, U+FF99-&gt;U+30EB, U+FF9A-&gt;U+30EC, \</span><br><span class="line">U+FF9B-&gt;U+30ED, U+FF9C-&gt;U+30EF, U+FF9D-&gt;U+30F3, \</span><br><span class="line">U+FFA0-&gt;U+3164, U+FFA1-&gt;U+3131, U+FFA2-&gt;U+3132, \</span><br><span class="line">U+FFA3-&gt;U+3133, U+FFA4-&gt;U+3134, U+FFA5-&gt;U+3135, \</span><br><span class="line">U+FFA6-&gt;U+3136, U+FFA7-&gt;U+3137, U+FFA8-&gt;U+3138, \</span><br><span class="line">U+FFA9-&gt;U+3139, U+FFAA-&gt;U+313A, U+FFAB-&gt;U+313B, \</span><br><span class="line">U+FFAC-&gt;U+313C, U+FFAD-&gt;U+313D, U+FFAE-&gt;U+313E, \</span><br><span class="line">U+FFAF-&gt;U+313F, U+FFB0-&gt;U+3140, U+FFB1-&gt;U+3141, \</span><br><span class="line">U+FFB2-&gt;U+3142, U+FFB3-&gt;U+3143, U+FFB4-&gt;U+3144, \</span><br><span class="line">U+FFB5-&gt;U+3145, U+FFB6-&gt;U+3146, U+FFB7-&gt;U+3147, \</span><br><span class="line">U+FFB8-&gt;U+3148, U+FFB9-&gt;U+3149, U+FFBA-&gt;U+314A, \</span><br><span class="line">U+FFBB-&gt;U+314B, U+FFBC-&gt;U+314C, U+FFBD-&gt;U+314D, \</span><br><span class="line">U+FFBE-&gt;U+314E, U+FFC2-&gt;U+314F, U+FFC3-&gt;U+3150, \</span><br><span class="line">U+FFC4-&gt;U+3151, U+FFC5-&gt;U+3152, U+FFC6-&gt;U+3153, \</span><br><span class="line">U+FFC7-&gt;U+3154, U+FFCA-&gt;U+3155, U+FFCB-&gt;U+3156, \</span><br><span class="line">U+FFCC-&gt;U+3157, U+FFCD-&gt;U+3158, U+FFCE-&gt;U+3159, \</span><br><span class="line">U+FFCF-&gt;U+315A, U+FFD2-&gt;U+315B, U+FFD3-&gt;U+315C, \</span><br><span class="line">U+FFD4-&gt;U+315D, U+FFD5-&gt;U+315E, U+FFD6-&gt;U+315F, \</span><br><span class="line">U+FFD7-&gt;U+3160, U+FFDA-&gt;U+3161, U+FFDB-&gt;U+3162, \</span><br><span class="line">U+FFDC-&gt;U+3163, U+3131-&gt;U+1100, U+3132-&gt;U+1101, \</span><br><span class="line">U+3133-&gt;U+11AA, U+3134-&gt;U+1102, U+3135-&gt;U+11AC, \</span><br><span class="line">U+3136-&gt;U+11AD, U+3137-&gt;U+1103, U+3138-&gt;U+1104, \</span><br><span class="line">U+3139-&gt;U+1105, U+313A-&gt;U+11B0, U+313B-&gt;U+11B1, \</span><br><span class="line">U+313C-&gt;U+11B2, U+313D-&gt;U+11B3, U+313E-&gt;U+11B4, \</span><br><span class="line">U+313F-&gt;U+11B5, U+3140-&gt;U+111A, U+3141-&gt;U+1106, \</span><br><span class="line">U+3142-&gt;U+1107, U+3143-&gt;U+1108, U+3144-&gt;U+1121, \</span><br><span class="line">U+3145-&gt;U+1109, U+3146-&gt;U+110A, U+3147-&gt;U+110B, \</span><br><span class="line">U+3148-&gt;U+110C, U+3149-&gt;U+110D, U+314A-&gt;U+110E, \</span><br><span class="line">U+314B-&gt;U+110F, U+314C-&gt;U+1110, U+314D-&gt;U+1111, \</span><br><span class="line">U+314E-&gt;U+1112, U+314F-&gt;U+1161, U+3150-&gt;U+1162, \</span><br><span class="line">U+3151-&gt;U+1163, U+3152-&gt;U+1164, U+3153-&gt;U+1165, \</span><br><span class="line">U+3154-&gt;U+1166, U+3155-&gt;U+1167, U+3156-&gt;U+1168, \</span><br><span class="line">U+3157-&gt;U+1169, U+3158-&gt;U+116A, U+3159-&gt;U+116B, \</span><br><span class="line">U+315A-&gt;U+116C, U+315B-&gt;U+116D, U+315C-&gt;U+116E, \</span><br><span class="line">U+315D-&gt;U+116F, U+315E-&gt;U+1170, U+315F-&gt;U+1171, \</span><br><span class="line">U+3160-&gt;U+1172, U+3161-&gt;U+1173, U+3162-&gt;U+1174, \</span><br><span class="line">U+3163-&gt;U+1175, U+3165-&gt;U+1114, U+3166-&gt;U+1115, \</span><br><span class="line">U+3167-&gt;U+11C7, U+3168-&gt;U+11C8, U+3169-&gt;U+11CC, \</span><br><span class="line">U+316A-&gt;U+11CE, U+316B-&gt;U+11D3, U+316C-&gt;U+11D7, \</span><br><span class="line">U+316D-&gt;U+11D9, U+316E-&gt;U+111C, U+316F-&gt;U+11DD, \</span><br><span class="line">U+3170-&gt;U+11DF, U+3171-&gt;U+111D, U+3172-&gt;U+111E, \</span><br><span class="line">U+3173-&gt;U+1120, U+3174-&gt;U+1122, U+3175-&gt;U+1123, \</span><br><span class="line">U+3176-&gt;U+1127, U+3177-&gt;U+1129, U+3178-&gt;U+112B, \</span><br><span class="line">U+3179-&gt;U+112C, U+317A-&gt;U+112D, U+317B-&gt;U+112E, \</span><br><span class="line">U+317C-&gt;U+112F, U+317D-&gt;U+1132, U+317E-&gt;U+1136, \</span><br><span class="line">U+317F-&gt;U+1140, U+3180-&gt;U+1147, U+3181-&gt;U+114C, \</span><br><span class="line">U+3182-&gt;U+11F1, U+3183-&gt;U+11F2, U+3184-&gt;U+1157, \</span><br><span class="line">U+3185-&gt;U+1158, U+3186-&gt;U+1159, U+3187-&gt;U+1184, \</span><br><span class="line">U+3188-&gt;U+1185, U+3189-&gt;U+1188, U+318A-&gt;U+1191, \</span><br><span class="line">U+318B-&gt;U+1192, U+318C-&gt;U+1194, U+318D-&gt;U+119E, \</span><br><span class="line">U+318E-&gt;U+11A1, U+A490-&gt;U+A408, U+A491-&gt;U+A1B9, \</span><br><span class="line">U+4E00..U+9FBB, U+3400..U+4DB5, U+20000..U+2A6D6, \</span><br><span class="line">U+FA0E, U+FA0F, U+FA11, \</span><br><span class="line">U+FA13, U+FA14, U+FA1F, \</span><br><span class="line">U+FA21, U+FA23, U+FA24, \</span><br><span class="line">U+FA27, U+FA28, U+FA29, \</span><br><span class="line">U+3105..U+312C, U+31A0..U+31B7, U+3041, \</span><br><span class="line">U+3043, U+3045, U+3047, \</span><br><span class="line">U+3049, U+304B, U+304D, \</span><br><span class="line">U+304F, U+3051, U+3053, \</span><br><span class="line">U+3055, U+3057, U+3059, \</span><br><span class="line">U+305B, U+305D, U+305F, \</span><br><span class="line">U+3061, U+3063, U+3066, \</span><br><span class="line">U+3068, U+306A..U+306F, U+3072, \</span><br><span class="line">U+3075, U+3078, U+307B, \</span><br><span class="line">U+307E..U+3083, U+3085, U+3087, \</span><br><span class="line">U+3089..U+308E, U+3090..U+3093, U+30A1, \</span><br><span class="line">U+30A3, U+30A5, U+30A7, \</span><br><span class="line">U+30A9, U+30AD, U+30AF, \</span><br><span class="line">U+30B3, U+30B5, U+30BB, \</span><br><span class="line">U+30BD, U+30BF, U+30C1, \</span><br><span class="line">U+30C3, U+30C4, U+30C6, \</span><br><span class="line">U+30CA, U+30CB, U+30CD, \</span><br><span class="line">U+30CE, U+30DE, U+30DF, \</span><br><span class="line">U+30E1, U+30E2, U+30E3, \</span><br><span class="line">U+30E5, U+30E7, U+30EE, \</span><br><span class="line">U+30F0..U+30F3, U+30F5, U+30F6, \</span><br><span class="line">U+31F0, U+31F1, U+31F2, \</span><br><span class="line">U+31F3, U+31F4, U+31F5, \</span><br><span class="line">U+31F6, U+31F7, U+31F8, \</span><br><span class="line">U+31F9, U+31FA, U+31FB, \</span><br><span class="line">U+31FC, U+31FD, U+31FE, \</span><br><span class="line">U+31FF, U+AC00..U+D7A3, U+1100..U+1159</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#文章增量索引(用于增量更新索引)</span><br><span class="line">index article_detal : article</span><br><span class="line">&#123;</span><br><span class="line">    source      = article_delta_src</span><br><span class="line">    path        = /usr/local/sphinx/var/data/article_detal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="索引二"><a href="#索引二" class="headerlink" title="索引二:"></a>索引二:</h4><p>建立博客论坛文章索引(sphinx-social-article.conf,此处省略格式同上)</p><h4 id="建立sphinx-conf配置文件"><a href="#建立sphinx-conf配置文件" class="headerlink" title="建立sphinx.conf配置文件"></a>建立sphinx.conf配置文件</h4><p>注意:<strong>#!/bin/bash</strong> 很重要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash </span><br><span class="line">path=/usr/local/sphinx/etc</span><br><span class="line"></span><br><span class="line">#引入所有索引文件</span><br><span class="line">/bin/cat $path/sphinx-base.conf $path/sphinx-article.conf $path/sphinx-social-article.conf</span><br></pre></td></tr></table></figure><blockquote><p>此时,配置工作就已经完成,可以启动sphinx服务,并生成索引文件了.</p></blockquote><h4 id="自动索引"><a href="#自动索引" class="headerlink" title="自动索引"></a>自动索引</h4><p>用<a href="/2017/12/11/Linux/例行性工作调度">cron定时任务</a>实现自动索引.</p><p><code>建立索引更新脚本</code>: start_index.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">index=/usr/local/sphinx/bin/indexer</span><br><span class="line"></span><br><span class="line">#建立索引</span><br><span class="line">echo -e &quot;\n\n\n[`date`]建立索引-------------&gt;$1&quot;;</span><br><span class="line">$index --rotate $1</span><br><span class="line"></span><br><span class="line">#pat=detal</span><br><span class="line">#echo $1|grep -e $pat &gt; /dev/null</span><br><span class="line">if [ $# -eq 2 ]; then</span><br><span class="line">    echo -e &quot;[`date`]$1合并增量索引-------------&gt;$2&quot;</span><br><span class="line">    $index --merge $2 $1 --rotate</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><code>设置cron定时任务</code>: crontab -e</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#sphinx article索引</span><br><span class="line">*/1 * * * * /usr/local/sphinx/etc/start_index.sh article_detal article &gt;&gt; /root/sphinx/log/detal.log 2&gt;&amp;1 #增量索引</span><br><span class="line">* 2 * * * /usr/local/sphinx/etc/start_index.sh article &gt;&gt; /root/sphinx/log/all.log 2&gt;&amp;1 #全量索引</span><br><span class="line"></span><br><span class="line">#sphinx social_article索引</span><br><span class="line">*/1 * * * * /usr/local/sphinx/etc/start_index.sh social_article_detal social_article &gt;&gt; /root/sphinx/log/detal.log 2&gt;&amp;1 #增量索引</span><br><span class="line">* 2 * * * /usr/local/sphinx/etc/start_index.sh social_article &gt;&gt; /root/sphinx/log/all.log 2&gt;&amp;1 #全量索引</span><br></pre></td></tr></table></figure><hr><p>参考资料:<br>官方文档:<a href="http://sphinxsearch.com/" target="_blank" rel="noopener">http://sphinxsearch.com/</a><br>中文资料:</p><ul><li><a href="http://www.cnblogs.com/yjf512/p/3598332.html" target="_blank" rel="noopener">Sphinx 配置文件全解析</a></li><li><a href="https://blog.csdn.net/huanghuitan/article/details/60133114" target="_blank" rel="noopener">Sphinx 命令行工具</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Sphinx是一个基于SQL的全文检索引擎，可以结合MySQL,PostgreSQL做全文搜索.&lt;/p&gt;
&lt;/blockquote&gt;  
&lt;p&gt;开发过程中,可能涉及公共配置和多个索引配置,如果配置在一个文件中将导致文件庞大,难于维护所以考虑拆分配置文件,场景如下:  &lt;/p&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="学习笔记" scheme="http://fcwalkers.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="全文检索" scheme="http://fcwalkers.com/tags/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    
      <category term="Sphinx" scheme="http://fcwalkers.com/tags/Sphinx/"/>
    
  </entry>
  
  <entry>
    <title>GIT学习笔记</title>
    <link href="http://fcwalkers.com/2018/03/29/GIT/GIT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://fcwalkers.com/2018/03/29/GIT/GIT学习笔记/</id>
    <published>2018-03-28T16:00:00.000Z</published>
    <updated>2018-06-05T09:41:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="第一次安装设置"><a href="#第一次安装设置" class="headerlink" title="第一次安装设置"></a>第一次安装设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#因为git是分布式,这些就是你在提交commit时的签名。(--global全局设置,不加则设置当前版本库)</span><br><span class="line">$ git config [--global] user.name &quot;Your Name&quot;</span><br><span class="line">$ git config [--global] user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="创建版本仓库"><a href="#创建版本仓库" class="headerlink" title="创建版本仓库"></a>创建版本仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git init #创建版本仓库  </span><br><span class="line">$ git add #添加文件到版本仓库(可同时添加多个文件空格分割)</span><br><span class="line">$ git commit -m &apos;注释内容&apos; #提交版本  </span><br><span class="line">$ git commit (-v) #提交版本,启动编辑器编写注释(-v显示详细变更信息)</span><br><span class="line">$ git commit -a #提交版本,跳过使用暂存区(不用git add)</span><br></pre></td></tr></table></figure><h2 id="版本比对"><a href="#版本比对" class="headerlink" title="版本比对"></a>版本比对</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status (-s/--short) #查看版本库状态以及文件修改状态(显示简单信息)</span><br><span class="line">1.未修改状态:nothing to commit,working tree clean</span><br><span class="line">2.修改后文件已在缓存区:Changes to be commited</span><br><span class="line">3.新增文件状态:Untracked files</span><br><span class="line">4.修改后文件未在缓存区:Changes not staged for commit</span><br><span class="line">3与4状态区别在于3无法用git commit –am命令将文件添加到本地仓库</span><br></pre></td></tr></table></figure><blockquote><p>git status -s符号意义:<br>?? 新添加的未跟踪文件前面<br>A 新添加到暂存区中的文件<br>M 修改过的文件(出现在右边的,表示该文件被修改了但是还没放入暂存区，出现在靠左边的 M 表示该文件被修改了并放入了暂存区)</p></blockquote><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><blockquote><p>和SVN不一样,GIT每个提交版本的commit id不是1,2,3…的数字而是一个SHA1计算出来的十六进制数字.因为GIT是分布式控制系统,如果用1,2,3…数字表示多人协作会重复.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HEAD #表示最新提交的版本</span><br><span class="line">HEAD^ #表示上一个提交版本</span><br><span class="line">HEAD~100 #表示往上100个版本(~ 代替多个 ^)</span><br><span class="line">|</span><br><span class="line">#git reset 版本号</span><br><span class="line">$ git reset (--mixed) HEAD^ #回退到上个版本,缓存区和你指定的提交同步，但工作目录不受影响(--mixed是默认选项,可以不加)</span><br><span class="line">$ git reset --soft HEAD^ #回退到上个版本,缓存区和工作区都不受影响</span><br><span class="line">$ git reset --hard HEAD^ #回退到上个版本,缓存区和工作目录都同步到你指定的提交(危险指令)</span><br></pre></td></tr></table></figure><blockquote><p>git reset 后面如果是版本号不用写全,只写前几位就可以了.GIT版本回退非常快,因为GIT在内部有个指向当前版本的HEAD指针,当回退版本时GIT仅仅是把HEAD从指向当前版本改为指向回退版本(如下图),顺便把工作区更新了.</p></blockquote><p><img src="/2018/03/29/GIT/GIT学习笔记/QQ20171117-112922@2x.png" alt="当前版本"></p><p><img src="/2018/03/29/GIT/GIT学习笔记/QQ20171117-112940@2x.png" alt="版本回退"></p><blockquote><p>由于git log仅显示从当前版本到历史版本的纪录,如果回退了某个版本,又想还原到最新版本怎么办呢?</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog </span><br><span class="line">#如果在回退以后又想再次回到之前的版本，git reflog 可以查看所有分支的所有操作记录（包括commit和reset的操作），包括已经被删除的commit记录，git log则不能察看已经删除了的commit记录</span><br></pre></td></tr></table></figure><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><blockquote><p>git和其它版本控制系统,如SVN的一个不同之处就是有暂存区的概念.<br><code>工作区</code>:就是电脑能看到的仓库文件夹目录.<br><code>版本库</code>:工作区内的隐藏目录.git,这个不算工作区,而是git的版本库.<br>GIT版本库里存了很多东西,其中最重要的就是stage(或者叫index)的暂存区,还有GIT为我们自动创建的第一个分支master,以及一个指向master的指针HEAD.<br>实际上git add就是把所有修改放到暂存区,git commit是把暂缓区的修改提交到分支.<br><strong>因此,修改一个文件后必须要添加(git add)到暂存区,才能提交(git commit)到分支,否则提交无效</strong></p></blockquote><p><img src="/2018/03/29/GIT/GIT学习笔记/QQ20171117-115013@2x.png" alt="版本库"></p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend #撤消上次文件提交的修改,重新提交（--amend选项仅针对当前版本未push情况有效）</span><br><span class="line">$ git checkout -- 文件名 #撤销工作区文件的修改(如果没有--应变成了切换分支的命令)</span><br><span class="line">$ git reset HEAD 文件名 #撤销暂存区文件修改(HEAD表示撤销到最新版本)</span><br></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm　[--cached] 文件名 #从版本库中删除文件(--cached从缓存区中移除到工作区)</span><br></pre></td></tr></table></figure><blockquote><p>GIT删除(git rm)文件后,直接提交(git commit)即可,不需要再添加到暂存区(git add).<br>如果不小心删错了,可以直接撤销修改(git checkout – 文件名)<br>如果文件已经提交到版本库,那么永远不用担心误删,但只能恢复到最新版本库,最新修改将丢失.</p></blockquote><h2 id="文件移动"><a href="#文件移动" class="headerlink" title="文件移动"></a>文件移动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git mv file_from file_to #重命名文件</span><br><span class="line">实际相当于运行下面三个命令</span><br><span class="line">$ mv file_from file_to</span><br><span class="line">$ git rm file_from</span><br><span class="line">$ git add file_to</span><br></pre></td></tr></table></figure><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库<a name="h2_remote_orgin"></a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin 远程仓库地址 #关联远程仓库(origin是git远程仓库的默认名,可以修改)</span><br><span class="line">$ git push #本地内容推送到远程仓库</span><br></pre></td></tr></table></figure><blockquote><p>关联后第一次推送仓库的所有内容使用命令:git push -u origin master<br>此后,每次推送本地修改内容可以使用命令:git push origin master</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone [-b 分支名] 远程仓库地址 #克隆远程仓库到本地(-b指定分支)</span><br><span class="line">$ git fetch 远程仓库名 #从服务器上抓取本地没有的数据，它并不会修改工作目录中的内容, 它只会获取数据然后让你自己合并.</span><br><span class="line">$ git pull (--allow-unrelated-histories) #从服务器抓取分支数据并然后尝试合并.</span><br></pre></td></tr></table></figure><blockquote><p>由于git pull命令经常让人困惑,所以通常单独显式地使用 git fetch 与git merge 命令会更好一些。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git remote #显示远程仓库名</span><br><span class="line">$ git ls-remote #显示远程引用完整列表</span><br><span class="line">$ git remote show [remote-name] #查看远程仓库更多信息</span><br><span class="line"></span><br><span class="line">$ git remote -v #显示远程仓库信息</span><br><span class="line">origin  git@github.com:WindusL/LearningNotes.git (fetch)</span><br><span class="line">origin  git@github.com:WindusL/LearningNotes.git (push)</span><br></pre></td></tr></table></figure><blockquote><p>上面显示了可以抓取和推送的origin地址。如果没有推送权限就看不到push的地址。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rename [oldname] [newname] #对远程仓库的简写名称重命名指令</span><br><span class="line">$ git remote rm [remote-name] #对远程仓库的简写名称进行移除的命令</span><br></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><blockquote><p>Git里默认有一个主分支master，其中HEAD严格来说指向的不是提交，而是当前分支，分支才指向提交。  </p></blockquote><p><img src="/2018/03/29/GIT/GIT学习笔记/QQ20171118223701.png" alt="指向图"></p><blockquote><p>Git创建一个分支只是增加一个指针，然后将HEAD指向新的分支 ，表示在当前分支，工作区的文件没有任何变化。  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git branch 分支名 #创建分支</span><br><span class="line">$ git checkout 分支名 #切换分支</span><br><span class="line">#上面两个命令相当于</span><br><span class="line">$ git checkout -b 分支名 #创建并切换分支(加上-b表示先创建后切换)</span><br><span class="line">$ git checkout -b 分支名 远程分支名 ＃拉取远程分支到本地分支((加上-b表示先创建后切换)</span><br><span class="line"></span><br><span class="line">$ git branch (-a/r) #列出所有本地分支(-a 包括远程分支,-r仅列出远程分支)</span><br><span class="line">$ git branch -v|-vv #查看每个分支最后一次的提交(-vv选项会列表更多信息)</span><br><span class="line">$ git merge 分支名 #合并指定分支到当前分支</span><br><span class="line">$ git branch -d 分支名 #删除已合并本地分支</span><br><span class="line">$ git branch -D 分支名 #强制删除未合并的分支</span><br><span class="line">$ git branch -m|-M 旧分支名 新分支名 # 分支生命名（-M强制生命名）</span><br></pre></td></tr></table></figure><blockquote><p>重命名远程分支推荐做法:<br>1、删除远程分支<br>2、push本地新分支名到远程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --merged|--no-merged #查看已（未）合并的分支</span><br></pre></td></tr></table></figure><blockquote><p>删除选程分支</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -dr 分支名　# (-r删除远程分支)</span><br><span class="line">git push [远程名] :[分支名]</span><br></pre></td></tr></table></figure><h3 id="分支-变基"><a href="#分支-变基" class="headerlink" title="分支-变基"></a>分支-变基</h3><p>分支合并会产生记录,如果想不产生这些记录就可以使用分支变基后再合并.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase 分支名 #把当前分支变基到指定分支</span><br><span class="line"></span><br><span class="line">#切换到要变基的分支进行变基</span><br><span class="line">$ git checkout experiment</span><br><span class="line">$ git rebase master</span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: added staged command</span><br><span class="line">#回到合并分支进行合并</span><br><span class="line">$ git checkout master</span><br><span class="line">$ git merge experiment</span><br></pre></td></tr></table></figure><blockquote><p>变基注意事项:<br>只在从未推送至共用仓库的提交上执行变基命令</p></blockquote><h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><blockquote><p>通常，合并分支，如果可能Git会用Fast Forward模式，但这种模式下，删除分支后，会丢掉分支信息。<br>如果强制禁用Fast Forward模式，Git会在merge时生成一个新的commit，这样从分支历史上就可以看出分支信息。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m 注释 分支名 #合并分支(--no-ff表示禁用Fast Forward模式，因为要生成一个新的commit所以要加上-m注释参数)</span><br></pre></td></tr></table></figure><h3 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h3><blockquote><p>当一个分支的工作还没有做完，不能提交，而此时又要及时做其它工作时，可以先把工作区储藏起来,创建bug分支(命名:fixbug-issueId)。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git stash #储藏工作区(储藏后再用git status查看就是干净的, 除非是没有被git管理的文件)</span><br><span class="line">$ git stash save (--keep-index|-u|--patch)注释 #储藏工作区并添加注释</span><br><span class="line">(</span><br><span class="line">--keep-index #不储藏任何通过 git add 命令已暂存的;</span><br><span class="line">-u #储藏任何创建的未跟踪文件</span><br><span class="line">--patch #不会储藏所有修改过的任何东西，但是会交互式地提示哪些改动想要储藏、哪些改动需要保存在工作目录中。</span><br><span class="line">)</span><br><span class="line">$ git stash list #查看stash列表</span><br><span class="line">$ git stash apply #恢复stash，但stash不删除</span><br><span class="line">$ git stash pop #恢复stash，同时删除stash</span><br><span class="line">$ git stash drop #移除stash (会删除储存所有修改,谨慎使用)</span><br><span class="line">$ git stash show (-p/--patch) #查看stash(详细)修改</span><br></pre></td></tr></table></figure><blockquote><p>如果多次执行stash后，恢复stash就加上stash名，如：git stash pop/apply stash@{0}<br>默认情况,stash不会存储Untracked files.如果想要存储,要先git add添加到版本库或者使用git stash -u选项,如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash -u (--include-untracked) # 存储工作空间包括Untracked files</span><br></pre></td></tr></table></figure><h3 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h3><blockquote><p>开发新功能时最好创建一个新的分支(命名:feature-x)。</p></blockquote><h3 id="预发布分支"><a href="#预发布分支" class="headerlink" title="预发布分支"></a>预发布分支</h3><blockquote><p>发布正式版本之前（即合并到 Master 分支之前），我们可能需要有一个预发布的版本进行测试(命名:release-版本号)。</p></blockquote><h3 id="推送分支-同远程仓库"><a href="#推送分支-同远程仓库" class="headerlink" title="推送分支(同远程仓库)"></a>推送分支(<a href="#h2_remote_orgin">同远程仓库</a>)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin 分支名 #推送分支到远程仓库</span><br></pre></td></tr></table></figure><h3 id="跟踪分支"><a href="#跟踪分支" class="headerlink" title="跟踪分支"></a>跟踪分支</h3><blockquote><p>从一个远程分支检出一个本地分支会自动创建一个叫做 “跟踪分支”（有时候也叫做 “上游分支”）。<br>跟踪分支是与远程分支有直接关系的本地分支,Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#设置跟踪分支(将本地分支与远程库分支时行连接。)</span><br><span class="line">$ git branch --set-upstream origin 分支名 #最新版本已被废弃</span><br><span class="line">#最新版本命令</span><br><span class="line">$ git branch --set-upstream-to=origin/&lt;branch&gt; 分支名 (可简写为 -u)</span><br><span class="line"></span><br><span class="line">#取消跟踪远程分支</span><br><span class="line">$ git branch --unset-upstream 分支名</span><br></pre></td></tr></table></figure><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><blockquote><p>当从远程仓库克隆时，Git自动把本地master分支和远程分支对应起来。并且远程分为默认名是origin。</p></blockquote><p>多人协作的工作模式：<br>1.试图推送分支。<br>2.推送失败则要先抓取远程分支，试图合并。<br>3.合并有冲突，则解决冲突，并在本地提交。<br>4.没有冲突或解决掉了冲突，再推送到远程分支。</p><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><blockquote><p>发布新版本时，通常在版本库打一个标签，来确定打标签时刻的版本。将来无论什么时候，取某个标签的版本就是那个打标签时候的历史版本。所以，标签也相当于版本库的一个快照。<br>Git标签虽然是版本库的快照，但其实就是一个指向commit的指针（与分支类似，但分支可以移动，但标签不能移动）。所以，创建标签也是瞬间完成的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ git tag #查看所有标签</span><br><span class="line">$ git tag -l # 用特定的搜索模式列出符合条件的标签</span><br><span class="line">#指搜索1.4.2系统标签</span><br><span class="line">$ git tag -l &apos;v1.4.2.*&apos;</span><br><span class="line">v1.4.2.1</span><br><span class="line">v1.4.2.2</span><br><span class="line">v1.4.2.3</span><br><span class="line">v1.4.2.4</span><br><span class="line"></span><br><span class="line">$ git tag 标签名 #打标签(轻量标签，指向提交对象的引用)</span><br><span class="line">$ git tag 标签名 commitId #给指定commit打标签</span><br><span class="line"></span><br><span class="line">$ git tag -a 标签名 -m 注释 commitId #创建带有说明的标签(附注标签，仓库中的一个独立对象，一般建议打附注标签)</span><br><span class="line"></span><br><span class="line">$ git tag -n&lt;num&gt; #显示&lt;num&gt;行标签显示注释</span><br><span class="line">$ git tag -n2</span><br><span class="line">v1.4.2.1　注释内容</span><br><span class="line">v1.4.2.2　注释内容</span><br><span class="line">v1.4.2.3</span><br><span class="line">v1.4.2.4</span><br><span class="line"></span><br><span class="line">$ git tag -d 标签名 #删除标签</span><br></pre></td></tr></table></figure><blockquote><p>还可以通过-s用私钥签名一个标签,采用PGP签名必须先安装gpg</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -s 标签名 -m 注释 commitId</span><br></pre></td></tr></table></figure><blockquote><p>推送远程标签</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin 标签名 #推送指定标签到远程仓库</span><br><span class="line">$ git push origin --tags #推送全部尚未推送到远程仓库的标签</span><br></pre></td></tr></table></figure><blockquote><p>删除远程标签</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d 标签名 #先删除本地标签</span><br><span class="line">$ git push origin :refs/tags/标签名 #然后删除远程标签</span><br></pre></td></tr></table></figure><blockquote><p>检出标签</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#在 Git 中你并不能真的检出一个标签，因为它们并不能像分支一样来回移动。</span><br><span class="line">#如果你想要工作目录与仓库中特定的标签版本完全一样，可以使在特定的标签上创建一个新分支：</span><br><span class="line"></span><br><span class="line">语法:git checkout -b [branchname] [tagname]</span><br></pre></td></tr></table></figure><h2 id="日志-git-log"><a href="#日志-git-log" class="headerlink" title="日志 git log"></a>日志 git log</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git log --stat #显示在每个提交(commit)中哪些文件被修改了</span><br><span class="line">$ git log -p #显示每次提交的内容差异</span><br><span class="line">$ git log -n #显示最近几条日志</span><br><span class="line">$ git log --pretty=oneline|format</span><br><span class="line">$ git log --graph #展示分支、合并历史</span><br><span class="line">$ git log --author #仅显示指定作者相关的提交。</span><br><span class="line">$ git log --committer #仅显示指定提交者相关的提交。</span><br><span class="line">$ git log --grep #仅显示含指定关键字的提交</span><br><span class="line">$ git log 文件名 #仅显示指定文件提交历史</span><br></pre></td></tr></table></figure><blockquote><p>提交区间</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 双点语法(..)</span><br><span class="line">$ git log master..dev #比对dev还没提交到master分支的记录</span><br><span class="line">$ git log origin/master..HEAD #输出在你当前分支中而不在远程 origin 中的提交(如果留空了其中的一边， Git 会默认为 HEAD)</span><br><span class="line"></span><br><span class="line">2. 多点语法(^ 或 --not)</span><br><span class="line">$ git log refA refB ^refC #查看所有被 refA 或 refB 包含的但是不被 refC 包含的提交</span><br><span class="line">$ git log refA refB --not refC</span><br><span class="line"></span><br><span class="line">3. 三点语法(...)</span><br><span class="line">语法可以选择出被两个引用中的一个包含但又不被两者同时包含的提交</span><br><span class="line">$ git log master...experiment #看 master 或者 experiment 中包含的但不是两者共有的提交</span><br><span class="line">$ git log --left-right master...experiment(--left-right显示是哪边分支的提交 &quot;&gt;&quot; 或 &quot;&lt;&quot;)</span><br></pre></td></tr></table></figure><h2 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a>git show</h2><p>显示标签、commitId等对象的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git show 标签名 #查看标签信息</span><br><span class="line">git show (--stat) commitId #查看指定提交的详细信息(--stat只查看变动文件)</span><br></pre></td></tr></table></figure><h2 id="比较-git-diff"><a href="#比较-git-diff" class="headerlink" title="比较 git diff"></a>比较 git diff</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;filename&gt;#比较工作区与暂存区的差异  </span><br><span class="line">git diff --cached (&lt;commitId&gt;) &lt;filename&gt; #比较暂存区与上次(/指定commitId)提交的差异</span><br><span class="line">git diff HEAD/commitId &lt;filename&gt; #比较工作区与(上次/指定commitId)提交的差异</span><br><span class="line">git diff commitId commitId #比较Git仓库任意两次 commit 之间的差别</span><br><span class="line">git diff --stat #比较统计(如几处删除,几处增加等等)</span><br><span class="line">git diff 本地分支 origin/远程分支 #与远程库比对(比对前需先执行git fetch)</span><br></pre></td></tr></table></figure><h2 id="GIT工具"><a href="#GIT工具" class="headerlink" title="GIT工具"></a>GIT工具</h2><h3 id="交互式暂存"><a href="#交互式暂存" class="headerlink" title="交互式暂存"></a>交互式暂存</h3><p>修改一组文件后，希望这些改动能放到若干提交而不是混杂在一起成为一个提交.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add -i #进入交互终端</span><br><span class="line">$ git add -p(--patch) #Git暂存文件的特定部分(文件中做了两处修改，但只想要暂存其中的一个)</span><br></pre></td></tr></table></figure></p><h3 id="清理-git-clean"><a href="#清理-git-clean" class="headerlink" title="清理 git clean"></a>清理 git clean</h3><p>需要谨慎地使用这个命令，因为它被设计为从工作目录中移除没有忽略的未跟踪文件(任何与 .gitiignore 或其他忽略文件中的模式匹配的文件都不会被移除),可能无法再找回.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clean </span><br><span class="line">-f 表示强制清理</span><br><span class="line">-d 后面接要清理的目录</span><br><span class="line">-n 演习删除,显示将要删除的内容</span><br><span class="line">-x 完全干净删除</span><br></pre></td></tr></table></figure><h3 id="搜索-git-grep"><a href="#搜索-git-grep" class="headerlink" title="搜索 git grep"></a>搜索 git grep</h3><p>从提交历史或者工作目录中查找一个字符串或者正则表达式.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git grep</span><br><span class="line">-n 输出内容所在文件的行号</span><br><span class="line"> --count 输出内容所在文件的数量</span><br></pre></td></tr></table></figure><h3 id="日志搜索"><a href="#日志搜索" class="headerlink" title="日志搜索"></a>日志搜索</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">-S 字符串 #显示新增和删除该字符串的提交</span><br><span class="line">-G 相对于-S更精准,使用正则表达式搜索</span><br><span class="line">-L 展示代码中一行或者一个函数的历史</span><br><span class="line"></span><br><span class="line">#找到 ZLIB_BUF_MAX 常量是什么时候引入的</span><br><span class="line">$ git log -SZLIB_BUF_MAX --oneline</span><br><span class="line">e01503b zlib: allow feeding more than 4GB in one go</span><br><span class="line">ef49a7a zlib: zlib can only process 4GB at a time</span><br><span class="line"></span><br><span class="line">#查看 zlib.c 文件中`git_deflate_bound` 函数的每一次变更</span><br><span class="line">$ git log -L :git_deflate_bound:zlib.c</span><br></pre></td></tr></table></figure><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>一般情况,可以使用.gitignore文件添加忽略文件.如果当前文件是已经commit ,push到远程仓库后了，.gitignore里面再配置是不起作用了.此时解决办法有两种:   </p><p>一种方法是移除文件跟踪,然后将文件添加到.gitignore文件中去(此种方法对其他人影响较大).<br>另一种方法是仅在自己本地忽略:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git update-index --assume-unchanged 文件名 #忽略文件</span><br><span class="line">$ git update-index --no-assume-unchanged 文件名 #取消忽略文件</span><br><span class="line">$ git ls-files -v | grep h\&lt;space&gt; #显示本地忽略文件列表(&lt;space&gt; 是表示空格)</span><br><span class="line"></span><br><span class="line">更多信息使用 --help 自行查阅</span><br></pre></td></tr></table></figure><blockquote><p>–assume-unchanged与–skip-worktree 的区别<br>前者 忽略更改文件,当索引中文件条目变化时则失效（即，此文件变化自上游）<br>后者 忽略更改文件,索引中文件条目变化仍起作用(直至此索引被放弃)</p></blockquote><h3 id="命令自动补全"><a href="#命令自动补全" class="headerlink" title="命令自动补全"></a>命令自动补全</h3><ul><li>第一步 下载git官方提供的自动补全git-completion.bash脚本到自己的家目录并重命名为.git-completion.bash</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash</span><br></pre></td></tr></table></figure><ul><li>第二步 将下载的脚本添加到~/.bash_profile文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ -f ~/.git-completion.bash ]; then </span><br><span class="line">. ~/.git-completion.bash </span><br><span class="line">fi </span><br><span class="line"># . 符号可以换成source</span><br></pre></td></tr></table></figure><ul><li>第三步 编译~/.bash_profile使其立即生效</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;第一次安装设置&quot;&gt;&lt;a href=&quot;#第一次安装设置&quot; class=&quot;headerlink&quot; title=&quot;第一次安装设置&quot;&gt;&lt;/a&gt;第一次安装设置&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#因为git是分布式,这些就是你在提交commit时的签名。(--global全局设置,不加则设置当前版本库)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config [--global] user.name &amp;quot;Your Name&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config [--global] user.email &amp;quot;email@example.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="GIT" scheme="http://fcwalkers.com/tags/GIT/"/>
    
      <category term="GIT学习笔记" scheme="http://fcwalkers.com/tags/GIT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>vim编辑器</title>
    <link href="http://fcwalkers.com/2018/03/27/Linux/vim%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://fcwalkers.com/2018/03/27/Linux/vim编辑器/</id>
    <published>2018-03-26T16:00:00.000Z</published>
    <updated>2018-06-11T08:29:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="vi编辑器的模式"><a href="#vi编辑器的模式" class="headerlink" title="vi编辑器的模式"></a>vi编辑器的模式</h2><h3 id="一般指令模式"><a href="#一般指令模式" class="headerlink" title="一般指令模式"></a>一般指令模式</h3><p>用vi 打开一个文件就直接进入一般指令模式,在一般指令模式中可以进行删除、复制、贴上等等的动作.</p><ul><li>移动光标方法</li></ul><hr><table><thead><tr><th style="text-align:center">按键</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">h（←）</td><td>向左移动一个字符</td></tr><tr><td style="text-align:center">j（↓）</td><td>向下移动一个字符</td></tr><tr><td style="text-align:center">k（↑）</td><td>向上移动一个字符</td></tr><tr><td style="text-align:center">l（→）</td><td>向右移动一个字符</td></tr><tr><td style="text-align:center">Ctrl+f</td><td>屏幕向下移动一页[PageDown]</td></tr><tr><td style="text-align:center">Ctrl+b</td><td>屏幕向上移动一页[PageUp]</td></tr><tr><td style="text-align:center">Ctrl+d</td><td>屏幕向下移动半页</td></tr><tr><td style="text-align:center">Ctrl+u</td><td>屏幕向上移动半页</td></tr><tr><td style="text-align:center">+</td><td>光标移动到非空白字符的下一行</td></tr><tr><td style="text-align:center">-</td><td>光标移动到非空白字符的上一行</td></tr><tr><td style="text-align:center">n<space></space></td><td>按下数字再按空格键向后移动n个字符</td></tr><tr><td style="text-align:center">0</td><td>移动到当前行最前字符处</td></tr><tr><td style="text-align:center">$</td><td>移动到当前行最后字符处</td></tr><tr><td style="text-align:center">H</td><td>移动到屏幕最上行</td></tr><tr><td style="text-align:center">M</td><td>移动到屏幕中央一行</td></tr><tr><td style="text-align:center">L</td><td>移动到屏幕最下行</td></tr><tr><td style="text-align:center">G</td><td>移动到文件最后一行</td></tr><tr><td style="text-align:center">nG</td><td>移动到第n行</td></tr><tr><td style="text-align:center">gg</td><td>移动到文件第一行(相当于1G)</td></tr><tr><td style="text-align:center">n[Enter]</td><td>向下移动n行</td></tr></tbody></table><a id="more"></a><ul><li>搜寻与取代</li></ul><hr><table><thead><tr><th style="text-align:center">按键</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">/word</td><td>向下搜索字符串</td></tr><tr><td style="text-align:center">?word</td><td>向上搜索字符串</td></tr><tr><td style="text-align:center">n</td><td>重复上面搜索动作</td></tr><tr><td style="text-align:center">N</td><td>反向重复上面搜索动作</td></tr><tr><td style="text-align:center">:n1,n2s/word1/word2/g</td><td>在n1到n2行之间寻找word1字符串,  并将该字符串取代为word2(n2可以换成$  表示到最后一行)</td></tr><tr><td style="text-align:center">:n1,n2s/word1/word2/gc</td><td>与上面区别在于替换前加入提示(c–&gt;confirm)</td></tr></tbody></table><ul><li>删除/复制/粘贴</li></ul><hr><table><thead><tr><th style="text-align:center">按键</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">x,X</td><td>x向后删除一个字符;X向前删除一个字符</td></tr><tr><td style="text-align:center">nx/X</td><td>连续 向后 / 向前 删除n个字符</td></tr><tr><td style="text-align:center">dd</td><td>删除当前行</td></tr><tr><td style="text-align:center">ndd</td><td>向下删除n行</td></tr><tr><td style="text-align:center">d1G</td><td>删除光标所在行到第一行的所有数据</td></tr><tr><td style="text-align:center">dG</td><td>删除光标所在行到最后一行的所有数据</td></tr><tr><td style="text-align:center">d$</td><td>删除该行光标所在行到最后一个字符</td></tr><tr><td style="text-align:center">d0</td><td>删除该行光标所在行到第一个字符</td></tr><tr><td style="text-align:center">yy</td><td>复制光标所在行</td></tr><tr><td style="text-align:center">nyy</td><td>向下复制n行</td></tr><tr><td style="text-align:center">y1G</td><td>复制光标所在行到第一行的所有数据</td></tr><tr><td style="text-align:center">yG</td><td>复制光标所在行到最后一行的所有数据</td></tr><tr><td style="text-align:center">y0</td><td>复制该行光标所在行到最后一个字符</td></tr><tr><td style="text-align:center">y$</td><td>复制该行光标所在行到第一个字符</td></tr><tr><td style="text-align:center">p,P</td><td>p已复制数据在光标下一行粘贴;P已复制数据在光标上一行粘贴</td></tr><tr><td style="text-align:center">J</td><td>光标所在行与下一行合并成一行</td></tr><tr><td style="text-align:center">c</td><td>重复删除多个数据</td></tr><tr><td style="text-align:center">u</td><td>复原前一个动作</td></tr><tr><td style="text-align:center">Ctrl+r</td><td>还原u命令之前动作</td></tr><tr><td style="text-align:center">.</td><td>重复上一个动作</td></tr></tbody></table><h3 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h3><p>一般指令模式下,按<code>i</code>、<code>I</code>、<code>o</code>、<code>O</code>、<code>a</code>、<code>A</code>、<code>r</code>、<code>R</code>等任意一个字母后进入编辑模式. <strong>按<code>Esc</code>返回一般模式.</strong></p><table><thead><tr><th style="text-align:center">按键</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">i,I</td><td>进入插入模式（Insert mode）： i 为“从目前光标所在处插入”， I 为“在目前所在行的第一个非空白字符处开始插入”。</td></tr><tr><td style="text-align:center">a,A</td><td>进入插入模式（Insert mode）：a 为“从目前光标所在的下一个字符处开始插入”， A 为“从光标所在行的最后一个字符处开始插入”。</td></tr><tr><td style="text-align:center">o,O</td><td>进入插入模式（Insert mode）：这是英文字母 o 的大小写。o 为“在目前光标所在的下一行处插入新的一行”； O 为在目前光标所在处的上一行插入新的一行！</td></tr><tr><td style="text-align:center">r,R</td><td>进入取代模式（Replace mode）：r只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，  直到按下 ESC 为止；</td></tr></tbody></table><h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>一般模式下输入<code>/</code>、<code>?</code>、<code>:</code>任意一个符号即可进入到引模式. <strong>按<code>Esc</code>返回一般模式.</strong></p><table><thead><tr><th style="text-align:center">按键</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">:w</td><td>将编辑数据写入文件</td></tr><tr><td style="text-align:center">:w!</td><td>将编辑文件强制写入文件(具体与权限有关)</td></tr><tr><td style="text-align:center">:q</td><td>离开vim</td></tr><tr><td style="text-align:center">:q!</td><td>不存储编辑数据,强制离开vim</td></tr><tr><td style="text-align:center">:wq</td><td>保存编辑数据并离开vim</td></tr><tr><td style="text-align:center">ZZ</td><td>大写Z,若文件没有修改则不存储离开;若文件有修改,则存储后离开</td></tr><tr><td style="text-align:center">:w [filename]</td><td>将编辑数据存储为另一个新文件</td></tr><tr><td style="text-align:center">:r [filename]</td><td>在编辑数据中读入另一个文件的数据.亦将filename文件内容加到光标所在行的后面.</td></tr><tr><td style="text-align:center">:n1,n2 w [filename]</td><td>将n1到n2行的数据存储为另一个新文件</td></tr><tr><td style="text-align:center">:! command</td><td>暂时离开vim到命令行执行commd命令</td></tr><tr><td style="text-align:center">:set</td><td>vim环境变更指令.如: :set nu显示行号; :set nonu取消行号</td></tr></tbody></table><blockquote><p>一般指令模式可与编辑模式及命令行界面切换， 但编辑模式与命令行界面之间不可相互切换.</p></blockquote><h2 id="vim-暂存盘"><a href="#vim-暂存盘" class="headerlink" title="vim 暂存盘"></a>vim 暂存盘</h2><p>在使用vim编辑器时,vim会在与被编辑文件目录创建一个名为<strong>filename.swap</strong>的暂存文件,你对编辑的文件所有动作都会记录到这个文件内.如果vim的文件被不正常中断,导致暂存盘无法借由正常流程结束,所以暂存盘就不会消失.再次打开此文件时,vim会主动判断这个文件可能有的问题:</p><ul><li><p>可能其它人或程序在同时编辑这个文件<br>  由于 Linux 是多用户多任务的环境，因此很可能有很多人同时在编辑同一个文件。如果在多人共同编辑的情况下， 万一大家同时储存，那么这个文件的内容将会变的乱七八糟！为了避免这个问题，因此 vim 会出现这个警告窗口！</p></li><li><p>在上次vim编辑过程中可能由于未知原因导致vim中断</p></li></ul><p>在发现暂存盘后,会出现警告信息页面,有六个按钮可供操作,说明如下:</p><ul><li>（O）pen Read-Only 打开此文件成为只读文件，可以用在你只是想要查阅该文件内容并不想要进行编辑行为时。  </li><li>（E）dit anyway：还是用正常的方式打开你要编辑的那个文件， 并不会载入暂存盘的内容。不过很容易出现两个使用者互相改变对方的文件等问题！  </li><li>（R）ecover：就是载入暂存盘的内容，用在你要救回之前未储存的工作。 不过当你救回来并且储存离开 vim 后，还是要手动自行删除那个暂存盘喔！</li><li>（D）elete it：你确定那个暂存盘是无用的！那么打开文件前会先将这个暂存盘删除！ 这个动作其实是比较常做的！因为你可能不确定这个暂存盘是怎么来的，所以就删除掉他吧！</li><li>（Q）uit：按下 q 就离开 vim ，不会进行任何动作回到命令提示字符。</li><li>（A）bort：忽略这个编辑行为，与 quit 非常类似！ 也会送你回到命令提示字符！</li></ul><h2 id="区块选择"><a href="#区块选择" class="headerlink" title="区块选择"></a>区块选择</h2><p>按键意义:</p><table><thead><tr><th style="text-align:center">按键</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">v</td><td>字符选择，会将光标经过的地方反白选择</td></tr><tr><td style="text-align:center">V</td><td>行选择，会将光标经过的行反白选择</td></tr><tr><td style="text-align:center">Ctrl+v</td><td>矩形选择，可以用矩形的方式选择数据</td></tr><tr><td style="text-align:center">y</td><td>将选中地方复制起来</td></tr><tr><td style="text-align:center">p</td><td>将刚刚复制的区块，在光标所在处贴上</td></tr><tr><td style="text-align:center">d</td><td>将选中地方删除</td></tr></tbody></table><h2 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h2><p>vim后面接多个文件名打开多个文件,此时多个文件内可以各种模式内的命令.</p><p><code>如从一个文件内yy(复制)到另一个文件内pp(粘贴)</code></p><table><thead><tr><th style="text-align:center">按键</th><th>说明 </th></tr></thead><tbody><tr><td style="text-align:center">:n</td><td>编辑上一个文件</td></tr><tr><td style="text-align:center">:N</td><td>编辑下一个文件</td></tr><tr><td style="text-align:center">:files</td><td>列出目前vim打开的所有文件列表</td></tr></tbody></table><h2 id="多窗口"><a href="#多窗口" class="headerlink" title="多窗口"></a>多窗口</h2><p><code>:sp {filename}</code></p><table><thead><tr><th style="text-align:center">按键</th><th>说明 </th></tr></thead><tbody><tr><td style="text-align:center">:sp [filename]</td><td>打开一个新窗口，如果有加 filename， 表示在新窗口打开一个新文件，否则表示两个窗口为同一个文件内容（同步显示）</td></tr><tr><td style="text-align:center">Ctrl+w+j(↓)</td><td>按键的按法是：先按下 [ctrl] 不放， 再按下 w 后放开所有的按键，然后再按下 j （或向下方向键），则光标可移动到下方的窗口。其它方向按键参考上面<strong>移动光标方法</strong>按键.</td></tr><tr><td style="text-align:center">Ctrl+w+q</td><td>相当于:q离开</td></tr></tbody></table><h2 id="DOS与Linxu断行字符"><a href="#DOS与Linxu断行字符" class="headerlink" title="DOS与Linxu断行字符"></a>DOS与Linxu断行字符</h2><p>在 Linux 下面的指令在开始执行时，他的判断依据是 “Enter”，而 Linux 的 Enter 为 LF 符号， 不过，由于 DOS 的断行符号是 CRLF ，也就是多了一个 ^M 的符号出来， 在这样的情况下，如果是一个 shell script 的程序文件，将可能造成“程序无法执行”的状态～ 因为他会误判程序所下达的指令内容.</p><p>解决方法是通过指令将文件转换成Linux字符即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ dos2unix [-kn] file [newfile]</span><br><span class="line">$ unix2dos [-kn] file [newfile]</span><br><span class="line">选项与参数：</span><br><span class="line">-k  ：保留该文件原本的 mtime 时间格式 （不更新文件上次内容经过修订的时间）</span><br><span class="line">-n  ：保留原本的旧文件，将转换后的内容输出到新文件，如： dos2unix -n old new</span><br><span class="line"></span><br><span class="line">#例一:将文件转换成dos断行符</span><br><span class="line">$ ll man_db.conf</span><br><span class="line">-rw-r--r--. 1 root root 5171 Jun 10  2014 man_db.conf</span><br><span class="line"></span><br><span class="line">$ unix2dos -k man_db.conf</span><br><span class="line">unix2dos: converting file man_db.conf to DOS format ...</span><br><span class="line"># 屏幕会显示上述的讯息，说明断行转为 DOS 格式了！</span><br><span class="line"></span><br><span class="line">$ ll man_db.conf</span><br><span class="line">-rw-r--r--. 1 dmtsai dmtsai 5302 Jun 10  2014 man_db.conf</span><br><span class="line"># 断行字符多了 ^M ，所以容量增加了！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#例二:将文件转换成Linux断行符,并保留新文件</span><br><span class="line">$ dos2unix -k -n man_db.conf man_db.conf.linux</span><br><span class="line">dos2unix: converting file man_db.conf to file man_db.conf.linux in Unix format ...</span><br><span class="line"></span><br><span class="line">$ ll man_db.conf*</span><br><span class="line">-rw-r--r--. 1 dmtsai dmtsai 5302 Jun 10  2014 man_db.conf</span><br><span class="line">-rw-r--r--. 1 dmtsai dmtsai 5171 Jun 10  2014 man_db.conf.linux</span><br><span class="line"></span><br><span class="line">$ file man_db.conf*</span><br><span class="line">man_db.conf:       ASCII text, with CRLF line terminators  </span><br><span class="line"># 很清楚说明是 CRLF 断行！</span><br></pre></td></tr></table></figure><h2 id="语系编码转换"><a href="#语系编码转换" class="headerlink" title="语系编码转换"></a>语系编码转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ iconv --list</span><br><span class="line">$ iconv -f 原本编码 -t 新编码 filename [-o newfile]</span><br><span class="line">选项与参数：</span><br><span class="line">--list ：列出 iconv 支持的语系数据</span><br><span class="line">-f     ：from ，亦即来源之意，后接原本的编码格式；</span><br><span class="line">-t     ：to ，亦即后来的新编码要是什么格式；</span><br><span class="line">-o file：如果要保留原本的文件，那么使用 -o 新文件名，可以创建新编码文件。</span><br><span class="line"></span><br><span class="line">#可以用file查看文件编码</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;vi编辑器的模式&quot;&gt;&lt;a href=&quot;#vi编辑器的模式&quot; class=&quot;headerlink&quot; title=&quot;vi编辑器的模式&quot;&gt;&lt;/a&gt;vi编辑器的模式&lt;/h2&gt;&lt;h3 id=&quot;一般指令模式&quot;&gt;&lt;a href=&quot;#一般指令模式&quot; class=&quot;headerlink&quot; title=&quot;一般指令模式&quot;&gt;&lt;/a&gt;一般指令模式&lt;/h3&gt;&lt;p&gt;用vi 打开一个文件就直接进入一般指令模式,在一般指令模式中可以进行删除、复制、贴上等等的动作.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;移动光标方法&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;按键&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;h（←）&lt;/td&gt;
&lt;td&gt;向左移动一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;j（↓）&lt;/td&gt;
&lt;td&gt;向下移动一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;k（↑）&lt;/td&gt;
&lt;td&gt;向上移动一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;l（→）&lt;/td&gt;
&lt;td&gt;向右移动一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ctrl+f&lt;/td&gt;
&lt;td&gt;屏幕向下移动一页[PageDown]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ctrl+b&lt;/td&gt;
&lt;td&gt;屏幕向上移动一页[PageUp]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ctrl+d&lt;/td&gt;
&lt;td&gt;屏幕向下移动半页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ctrl+u&lt;/td&gt;
&lt;td&gt;屏幕向上移动半页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td&gt;光标移动到非空白字符的下一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td&gt;光标移动到非空白字符的上一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;n&lt;space&gt;&lt;/space&gt;&lt;/td&gt;
&lt;td&gt;按下数字再按空格键向后移动n个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td&gt;移动到当前行最前字符处&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;$&lt;/td&gt;
&lt;td&gt;移动到当前行最后字符处&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;H&lt;/td&gt;
&lt;td&gt;移动到屏幕最上行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;M&lt;/td&gt;
&lt;td&gt;移动到屏幕中央一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;L&lt;/td&gt;
&lt;td&gt;移动到屏幕最下行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;G&lt;/td&gt;
&lt;td&gt;移动到文件最后一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;nG&lt;/td&gt;
&lt;td&gt;移动到第n行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;gg&lt;/td&gt;
&lt;td&gt;移动到文件第一行(相当于1G)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;n[Enter]&lt;/td&gt;
&lt;td&gt;向下移动n行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Linux" scheme="http://fcwalkers.com/tags/Linux/"/>
    
      <category term="Linux学习笔记" scheme="http://fcwalkers.com/tags/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux正则与文件格式化</title>
    <link href="http://fcwalkers.com/2018/03/21/Linux/Linux%E6%AD%A3%E5%88%99%E4%B8%8E%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>http://fcwalkers.com/2018/03/21/Linux/Linux正则与文件格式化/</id>
    <published>2018-03-20T16:00:00.000Z</published>
    <updated>2018-05-02T10:14:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="基础正则表达式"><a href="#基础正则表达式" class="headerlink" title="基础正则表达式"></a>基础正则表达式</h2><p>基础正则字符包括:<code>^</code> <code>$</code> <code>.</code> <code>\</code> <code>*</code> <code>[]</code> <code>[n1-n2]</code> <code>[^]</code> <code>\{n,m\}</code>  </p><h3 id="语系对正则表达式的影响"><a href="#语系对正则表达式的影响" class="headerlink" title="语系对正则表达式的影响"></a>语系对正则表达式的影响</h3><p>由于不同语系的编码数据并不相同，所以就会造成数据撷取结果的差异。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C和zh_TW.big5语系下,英文大小写的编码顺序:</span><br><span class="line">LANG=C     时：0 1 2 3 4 ... A B C D ... Z a b c d ...z</span><br><span class="line">LANG=zh_TW 时：0 1 2 3 4 ... a A b B c C d D ... z Z</span><br><span class="line"></span><br><span class="line"># C语系</span><br><span class="line">$ ll -d /etc/[^a-z]* # 正确显示</span><br><span class="line"></span><br><span class="line"># zh_TW.big5语系(测试zh_CN.UTF-8语系可以正确显示)</span><br><span class="line">$ ll -d /etc/[^a-z]* # 显示混乱</span><br></pre></td></tr></table></figure><blockquote><p>上面由于C语系字母是连续的所以正则表达式可以进行匹配,而zh_CN.UTF-8语系字母是非连续排列所以找不到该文件.<strong>由于一般正则表达式，使用的是相容于 POSIX 的标准，因此就使用“ C ”这个语系,所以通常使用正则将系统语系设置成C后使用.</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 搜寻特定字符串(-v表示反向)</span><br><span class="line">$ grep -n (-v) &apos;the&apos; regular_express.txt </span><br><span class="line"># 利用中括号[]搜寻集合字符</span><br><span class="line">$ grep -n &apos;t[ae]st&apos; regular_express.txt</span><br><span class="line">$ grep -n &apos;[^a-z]oo&apos; regular_express.txt</span><br><span class="line">$ grep -n &apos;[0-9]&apos; regular_express.txt</span><br><span class="line"></span><br><span class="line">#如上考虑到语系的影响可以使用特殊符号代替连续编码(&quot; - &quot;)</span><br><span class="line">$ grep -n &apos;[^[:lower:]]oo&apos; regular_express.txt</span><br><span class="line">$ grep -n &apos;[[:digit:]]&apos; regular_express.txt</span><br></pre></td></tr></table></figure><blockquote><p>为了要避免这样编码所造成的英文与数字的撷取问题,所以可以使用特殊符号代替</p></blockquote><table><thead><tr><th style="text-align:center">特殊符号</th><th style="text-align:center">代表意义</th></tr></thead><tbody><tr><td style="text-align:center">[:alnum:]</td><td style="text-align:center">代表英文大小写字符及数字，亦即 0-9, A-Z, a-z</td></tr><tr><td style="text-align:center">[:alpha:]</td><td style="text-align:center">代表任何英文大小写字符，亦即 A-Z, a-z</td></tr><tr><td style="text-align:center">[:blank:]</td><td style="text-align:center">代表空白键与 [Tab] 按键两者</td></tr><tr><td style="text-align:center">[:cntrl:]</td><td style="text-align:center">代表键盘上面的控制按键，亦即包括 CR, LF, Tab, Del.. 等等</td></tr><tr><td style="text-align:center">[:digit:]</td><td style="text-align:center">代表数字而已，亦即 0-9</td></tr><tr><td style="text-align:center">[:graph:]</td><td style="text-align:center">除了空白字符 （空白键与 [Tab] 按键） 外的其他所有按键</td></tr><tr><td style="text-align:center">[:lower:]</td><td style="text-align:center">代表小写字符，亦即 a-z</td></tr><tr><td style="text-align:center">[:print:]</td><td style="text-align:center">代表任何可以被打印出来的字符</td></tr><tr><td style="text-align:center">[:punct:]</td><td style="text-align:center">代表标点符号 （punctuation symbol），亦即：” ‘ ? ! ; : # $…</td></tr><tr><td style="text-align:center">[:upper:]</td><td style="text-align:center">代表大写字符，亦即 A-Z</td></tr><tr><td style="text-align:center">[:space:]</td><td style="text-align:center">任何会产生空白的字符，包括空白键, [Tab], CR 等等</td></tr><tr><td style="text-align:center">[:xdigit:]</td><td style="text-align:center">代表 16 进位的数字类型，因此包括： 0-9, A-F, a-f 的数字与字符</td></tr></tbody></table><h2 id="sed-工具"><a href="#sed-工具" class="headerlink" title="sed 工具"></a>sed 工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ sed [-nefr] [动作]</span><br><span class="line">选项与参数：</span><br><span class="line">-n  ：使用安静（silent）模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到屏幕上。</span><br><span class="line">      但如果加上 -n 参数后，则只有经过 sed 特殊处理的那一行（或者动作）才会被列出来。</span><br><span class="line">-e  ：直接在命令行界面上进行 sed 的动作编辑；</span><br><span class="line">-f  ：直接将 sed 的动作写在一个文件内， -f filename 则可以执行 filename 内的 sed 动作；</span><br><span class="line">-r  ：sed 的动作支持的是延伸型正则表达式的语法。（默认是基础正则表达式语法）</span><br><span class="line">-i  ：直接修改读取的文件内容，而不是由屏幕输出。</span><br><span class="line"></span><br><span class="line">动作说明：  [n1[,n2]]function</span><br><span class="line">n1, n2 ：不见得会存在，一般代表“选择进行动作的行数”，举例来说，如果我的动作是需要在 10 到 20 行之间进行的，则“ 10,20[动作行为] ”</span><br><span class="line"></span><br><span class="line">function 有下面这些：</span><br><span class="line">a   ：新增， a 的后面可以接字串，而这些字串会在新的一行出现（目前的下一行）～</span><br><span class="line">c   ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</span><br><span class="line">d   ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；</span><br><span class="line">i   ：插入， i 的后面可以接字串，而这些字串会在新的一行出现（目前的上一行）；</span><br><span class="line">p   ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</span><br><span class="line">s   ：取代，可以直接进行取代的工作！通常这个 s 的动作可以搭配正则表达式！</span><br></pre></td></tr></table></figure><ul><li><p>以行为单位的功能</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 将/etc/passwd 的内容列出并且打印行号，同时，请将第 2~5 行删除！</span><br><span class="line">$ nl /etc/passwd | sed &apos;2,5d&apos;</span><br><span class="line">  1 root:x:0:0:root:/root:/bin/bash</span><br><span class="line">  6 sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">  7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">.....（后面省略）.....</span><br><span class="line"></span><br><span class="line"># 承上，在第二行后（亦即是加在第三行）加上“drink tea?”字样！</span><br><span class="line">$ nl /etc/passwd | sed &apos;2a drink tea&apos;</span><br><span class="line">    1  root:x:0:0:root:/root:/bin/bash</span><br><span class="line">    2  bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">drink tea</span><br><span class="line">    3  daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">.....（后面省略）.....</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>部分数据的搜索与取代功能<br>  <code>sed &#39;s/要被取代的字串(或正则)/新的字串/g</code><br>  如果想用以行为单位取代<br>  <code>sed &#39;n1,n2s/要被取代的字串(或正则)/新的字串/g</code></p></li><li><p>直接修改文件内容（危险动作）<br>  -i 选项可以让 sed 直接去修改后面接的文件内容而不是由屏幕输出！</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#用 sed 将 regular_express.txt 内每一行结尾若为 . 则换成 !</span><br><span class="line">$ sed -i &apos;s/\.$/\!/g&apos; regular_express.txt</span><br><span class="line"></span><br><span class="line">#利用 sed 直接在 regular_express.txt 最后一行加入“# This is a test”</span><br><span class="line">$ sed -i &apos;$a # This is a test&apos; regular_express.txt</span><br><span class="line"># 由于 $ 代表的是最后一行，而 a 的动作是新增，因此该文件最后新增！</span><br></pre></td></tr></table></figure></li></ul><h2 id="延伸正则表达式"><a href="#延伸正则表达式" class="headerlink" title="延伸正则表达式"></a>延伸正则表达式</h2><p>grep 默认仅支持基础正则表达式，如果要使用延伸型正则表达式，你可以使用 grep -E ， 不过更建议直接使用 egrep</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#去除空白行与首先为#的行列(需要使用管线命令来搜寻两次)</span><br><span class="line">grep -v &apos;^$&apos; | grep -v &apos;^#&apos; regular_express.txt</span><br><span class="line"></span><br><span class="line">#使用延伸正则表达式(延伸型正则表达式可以通过群组功能“ | ”来进行一次搜寻！)</span><br><span class="line">egrep -v &apos;^$|^#&apos; regular_express.txt</span><br></pre></td></tr></table></figure><p>延伸正则字符包括:<code>+</code> <code>?</code> <code>|</code> <code>()</code> <code>()+</code></p><h2 id="文件格式化处理"><a href="#文件格式化处理" class="headerlink" title="文件格式化处理"></a>文件格式化处理</h2><h3 id="格式化打印"><a href="#格式化打印" class="headerlink" title="格式化打印"></a>格式化打印</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">printf &apos;打印格式&apos; 实际内容</span><br><span class="line">选项与参数：</span><br><span class="line">关于格式方面的几个特殊样式：</span><br><span class="line">       \a    警告声音输出</span><br><span class="line">       \b    倒退键（backspace）</span><br><span class="line">       \f    清除屏幕 （form feed）</span><br><span class="line">       \n    输出新的一行</span><br><span class="line">       \r    亦即 Enter 按键</span><br><span class="line">       \t    水平的 [tab] 按键</span><br><span class="line">       \v    垂直的 [tab] 按键</span><br><span class="line">       \xNN  NN 为两位数的数字，可以转换数字成为字符。</span><br><span class="line">关于 C 程序语言内，常见的变量格式</span><br><span class="line">       %ns   那个 n 是数字， s 代表 string ，亦即多少个字符；</span><br><span class="line">       %ni   那个 n 是数字， i 代表 integer ，亦即多少整数码数；</span><br><span class="line">       %N.nf 那个 n 与 N 都是数字， f 代表 floating （浮点），如果有小数码数，</span><br><span class="line"> 假设我共要十个位数，但小数点有两位，即为 %10.2f ！</span><br></pre></td></tr></table></figure><h3 id="awk工具"><a href="#awk工具" class="headerlink" title="awk工具"></a>awk工具</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;基础正则表达式&quot;&gt;&lt;a href=&quot;#基础正则表达式&quot; class=&quot;headerlink&quot; title=&quot;基础正则表达式&quot;&gt;&lt;/a&gt;基础正则表达式&lt;/h2&gt;&lt;p&gt;基础正则字符包括:&lt;code&gt;^&lt;/code&gt; &lt;code&gt;$&lt;/code&gt; &lt;code&gt;.&lt;/code&gt; &lt;code&gt;\&lt;/code&gt; &lt;code&gt;*&lt;/code&gt; &lt;code&gt;[]&lt;/code&gt; &lt;code&gt;[n1-n2]&lt;/code&gt; &lt;code&gt;[^]&lt;/code&gt; &lt;code&gt;\{n,m\}&lt;/code&gt;  &lt;/p&gt;
&lt;h3 id=&quot;语系对正则表达式的影响&quot;&gt;&lt;a href=&quot;#语系对正则表达式的影响&quot; class=&quot;headerlink&quot; title=&quot;语系对正则表达式的影响&quot;&gt;&lt;/a&gt;语系对正则表达式的影响&lt;/h3&gt;&lt;p&gt;由于不同语系的编码数据并不相同，所以就会造成数据撷取结果的差异。&lt;/p&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Linux" scheme="http://fcwalkers.com/tags/Linux/"/>
    
      <category term="Linux学习笔记" scheme="http://fcwalkers.com/tags/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux的Bash</title>
    <link href="http://fcwalkers.com/2018/03/06/Linux/Linux%E7%9A%84Bash/"/>
    <id>http://fcwalkers.com/2018/03/06/Linux/Linux的Bash/</id>
    <published>2018-03-05T16:00:00.000Z</published>
    <updated>2018-05-02T10:18:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><p>/etc/shells记录系统所有shell</p><h2 id="Bash-shell-功能"><a href="#Bash-shell-功能" class="headerlink" title="Bash shell 功能"></a>Bash shell 功能</h2><h3 id="命令编修能力"><a href="#命令编修能力" class="headerlink" title="命令编修能力"></a>命令编修能力</h3><blockquote><p>默认指令记忆功能可以达到1000个<br>记录位置~/.bash_history(当前指令用户指令在内存中,登出后才记录到文件此内)</p></blockquote><ul><li>命令与文件实例功能(tab补全)</li><li>命令别名设置功能</li><li>工作控制/前景背景控制</li><li>程序化脚本shell script</li><li>万用字符(*)</li></ul><a id="more"></a><h3 id="type指令"><a href="#type指令" class="headerlink" title="type指令"></a>type指令</h3><p>type 这个指令我们可以知道每个指令是否为 bash 的内置指令。 此外，type只能查找可执行文件.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ type [-tpa] name</span><br><span class="line">选项与参数：</span><br><span class="line">    ：不加任何选项与参数时，type 会显示出 name 是外部指令还是 bash 内置指令</span><br><span class="line">-t  ：当加入 -t 参数时，type 会将 name 以下面这些字眼显示出他的意义：</span><br><span class="line">      file    ：表示为外部指令；</span><br><span class="line">      alias   ：表示该指令为命令别名所设置的名称；</span><br><span class="line">      builtin ：表示该指令为 bash 内置的指令功能；</span><br><span class="line">-p  ：如果后面接的 name 为外部指令时，才会显示完整文件名；</span><br><span class="line">-a  ：会由 PATH 变量定义的路径中，将所有含 name 的指令都列出来，包含 alias</span><br></pre></td></tr></table></figure><h3 id="快速编辑"><a href="#快速编辑" class="headerlink" title="快速编辑"></a>快速编辑</h3><ul><li><p>反斜杠( \ )<br>命令输入太长需要换行,利用反斜杠( \ )[Enter]开启下一行,而不执行命令.<br><strong>注意: [Enter] 按键是紧接着反斜线 （ \ ）</strong></p></li><li><p>快捷键</p></li></ul><table><br>    <tr><br>        <th>组合键</th><br>        <th>功能与示范</th><br>    </tr><br>    <tr><br>        <td>[ctrl]+u/[ctrl]+k</td><br>        <td>分别是从光标处向前删除指令串 （[ctrl]+u） 及向后删除指令串 （[ctrl]+k） </td><br>    </tr><br>    <tr><br>        <td>[ctrl]+a/[ctrl]+e</td><br>        <td>分别是让光标移动到整个指令串的最前面 （[ctrl]+a） 或最后面 （[ctrl]+e） </td><br>    </tr><br>    <tr><br>        <td>Ctrl + C</td><br>        <td>终止目前命令</td><br>    </tr><br>    <tr><br>        <td>Ctrl + D</td><br>        <td>输入结束(EOF),例如:邮件结束的时候</td><br>    </tr><br>    <tr><br>        <td>Ctrl + M</td><br>        <td>就是Enter</td><br>    </tr><br>    <tr><br>        <td>Ctrl + S</td><br>        <td>暂停屏幕输出</td><br>    </tr><br>    <tr><br>        <td>Ctrl + Q</td><br>        <td>恢复屏幕输出</td><br>    </tr><br>    <tr><br>        <td>Ctrl + U</td><br>        <td>在提示字符下，将整列命令删除</td><br>    </tr><br>    <tr><br>        <td>Ctrl + Z</td><br>        <td>“暂停”目前的命令 配合fg/bg/jobs命令使用</td><br>    </tr><br></table><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="echo-指令"><a href="#echo-指令" class="headerlink" title="echo 指令"></a>echo 指令</h4><p>显示变量内容,”-e”选项可以格式化打印内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ echo $PATH</span><br></pre></td></tr></table></figure><h4 id="变量设置规则"><a href="#变量设置规则" class="headerlink" title="变量设置规则"></a>变量设置规则</h4><ol><li>变量与变量内容以一个”=”来连接.<br> <code>myname=Windus</code></li><li><p>等号两边不能直接接空白符.</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#错误</span><br><span class="line">myname= Windus</span><br><span class="line">myname=Windus L</span><br></pre></td></tr></table></figure></li><li><p>变量内容若有空白符可使用双引号或单引号将变量内容结合起来.  </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#双引号内特殊字符可保持原本特性,如:&quot;$&quot;等</span><br><span class="line">var=&quot;lang is $LANG&quot;</span><br><span class="line">echo $var --&gt; lang is UTF8</span><br><span class="line"></span><br><span class="line">#单引号内的特殊字符仅为一般字符(纯文本)</span><br><span class="line">var=&apos;lang is $LANG&apos;</span><br><span class="line">echo $var --&gt; lang is $LANG</span><br></pre></td></tr></table></figure></li><li><p>变量名称只能是英文字母与数字,但开头字符不能是数字.</p></li><li><p>可用跳脱字符” \ “,将特殊符号变成一般符号。(如： [Enter], $, \, 空白字符等）  </p><p> <code>myname=Windus\ L</code></p></li><li><p>在一串指令的执行中，还需要借由其他额外的指令所提供的信息时，可以使用反单引号“<code>指令</code>”或 “$（指令） </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">version=$（uname -r）</span><br><span class="line">echo $version --&gt; 3.10.0-229.el7.x86_64</span><br></pre></td></tr></table></figure></li><li><p>若该变量为扩增变量内容时，则可用 “\$变量名称” 或 ${变量} 累加内容</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PATH=&quot;$PATH&quot;:/home/bin</span><br><span class="line">或</span><br><span class="line">PATH=$&#123;PATH&#125;:/home/bin</span><br></pre></td></tr></table></figure></li><li><p>若该变量需要在其他子程序执行，则需要以 export 来使变量变成环境变量<br> <code>export PATH</code></p></li><li><p>通常大写字符为系统默认变量，自行设置变量可以使用小写字符，方便判断 （纯粹依照使用者兴趣与嗜好,在 Linux 默认的情况中，使用{大写的字母}来设置的变量一般为系统内定需要的变量）</p></li><li>取消变量用unset<br><code>unset myname</code></li></ol><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><ul><li><p>env命令<br>  查看所有环境变量</p><ul><li>HOME 使用者主文件夹变量, ~就会读取此变量</li><li>SHELL 目前环境使用的SHELL程序(Linux默认:/bin/bash)</li><li>HISTSIZE 历史命令记录笔数</li><li>MAIL 当前用户邮箱文件</li><li>PATH 可执行文件搜寻的路径(目录与目录中间:分隔).由于搜寻顺序依据PATH变量内目录顺序,所以目录顺序也是重要的.</li><li>LANG 语系数据</li><li><p>RANDOM 随机数变量(/dev/random),内容介于0~32767之间.</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#想要获取指定范围内的数,使用delcare声名数值类型</span><br><span class="line">[dmtsai@study ~]$ declare -i number=$RANDOM*10/32768 ; </span><br><span class="line">echo $number</span><br><span class="line">8   &lt;== 此时会随机取出 0~9 之间的数值喔！</span><br></pre></td></tr></table></figure></li></ul></li><li><p>set命令<br>  查看所有变量(含环境变量与自定变量)</p><ul><li><p>PS1 提示字符的设置</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\d ：可显示出“星期 月 日”的日期格式，如：&quot;Mon Feb 2&quot;</span><br><span class="line">\H ：完整的主机名称。举例来说，鸟哥的练习机为“study.centos.vbird”</span><br><span class="line">\h ：仅取主机名称在第一个小数点之前的名字，如鸟哥主机则为“study”后面省略</span><br><span class="line">\t ：显示时间，为 24 小时格式的“HH:MM:SS”</span><br><span class="line">\T ：显示时间，为 12 小时格式的“HH:MM:SS”</span><br><span class="line">\A ：显示时间，为 24 小时格式的“HH:MM”</span><br><span class="line">\@ ：显示时间，为 12 小时格式的“am/pm”样式</span><br><span class="line">\u ：目前使用者的帐号名称，如“dmtsai”；</span><br><span class="line">\v ：BASH 的版本信息，如鸟哥的测试主机版本为 4.2.46（1）-release，仅取“4.2”显示</span><br><span class="line">\w ：完整的工作目录名称，由根目录写起的目录名称。但主文件夹会以 ~ 取代；</span><br><span class="line">\W ：利用 basename 函数取得工作目录名称，所以仅会列出最后一个目录名。</span><br><span class="line">\# ：下达的第几个指令。</span><br><span class="line">\$ ：提示字符，如果是 root 时，提示字符为 # ，否则就是 $</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>- \$ 本shell的PID      `echo $$`- ? 上个指令的回传值    执行某些指令时， 这些指令都会回传一个执行后的代码。一般来说，如果成功的执行该指令， 则会回传一个 0 值,如果执行过程发生错误,就会传回错误代码.一般以非0代码取代.</code></pre><ul><li><p>export命令<br>  当你登陆 Linux 并取得一个 bash 之后，你的 bash 就是一个独立的程序，这个程序的识别使用的是一个称为程序识别码，被称为 PID 的就是。 接下来你在这个 bash 下面所下达的任何指令都是由这个 bash 所衍生出来的，那些被下达的指令就被称为子程序了.<br>  <img src="/2018/03/06/Linux/Linux的Bash/QQ20180307-115110@2x.png" alt="程序相关性示意图"></p><p>  子程序仅会继承父程序的环境变量， 子程序不会继承父程序的自订变量.所以你在原本 bash 的自订变量在进入了子程序后就会消失不见， 一直到你离开子程序并回到原本的父程序后，这个变量才会又出现！<br>此时,把自定变量变成环境变量就变得很有必要了:<br><code>export 变量名称</code></p></li></ul><p>如果export后面不加变量名称,就会将系统所有变量列出来,等同于set命令.</p><h4 id="语系变量"><a href="#语系变量" class="headerlink" title="语系变量"></a>语系变量</h4><ul><li><p>查看Linux支持的语系</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ locale -a</span><br><span class="line">....（前面省略）....</span><br><span class="line">zh_TW</span><br><span class="line">zh_TW.big5     &lt;==大五码的中文编码</span><br><span class="line">zh_TW.euctw</span><br><span class="line">zh_TW.utf8     &lt;==万国码的中文编码</span><br><span class="line">zu_ZA</span><br><span class="line">zu_ZA.iso88591</span><br><span class="line">zu_ZA.utf8</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>修改Linux语系</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">locale  &lt;==后面不加任何选项与参数即可！</span><br><span class="line">LANG=en_US                   &lt;==主语言的环境</span><br><span class="line">LC_CTYPE=&quot;en_US&quot;             &lt;==字符（文字）辨识的编码</span><br><span class="line">LC_NUMERIC=&quot;en_US&quot;           &lt;==数字系统的显示讯息</span><br><span class="line">LC_TIME=&quot;en_US&quot;              &lt;==时间系统的显示数据</span><br><span class="line">LC_COLLATE=&quot;en_US&quot;           &lt;==字串的比较与排序等</span><br><span class="line">LC_MONETARY=&quot;en_US&quot;          &lt;==币值格式的显示等</span><br><span class="line">LC_MESSAGES=&quot;en_US&quot;          &lt;==讯息显示的内容，如功能表、错误讯息等</span><br><span class="line">LC_ALL=                      &lt;==整体语系的环境</span><br><span class="line">....（后面省略）....</span><br></pre></td></tr></table></figure></li></ul><pre><code>可以逐一设置每个与语系有关的变量数据,可也以直接设置LANG或LC_ALL(其它语系变量会被这两个变量所取代).系统默认语系文件是: **/etc/locale.conf**</code></pre><h4 id="变量范围"><a href="#变量范围" class="headerlink" title="变量范围"></a>变量范围</h4><p>环境变量可以被子程序引用的原理:</p><ol><li>当启动一个shell,系统会分配一个记忆区给shell使用,使此内存内的变量,即环境变量可让子程序使用.</li><li>若父程序用export功能,将自定变量内容写到上述内存区块当中(环境变量).</li><li>当载入另一个shell时(亦启动一个子程序,离开原本父程序),子程序可以将父shell的环境变量所在记忆区导入自己的环境变量区块当中.</li></ol><h4 id="变量键盘读取-阵列与宣告"><a href="#变量键盘读取-阵列与宣告" class="headerlink" title="变量键盘读取/阵列与宣告"></a>变量键盘读取/阵列与宣告</h4><ul><li><p>read命令<br>  程序执行的过程当中，会等待使用者输入 “yes/no” 之类的讯息,和使用者对谈时使用此命令.</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ read [-pt] variable</span><br><span class="line">选项与参数：</span><br><span class="line">-p  ：后面可以接提示字符！</span><br><span class="line">-t  ：后面可以接等待的“秒数！”这个比较有趣～不会一直等待使用者啦！</span><br></pre></td></tr></table></figure></li><li><p>declare/typeset<br>  declare 或 typeset 是一样的功能，就是在“宣告变量的类型.</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ declare [-aixr] variable</span><br><span class="line">选项与参数：</span><br><span class="line">-a  ：将后面名为 variable 的变量定义成为阵列 （array） 类型</span><br><span class="line">-i  ：将后面名为 variable 的变量定义成为整数数字 （integer） 类型</span><br><span class="line">-x  ：用法与 export 一样，就是将后面的 variable 变成环境变量；</span><br><span class="line">-r  ：将变量设置成为 readonly 类型，该变量不可被更改内容，也不能 unset</span><br><span class="line">-p : 仅列出变量类型</span><br><span class="line"></span><br><span class="line">范例一：让变量 sum 进行 100+300+50 的加总结果</span><br><span class="line">[dmtsai@study ~]$ sum=100+300+50</span><br><span class="line">[dmtsai@study ~]$ echo $&#123;sum&#125;</span><br><span class="line">100+300+50  &lt;==咦！怎么没有帮我计算加总？因为这是文字体态的变量属性啊！</span><br><span class="line">[dmtsai@study ~]$ declare -i sum=100+300+50</span><br><span class="line">[dmtsai@study ~]$ echo $&#123;sum&#125;</span><br><span class="line">450         &lt;==瞭乎？？</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意: bash环境下,变量类型默认为“字串”，所以若不指定变量类型，则 1+2 为一个“字串”而不是“计算式”。 所以上述第一个执行的结果才会出现那个情况的；<br>bash 环境中的数值运算，默认最多仅能到达整数形态，所以 1/3 结果是 0； </p></blockquote><h4 id="变量内容删除-取代-替换"><a href="#变量内容删除-取代-替换" class="headerlink" title="变量内容删除/取代/替换"></a>变量内容删除/取代/替换</h4><hr><p>暂时跳过</p><hr><h3 id="系统限制关系-ulimit"><a href="#系统限制关系-ulimit" class="headerlink" title="系统限制关系 ulimit"></a>系统限制关系 ulimit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ ulimit [-SHacdfltu] [配额]</span><br><span class="line">选项与参数：</span><br><span class="line">-H  ：hard limit ，严格的设置，必定不能超过这个设置的数值；</span><br><span class="line">-S  ：soft limit ，警告的设置，可以超过这个设置值，但是若超过则有警告讯息。</span><br><span class="line">      在设置上，通常 soft 会比 hard 小，举例来说，soft 可设置为 80 而 hard </span><br><span class="line">      设置为 100，那么你可以使用到 90 （因为没有超过 100），但介于 80~100 之间时，</span><br><span class="line">      系统会有警告讯息通知你！</span><br><span class="line">-a  ：后面不接任何选项与参数，可列出所有的限制额度；</span><br><span class="line">-c  ：当某些程序发生错误时，系统可能会将该程序在内存中的信息写成文件（除错用），</span><br><span class="line">      这种文件就被称为核心文件（core file）。此为限制每个核心文件的最大容量。</span><br><span class="line">-f  ：此 shell 可以创建的最大文件大小（一般可能设置为 2GB）单位为 KBytes</span><br><span class="line">-d  ：程序可使用的最大断裂内存（segment）容量；</span><br><span class="line">-l  ：可用于锁定 （lock） 的内存量</span><br><span class="line">-t  ：可使用的最大 CPU 时间 （单位为秒）</span><br><span class="line">-u  ：单一使用者可以使用的最大程序（process）数量。</span><br><span class="line">-n &lt;文件数目&gt;：指定同一时间最多可开启的文件数；</span><br></pre></td></tr></table></figure><h3 id="命令别名与历史命令"><a href="#命令别名与历史命令" class="headerlink" title="命令别名与历史命令"></a>命令别名与历史命令</h3><h4 id="别名设置-alias-unalias"><a href="#别名设置-alias-unalias" class="headerlink" title="别名设置 alias / unalias"></a>别名设置 alias / unalias</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#设置别名</span><br><span class="line">[dmtsai@study ~]$ alias lm=&apos;ls -al | more</span><br><span class="line">#取消别名</span><br><span class="line">[dmtsai@study ~]$ unalias lm</span><br></pre></td></tr></table></figure><blockquote><p>设置别名,在机器重启后将丢失,如果想永久存在,需要写在~/.bash_profile文件内</p></blockquote><h4 id="历史命令-history"><a href="#历史命令-history" class="headerlink" title="历史命令 history"></a>历史命令 history</h4><p>历史命令记录在~/.bash_history文件中,记录的数量由HISTFILESIZE环境变量决定.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ history [-raw] histfiles</span><br><span class="line">选项与参数：</span><br><span class="line">n   ：数字，意思是“要列出最近的 n 笔命令列表”的意思！</span><br><span class="line">-c  ：将目前的 shell 中的所有 history 内容全部消除</span><br><span class="line">-a  ：将目前新增的 history 指令新增入 histfiles 中，若没有加 histfiles ，</span><br><span class="line">      则默认写入 ~/.bash_history</span><br><span class="line">-r  ：将 histfiles 的内容读到目前这个 shell 的 history 记忆中；</span><br><span class="line">-w  ：将目前的 history 记忆内容写入 histfiles 中！</span><br></pre></td></tr></table></figure><ul><li><p>历史命令的使用:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ !</span><br><span class="line">选项与参数：</span><br><span class="line">number  ：执行第几笔指令的意思；</span><br><span class="line">command ：由最近的指令向前搜寻“指令串开头为 command”的那个指令，并执行；</span><br><span class="line">!!      ：就是执行上一个指令（相当于按↑按键后，按 Enter）</span><br></pre></td></tr></table></figure></li><li><p>同一帐号同时多次登陆的history写入问题</p><p>  因为这些 bash 在同时以同一个身份登陆， 因此所有的 bash 都有自己的 1000 笔记录在内存中。因为等到登出时才会更新记录文件，所以，最后登出的那个 bash 才会是最后写入的数据。如此一来其他 bash 的指令操作就不会被记录下来了 （其实有被记录，只是被后来的最后一个 bash 所覆盖更新了） 。</p></li><li><p>历史命令时间问题<br>  历史命令还有一个问题，那就是无法记录指令下达的时间。由于这 1000 笔历史命令是依序记录的， 但是并没有记录时间，所以在查询方面会有一些不方便。其实可以通过~/.bash_logout 来进行 history 的记录，并加上 date 来增加时间参数.</p></li></ul><h2 id="Bash-Shell操作环境"><a href="#Bash-Shell操作环境" class="headerlink" title="Bash Shell操作环境"></a>Bash Shell操作环境</h2><h3 id="Bash-进站欢迎信息-etc-issue-etc-motd"><a href="#Bash-进站欢迎信息-etc-issue-etc-motd" class="headerlink" title="Bash 进站欢迎信息 /etc/issue  /etc/motd"></a>Bash 进站欢迎信息 /etc/issue  /etc/motd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">issue 内的各代码意义:</span><br><span class="line">\d 本地端时间的日期；</span><br><span class="line">\l 显示第几个终端机接口；</span><br><span class="line">\m 显示硬件的等级 （i386/i486/i586/i686...）；</span><br><span class="line">\n 显示主机的网络名称；</span><br><span class="line">\O 显示 domain name；</span><br><span class="line">\r 操作系统的版本 （相当于 uname -r）</span><br><span class="line">\t 显示本地端时间的时间；</span><br><span class="line">\S 操作系统的名称；</span><br><span class="line">\v 操作系统的版本</span><br></pre></td></tr></table></figure><blockquote><p>当我们使用 telnet 连接到主机时，主机的登陆画面就会显示 /etc/issue.net 而不是 /etc/issue<br>/etc/motd 里面显示的则是文字信息</p></blockquote><h3 id="bash环境配置文件"><a href="#bash环境配置文件" class="headerlink" title="bash环境配置文件"></a>bash环境配置文件</h3><h4 id="login与non-login-Shell"><a href="#login与non-login-Shell" class="headerlink" title="login与non-login Shell"></a>login与non-login Shell</h4><ul><li><p>login shell：取得 bash 时需要完整的登陆流程的，就称为 login shell。举例来说，你要由 tty1 ~ tty6 登陆，需要输入使用者的帐号与密码，此时取得的 bash 就称为“ login shell ”</p></li><li><p>non-login shell：取得 bash 接口的方法不需要重复登陆的举动，举例来说，（1）你以 X window 登陆 Linux 后， 再以 X 的图形化接口启动终端机，此时那个终端接口并没有需要再次的输入帐号与密码，那个 bash 的环境就称为 non-login shell了。（2）你在原本的 bash 环境下再次下达 bash 这个指令，同样的也没有输入帐号密码， 那第二个 bash （子程序） 也是 non-login shell 。</p></li></ul><blockquote><p>这两个Shell，读取的配置文件数据并不一样.</p></blockquote><h4 id="etc-profile-login-Shell读取"><a href="#etc-profile-login-Shell读取" class="headerlink" title="/etc/profile (login Shell读取)"></a>/etc/profile (login Shell读取)</h4><p>这个配置文件可以利用使用者的识别码 （UID） 来决定很多重要的变量数据， 也是每个使用者登陆取得 bash 时一定会读取的配置文件.所以设置全局环境就要改这个文件!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">主要变量:</span><br><span class="line">PATH：会依据 UID 决定 PATH 变量要不要含有 sbin 的系统指令目录；</span><br><span class="line">MAIL：依据帐号设置好使用者的 mailbox 到 /var/spool/mail/帐号名；</span><br><span class="line">USER：根据使用者的帐号设置此一变量内容；</span><br><span class="line">HOSTNAME：依据主机的 hostname 指令决定此一变量内容；</span><br><span class="line">HISTSIZE：历史命令记录笔数。CentOS 7.x 设置为 1000 ；</span><br><span class="line">umask：包括 root 默认为 022 而一般用户为 002 等！</span><br></pre></td></tr></table></figure><blockquote><p>/etc/profile 还会调用外部的设置数据,主要有如下:</p></blockquote><ul><li><p>/etc/profile.d/*.sh<br>  “这个目录内的众多文件！只要在 /etc/profile.d/ 这个目录内且扩展名为 .sh ，另外，使用者能够具有 r 的权限， 那么该文件就会被 /etc/profile 调用进来。在 CentOS 7.x 中，这个目录下面的文件规范了 bash 操作接口的颜色、 语系、ll 与 ls 指令的命令别名、vi 的命令别名、which 的命令别名等等。如果你需要帮所有使用者设置一些共享的命令别名时， 可以在这个目录下面自行创建扩展名为 .sh 的文件，并将所需要的数据写入即可！</p></li><li><p>/etc/locale.conf<br>  这个文件是由 /etc/profile.d/lang.sh 调用进来的！这也是我们决定 bash 默认使用何种语系的重要配置文件！ 文件里最重要的就是 LANG/LC_ALL 这些个变量的设置！</p></li><li><p>/usr/share/bash-completion/completions/*<br>  这个目录下除前面谈过 [tab] 命令补齐、文件名补齐之外，还可以进行指令的选项/参数补齐功能！那就是从这个目录里面找到相对应的指令来处理的！ 其实这个目录下面的内容是由 /etc/profile.d/bash_completion.sh 这个文件载入的啦！</p></li></ul><h4 id="bash-profile-login-Shell读取"><a href="#bash-profile-login-Shell读取" class="headerlink" title="~/.bash_profile (login Shell读取)"></a>~/.bash_profile (login Shell读取)</h4><p>bash 在读完了整体环境设置的 /etc/profile 并借此调用其他配置文件后，接下来则是会读取使用者的个人配置文件。 在 login shell 的 bash 环境中，所读取的个人偏好配置文件其实主要有三个，依序分别是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. ~/.bash_profile</span><br><span class="line">2. ~/.bash_login</span><br><span class="line">3. ~/.profile</span><br></pre></td></tr></table></figure><p>其实 bash 的 login shell 设置只会读取上面三个文件的其中一个， 而读取的顺序则是依照上面的顺序。也就是说，如果 ~/.bash_profile 存在，那么其他两个文件不论有无存在，都不会被读取。 如果 ~/.bash_profile 不存在才会去读取 ~/.bash_login，而前两者都不存在才会读取 ~/.profile 的意思。 会有这么多的文件，其实是因应其他 shell 转换过来的使用者的习惯而已。</p><p><img src="/2018/03/06/Linux/Linux的Bash/QQ20180315-174127@2x.png" alt="shell 读取流程"></p><h4 id="source-读入环境配置文件指令"><a href="#source-读入环境配置文件指令" class="headerlink" title="source 读入环境配置文件指令"></a>source 读入环境配置文件指令</h4><p>由于 /etc/profile 与 ~/.bash_profile 都是在取得 login shell 的时候才会读取的配置文件，所以， 如果你将自己的偏好设置写入上述的文件后，通常都是得登出再登陆后，该设置才会生效。利用这个指令可以直接生效!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ source 配置文件文件名</span><br><span class="line"></span><br><span class="line">范例：将主文件夹的 ~/.bashrc 的设置读入目前的 bash 环境中</span><br><span class="line">[dmtsai@study ~]$ source ~/.bashrc  &lt;==下面这两个指令是一样的！</span><br><span class="line">[dmtsai@study ~]$  .  ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="bashrc-（non-login-shell-读取）"><a href="#bashrc-（non-login-shell-读取）" class="headerlink" title="~/.bashrc （non-login shell 读取）"></a>~/.bashrc （non-login shell 读取）</h4><p>CentOS 7.x 还会主动的调用 /etc/bashrc 这个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/bashrc文件记录内容</span><br><span class="line">1. 依据不同的 UID 规范出 umask 的值；</span><br><span class="line">2. 依据不同的 UID 规范出提示字符 （就是 PS1 变量）；</span><br><span class="line">3. 调用 /etc/profile.d/*.sh 的设置</span><br></pre></td></tr></table></figure></p><blockquote><p>/etc/bashrc文件是Red Hat系统特有的,如果此文件丢失,可以复制 /etc/skel/.bashrc 到你的主文件夹.</p></blockquote><h3 id="终端机环境设置-stty-set"><a href="#终端机环境设置-stty-set" class="headerlink" title="终端机环境设置 stty , set"></a>终端机环境设置 stty , set</h3><h4 id="stty命令"><a href="#stty命令" class="headerlink" title="stty命令"></a>stty命令</h4><p>查阅目前的一些按键内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ stty [-a]</span><br><span class="line">选项与参数：</span><br><span class="line">-a  ：将目前所有的 stty 参数列出来；</span><br><span class="line"></span><br><span class="line">#列出所有的按键与按键内容</span><br><span class="line">[dmtsai@study ~]$ stty -a</span><br><span class="line">speed 38400 baud; rows 20; columns 90; line = 0;</span><br><span class="line">intr = ^C; quit = ^\; erase = ^?; kill = ^U; eof = ^D; eol = &lt;undef&gt;; eol2 = &lt;undef&gt;;</span><br><span class="line">swtch = &lt;undef&gt;; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V;</span><br><span class="line">flush = ^O; min = 1; time = 0;</span><br><span class="line">....（以下省略）....</span><br><span class="line"></span><br><span class="line">#设置按键</span><br><span class="line">[dmtsai@study ~]$ stty erase ^h</span><br><span class="line"></span><br><span class="line">意义:</span><br><span class="line">intr  : 送出一个 interrupt （中断） 的讯号给目前正在 执行的程序 （就是终止啰！）；</span><br><span class="line">quit  : 送出一个 quit 的讯号给目前正在执行的程序；</span><br><span class="line">erase : 向后删除字符，</span><br><span class="line">kill  : 删除在目前命令行上的所有文字；</span><br><span class="line">eof   : End of file 的意思，代表“结束输入”。</span><br><span class="line">start : 在某个程序停止后，重新启动他的 output</span><br><span class="line">stop  : 停止目前屏幕的输出；</span><br><span class="line">susp  : 送出一个 terminal stop 的讯号给正在 run 的程序。</span><br></pre></td></tr></table></figure><h4 id="set命令"><a href="#set命令" class="headerlink" title="set命令"></a>set命令</h4><hr><p>暂无</p><hr><h3 id="万用字符与特殊符号"><a href="#万用字符与特殊符号" class="headerlink" title="万用字符与特殊符号"></a>万用字符与特殊符号</h3><p>万用字符:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*代表“ 0 个到无穷多个”任意字符</span><br><span class="line">?代表“一定有一个”任意字符</span><br><span class="line">[]同样代表“一定有一个在括号内”的字符（非任意字符）。例如 [abcd] 代表“一定有一个字符， 可能是 a, b, c, d 这四个任何一个”</span><br><span class="line"></span><br><span class="line">[-]若有减号在中括号内时，代表“在编码顺序内的所有字符”。例如 [0-9] 代表 0 到 9 之间的所有数字，因为数字的语系编码是连续的！</span><br><span class="line"></span><br><span class="line">[^]若中括号内的第一个字符为指数符号 （^） ，那表示“反向选择”，例如 [^abc] 代表 一定有一个字符，只要是非 a, b, c 的其他字符就接受的意思。</span><br></pre></td></tr></table></figure><p>特殊字符:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#注解符号：这个最常被使用在 script 当中，视为说明！在后的数据均不执行</span><br><span class="line">\跳脱符号：将“特殊字符或万用字符”还原成一般字符</span><br><span class="line">|管线 （pipe）：分隔两个管线命令的界定（后两节介绍）；</span><br><span class="line">;连续指令下达分隔符号：连续性命令的界定 （注意:与管线命令并不相同）</span><br><span class="line">~使用者的主文件夹</span><br><span class="line">$取用变量前置字符：亦即是变量之前需要加的变量取代值</span><br><span class="line">&amp;工作控制 （job control）：将指令变成背景下工作</span><br><span class="line">!逻辑运算意义上的“非” not 的意思！</span><br><span class="line">/目录符号：路径分隔的符号</span><br><span class="line">&gt;, &gt;&gt;数据流重导向：输出导向，分别是“取代”与“累加”</span><br><span class="line">&lt;, &lt;&lt;数据流重导向：输入导向 </span><br><span class="line">&apos;&apos;单引号，不具有变量置换的功能 （$ 变为纯文本）</span><br><span class="line">&quot;&quot;具有变量置换的功能！ （$ 可保留相关功能）</span><br><span class="line">``两个“ ` ”中间为可以先执行的指令，亦可使用 $（ ）</span><br><span class="line">()在中间为子 shell 的起始与结束</span><br><span class="line">&#123;&#125;在中间为命令区块的组合！</span><br></pre></td></tr></table></figure><h2 id="数据流重导向"><a href="#数据流重导向" class="headerlink" title="数据流重导向"></a>数据流重导向</h2><h3 id="数据流输入-输出"><a href="#数据流输入-输出" class="headerlink" title="数据流输入/输出"></a>数据流输入/输出</h3><p><strong><em>标准输出</em></strong>:指的是“指令执行所回传的正确的讯息”<br><strong><em>标准错误输出</em></strong>:“ 指令执行失败后，所回传的错误讯息”  </p><blockquote><p>标准输入　　（stdin） ：代码为 0 ，使用 &lt; 或 &lt;&lt; ；<br>标准输出　　（stdout）：代码为 1 ，使用 &gt; 或 &gt;&gt; ；<br>标准错误输出（stderr）：代码为 2 ，使用 2&gt; 或 2&gt;&gt; ；</p></blockquote><h4 id="dev-null-垃圾桶黑洞设备与特殊写法"><a href="#dev-null-垃圾桶黑洞设备与特殊写法" class="headerlink" title="/dev/null 垃圾桶黑洞设备与特殊写法"></a>/dev/null 垃圾桶黑洞设备与特殊写法</h4><p>/dev/null 可以吃掉任何导向这个设备的信息 </p><h4 id="2-gt-amp-amp-gt"><a href="#2-gt-amp-amp-gt" class="headerlink" title="2&gt;&amp; | &amp;&gt;"></a>2&gt;&amp; | &amp;&gt;</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#将指令的数据全部写入名为 list 的文件中(包括错误信息)</span><br><span class="line">[dmtsai@study ~]$ find /home -name .bashrc &gt; list 2&gt;&amp;1    </span><br><span class="line">[dmtsai@study ~]$ find /home -name .bashrc &amp;&gt; list</span><br></pre></td></tr></table></figure></code></pre><h4 id="标准输入"><a href="#标准输入" class="headerlink" title="标准输入"></a>标准输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#利用 cat 指令来创建一个文件的简单流程</span><br><span class="line">[dmtsai@study ~]$ cat &gt; catfile</span><br><span class="line">testing</span><br><span class="line">cat file test</span><br><span class="line">&lt;==这里按下 [ctrl]+d 来离开</span><br><span class="line"></span><br><span class="line">[dmtsai@study ~]$ cat catfile</span><br><span class="line">testing</span><br><span class="line">cat file test</span><br><span class="line"></span><br><span class="line">#用 stdin 取代键盘的输入以创建新文件的简单流程</span><br><span class="line">[dmtsai@study ~]$ cat &gt; catfile &lt; ~/.bashrc</span><br><span class="line">[dmtsai@study ~]$ ll catfile ~/.bashrc</span><br><span class="line"># 注意看，这两个文件的大小会一模一样！几乎像是使用 cp 来复制一般！</span><br><span class="line">-rw-r--r--. 1 dmtsai dmtsai 231 Mar  6 06:06 /home/dmtsai/.bashrc</span><br><span class="line">-rw-rw-r--. 1 dmtsai dmtsai 231 Jul  9 18:58 catfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#用 cat 直接将输入的讯息输出到 catfile 中， 且当由键盘输入 eof 时，该次输入就结束</span><br><span class="line">[dmtsai@study ~]$ cat &gt; catfile &lt;&lt; &quot;eof&quot;</span><br><span class="line">&gt; This is a test.</span><br><span class="line">&gt; OK now stop</span><br><span class="line">&gt; eof  &lt;==输入这关键字，立刻就结束而不需要输入 [ctrl]+d</span><br><span class="line"></span><br><span class="line">[dmtsai@study ~]$ cat catfile</span><br><span class="line">This is a test.</span><br><span class="line">OK now stop     &lt;==只有这两行，不会存在关键字那一行！</span><br></pre></td></tr></table></figure><h3 id="命令执行的判断依据-amp-amp"><a href="#命令执行的判断依据-amp-amp" class="headerlink" title="命令执行的判断依据 ;  &amp;&amp;  ||"></a>命令执行的判断依据 ;  &amp;&amp;  ||</h3><h4 id="不考虑指令相关性的连续指令下达-cmd-cmd"><a href="#不考虑指令相关性的连续指令下达-cmd-cmd" class="headerlink" title="不考虑指令相关性的连续指令下达 cmd;cmd"></a>不考虑指令相关性的连续指令下达 cmd;cmd</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# sync; sync; shutdown -h now</span><br></pre></td></tr></table></figure><h4 id="（指令回传值）-与-amp-amp-或"><a href="#（指令回传值）-与-amp-amp-或" class="headerlink" title="$? （指令回传值） 与 &amp;&amp; 或 ||"></a>$? （指令回传值） 与 &amp;&amp; 或 ||</h4><p>若前一个指令执行的结果为正确，在 Linux 下面会回传一个 $? = 0 的值</p><table><br>    <tr><br>        <th>指令</th><br>        <th>说明</th><br>    </tr><br>    <tr><br>        <td>cmd1 &amp;&amp; cmd2</td><br>        <td><br>        1. 若 cmd1 执行完毕且正确执行（$?=0），则开始执行 cmd2。<br><br>        2. 若 cmd1 执行完毕且为错误 （$?≠0），则 cmd2 不执行。</td><br>    </tr><br>    <tr><br>        <td>cmd1 || cmd2</td><br>        <td><br>        1. 若 cmd1 执行完毕且正确执行（$?=0），则 cmd2 不执行。<br><br>        2. 若 cmd1 执行完毕且为错误 （$?≠0），则开始执行 cmd2。</td><br>    </tr><br></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ ls /tmp/abc || mkdir /tmp/abc &amp;&amp; touch /tmp/abc/hehe</span><br></pre></td></tr></table></figure><p>Linux 下面的指令都是由左往右执行,上面执行结果:<br><em>情况一:</em><br>（1）若 /tmp/abc 不存在故回传 $?≠0，则<br>（2）因为 || 遇到非为 0 的 \$? 故开始 mkdir /tmp/abc，由于 mkdir /tmp/abc 会成功进行，所以回传 \$?=0<br>（3）因为 &amp;&amp; 遇到 \$?=0 故会执行 touch /tmp/abc/hehe，最终 hehe 就被创建了；</p><p><em>情况二:</em><br>（1）若 /tmp/abc 存在故回传 $?=0，则<br>（2）因为 || 遇到 0 的 $? 不会进行，此时 $?=0 继续向后传，故<br>（3）因为 &amp;&amp; 遇到 \$?=0 就开始创建 /tmp/abc/hehe 了！最终 /tmp/abc/hehe 被创建起来。</p><p><img src="/2018/03/06/Linux/Linux的Bash/QQ20180316-134233@2x.png" alt="指令执行关系示意图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls /tmp/vbirding || echo &quot;not exist&quot; &amp;&amp; echo &quot;exist”</span><br><span class="line">#返回结果:</span><br><span class="line">not exist</span><br><span class="line">exist</span><br></pre></td></tr></table></figure><blockquote><p>由于指令是一个接着一个去执行的，因此，如果真要使用判断， 那么这个 &amp;&amp; 与 || 的顺序就不能搞错(如上面例子).<br>一般来说，假设判断式有三个，也就是：<br>command1 &amp;&amp; command2 || command3</p></blockquote><h2 id="管线命令-pipe"><a href="#管线命令-pipe" class="headerlink" title="管线命令(pipe)"></a>管线命令(pipe)</h2><p><strong>管线命令使用的是“ | ”这个界定符号！ 另外，管线命令与“连续下达命令”是不一样！</strong><br><strong>管线命令“ | ”仅能处理经由前面一个指令传来的正确信息，也就是 standard output 的信息，对于 stdandard error 并没有直接处理的能力.</strong><br><strong>每个管线后面接的第一个数据必定是“指令”喔！而且这个指令必须要能够接受 standard input 的数据才行，这样的指令才可以是为“管线命令”</strong></p><h3 id="撷取命令-cut-grep"><a href="#撷取命令-cut-grep" class="headerlink" title="撷取命令 cut grep"></a>撷取命令 cut grep</h3><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><p>将一段讯息的某一段给他“切”出来～ 处理的讯息是以“行”为单位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ cut -d&apos;分隔字符&apos; -f fields &lt;==用于有特定分隔字符</span><br><span class="line">[dmtsai@study ~]$ cut -c 字符区间            &lt;==用于排列整齐的讯息</span><br><span class="line">选项与参数：</span><br><span class="line">-d  ：后面接分隔字符。与 -f 一起使用；</span><br><span class="line">-f  ：依据 -d 的分隔字符将一段讯息分区成为数段，用 -f 取出第几段的意思；</span><br><span class="line">-c  ：以字符 （characters） 的单位取出固定字符区间；</span><br><span class="line"></span><br><span class="line">[dmtsai@study ~]$ echo $&#123;PATH&#125; | cut -d &apos;:&apos; -f 5 #显示切割后的第5个</span><br><span class="line">[dmtsai@study ~]$ echo $&#123;PATH&#125; | cut -d &apos;:&apos; -f 3,5 #显示切割后的3-5个</span><br><span class="line">[dmtsai@study ~]$ echo $&#123;PATH&#125; | cut -d &apos;:&apos; -f 3- #显示切割后的3到最后一个</span><br><span class="line"></span><br><span class="line">#将 export 输出的讯息，取得第 12 字符以后的所有字串</span><br><span class="line">[dmtsai@study ~]$ export</span><br><span class="line">declare -x HISTCONTROL=&quot;ignoredups&quot;</span><br><span class="line">declare -x HISTSIZE=&quot;1000&quot;</span><br><span class="line">declare -x HOME=&quot;/home/dmtsai&quot;</span><br><span class="line">declare -x HOSTNAME=&quot;study.centos.vbird&quot;</span><br><span class="line">.....（其他省略）.....</span><br><span class="line"># 注意看，每个数据都是排列整齐的输出！如果我们不想要“ declare -x ”时，就得这么做：</span><br><span class="line"></span><br><span class="line">[dmtsai@study ~]$ export | cut -c 12-</span><br><span class="line">HISTCONTROL=&quot;ignoredups&quot;</span><br><span class="line">HISTSIZE=&quot;1000&quot;</span><br><span class="line">HOME=&quot;/home/dmtsai&quot;</span><br><span class="line">HOSTNAME=&quot;study.centos.vbird&quot;</span><br><span class="line">.....（其他省略）.....</span><br></pre></td></tr></table></figure><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ grep [-acinv] [--color=auto] &apos;搜寻字串&apos; filename</span><br><span class="line">选项与参数：</span><br><span class="line">-a ：将 binary 文件以 text 文件的方式搜寻数据</span><br><span class="line">-c ：计算找到 &apos;搜寻字串&apos; 的次数</span><br><span class="line">-i ：忽略大小写的不同，所以大小写视为相同</span><br><span class="line">-n ：顺便输出行号</span><br><span class="line">-v ：反向选择，亦即显示出没有 &apos;搜寻字串&apos; 内容的那一行！</span><br><span class="line">--color=auto ：可以将找到的关键字部分加上颜色的显示喔！</span><br><span class="line">-A : 后面可加数字，为 after 的意思，除了列出该行外，后续的 n 行也列出来；</span><br><span class="line">-B : 后面可加数字，为 before 的意思，除了列出该行外，前面的 n 行也列出来；</span><br></pre></td></tr></table></figure><h3 id="排序命令-sort-wc-uniq"><a href="#排序命令-sort-wc-uniq" class="headerlink" title="排序命令 sort wc uniq"></a>排序命令 sort wc uniq</h3><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ sort [-fbMnrtuk] [file or stdin]</span><br><span class="line">选项与参数：</span><br><span class="line">-f  ：忽略大小写的差异，例如 A 与 a 视为编码相同；</span><br><span class="line">-b  ：忽略最前面的空白字符部分；</span><br><span class="line">-M  ：以月份的名字来排序，例如 JAN, DEC 等等的排序方法；</span><br><span class="line">-n  ：使用“纯数字”进行排序（默认是以文字体态来排序的）；</span><br><span class="line">-r  ：反向排序；</span><br><span class="line">-u  ：就是 uniq ，相同的数据中，仅出现一行代表；</span><br><span class="line">-t  ：分隔符号，默认是用 [tab] 键来分隔；</span><br><span class="line">-k  ：以那个区间 （field） 来进行排序的意思</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#/etc/passwd 内容是以 : 来分隔的，我想以第三栏来排序，该如何？</span><br><span class="line">[dmtsai@study ~]$ cat /etc/passwd | sort -t &apos;:&apos; -k 3</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">dmtsai:x:1000:1000:dmtsai:/home/dmtsai:/bin/bash</span><br><span class="line">alex:x:1001:1002::/home/alex:/bin/bash</span><br><span class="line">arod:x:1002:1003::/home/arod:/bin/bash</span><br><span class="line"># 看到特殊字体的输出部分了吧？怎么会这样排列啊？呵呵！没错啦～</span><br><span class="line"># 如果是以文字体态来排序的话，原本就会是这样，想要使用数字排序：</span><br><span class="line"># cat /etc/passwd | sort -t &apos;:&apos; -k 3 -n</span><br><span class="line"># 这样才行啊！用那个 -n 来告知 sort 以数字来排序啊！</span><br></pre></td></tr></table></figure><h4 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h4><p>重复的数据仅列出一个显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ uniq [-ic]</span><br><span class="line">选项与参数：</span><br><span class="line">-i  ：忽略大小写字符的不同；</span><br><span class="line">-c  ：进行计数</span><br><span class="line"></span><br><span class="line">#使用 last 将帐号列出，仅取出帐号栏，进行排序后仅取出一位；</span><br><span class="line">[dmtsai@study ~]$ last | cut -d &apos; &apos; -f1 | sort | uniq</span><br><span class="line"></span><br><span class="line">#承上,继续显示每个帐号登录次数</span><br><span class="line">[dmtsai@study ~]$ last | cut -d &apos; &apos; -f1 | sort | uniq -c</span><br><span class="line">      1</span><br><span class="line">      6 （unknown</span><br><span class="line">     47 dmtsai</span><br><span class="line">      4 reboot</span><br><span class="line">      7 root</span><br><span class="line">      1 wtmp</span><br></pre></td></tr></table></figure><h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ wc [-lwm]</span><br><span class="line">选项与参数：</span><br><span class="line">-l  ：仅列出行；</span><br><span class="line">-w  ：仅列出多少字（英文单字）；</span><br><span class="line">-m  ：多少字符；</span><br><span class="line"></span><br><span class="line">#/etc/man_db.conf 里面到底有多少相关字、行、字符数？</span><br><span class="line">[dmtsai@study ~]$ cat /etc/man_db.conf | wc</span><br><span class="line">    131     723    5171</span><br><span class="line"># 输出的三个数字中，分别代表： “行、字数、字符数</span><br></pre></td></tr></table></figure><h3 id="双重导向tee"><a href="#双重导向tee" class="headerlink" title="双重导向tee"></a>双重导向tee</h3><p>可以让 standard output 转存一份到文件内并将同样的数据继续送到屏幕去处理.<br><img src="/2018/03/06/Linux/Linux的Bash/QQ20180319-161532@2x.png" alt="tee工作流程示意图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ tee [-a] file</span><br><span class="line">选项与参数：</span><br><span class="line">-a  ：以累加 （append） 的方式，将数据加入 file 当中！</span><br><span class="line"></span><br><span class="line">[dmtsai@study ~]$ ls -l /home | tee ~/homefile | more</span><br><span class="line"># 将 ls 的数据存一份到 ~/homefile ，同时屏幕也有输出讯息！</span><br><span class="line"></span><br><span class="line">[dmtsai@study ~]$ ls -l / | tee -a ~/homefile | more</span><br><span class="line"># 要注意！ tee 后接的文件会被覆盖，若加上 -a 这个选项则能将讯息累加。</span><br></pre></td></tr></table></figure><h3 id="字符转换命令-tr-col-join-paste-expand"><a href="#字符转换命令-tr-col-join-paste-expand" class="headerlink" title="字符转换命令 tr, col, join, paste, expand"></a>字符转换命令 tr, col, join, paste, expand</h3><h4 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h4><p>tr 可以用来删除一段讯息当中的文字，或者是进行文字讯息的替换！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ tr [-ds] SET1 ...</span><br><span class="line">选项与参数：</span><br><span class="line">-d  ：删除讯息当中的 SET1 这个字串；</span><br><span class="line">-s  ：取代掉重复的字符！</span><br><span class="line"></span><br><span class="line">#将 last 输出的讯息中，所有的小写变成大写字符：</span><br><span class="line">[dmtsai@study ~]$ last | tr &apos;[a-z]&apos; &apos;[A-Z]&apos;</span><br><span class="line"># 不加单引号也是可以执行的，如：“ last | tr [a-z] [A-Z] ”</span><br><span class="line"></span><br><span class="line">#将 /etc/passwd 输出的讯息中，将冒号 （:） 删除</span><br><span class="line">[dmtsai@study ~]$ cat /etc/passwd | tr -d &apos;:&apos;</span><br></pre></td></tr></table></figure><h4 id="col"><a href="#col" class="headerlink" title="col"></a>col</h4><p>用来简单的处理将 [tab] 按键取代成为空白键.(<strong><em>还有其它用途???</em></strong>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ col [-xb]</span><br><span class="line">选项与参数：</span><br><span class="line">-x  ：将 tab 键转换成对等的空白键</span><br><span class="line"></span><br><span class="line">#利用 cat -A 显示出所有特殊按键，最后以 col 将 [tab] 转成空白</span><br><span class="line">[dmtsai@study ~]$ cat -A /etc/man_db.conf  &lt;==此时会看到很多 ^I 的符号，那就是 tab</span><br><span class="line">[dmtsai@study ~]$ cat /etc/man_db.conf | col -x | cat -A | more</span><br></pre></td></tr></table></figure><h3 id="分区命令-split"><a href="#分区命令-split" class="headerlink" title="分区命令 split"></a>分区命令 split</h3><p>如果有文件太大，导致一些携带式设备无法复制的问题，split 可以将一个大文件，依据文件大小或行数来分区，就可以将大文件分区成为小文件了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ split [-bl] file PREFIX</span><br><span class="line">选项与参数：</span><br><span class="line">-b  ：后面可接欲分区成的文件大小，可加单位，例如 b, k, m 等；</span><br><span class="line">-l  ：以行数来进行分区。</span><br><span class="line">PREFIX ：代表前置字符的意思，可作为分区文件的前导文字。</span><br></pre></td></tr></table></figure><p><code>范例一</code>：我的 /etc/services 有六百多K，若想要分成 300K 一个文件时？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ cd /tmp; split -b 300k /etc/services services</span><br><span class="line">[dmtsai@study tmp]$ ll -k services*</span><br><span class="line">-rw-rw-r--. 1 dmtsai dmtsai 307200 Jul  9 22:52 servicesaa</span><br><span class="line">-rw-rw-r--. 1 dmtsai dmtsai 307200 Jul  9 22:52 servicesab</span><br><span class="line">-rw-rw-r--. 1 dmtsai dmtsai  55893 Jul  9 22:52 servicesac</span><br><span class="line"># 那个文件名可以随意取的啦！我们只要写上前导文字，小文件就会以xxxaa, xxxab, xxxac 等方式来创建小文件的！</span><br></pre></td></tr></table></figure><p><code>“范例二</code>：如何将上面的三个小文件合成一个文件，文件名为 servicesback</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#用数据流重导向合成文件</span><br><span class="line">[dmtsai@study tmp]$ cat services* &gt;&gt; servicesback</span><br></pre></td></tr></table></figure><p><code>范例三</code>：使用 ls -al / 输出的信息中，每十行记录成一个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study tmp]$ ls -al / | split -l 10 - lsroot</span><br><span class="line">[dmtsai@study tmp]$ wc -l lsroot*</span><br><span class="line">  10 lsrootaa</span><br><span class="line">  10 lsrootab</span><br><span class="line">   4 lsrootac</span><br><span class="line">  24 total</span><br><span class="line"># 重点在那个 - 啦！一般来说，如果需要 stdout/stdin 时，但偏偏又没有文件，有的只是 - 时，那么那个 - 就会被当成 stdin 或 stdout ～</span><br></pre></td></tr></table></figure><h3 id="参数代换-xargs-后面貌似不能用alias"><a href="#参数代换-xargs-后面貌似不能用alias" class="headerlink" title="参数代换 xargs(后面貌似不能用alias)"></a>参数代换 xargs(后面貌似不能用alias)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ xargs [-0epn] command</span><br><span class="line">选项与参数：</span><br><span class="line">-0  ：如果输入的 stdin 含有特殊字符，例如 `, \, 空白键等等字符时，这个 -0 参数</span><br><span class="line">      可以将他还原成一般字符。这个参数可以用于特殊状态！</span><br><span class="line">-e  ：这个是 EOF （end of file） 的意思。后面可以接一个字符串，当 xargs 分析到这个字串时，就会停止继续工作！</span><br><span class="line">-p  ：在执行每个指令的 argument 时，都会询问使用者的意思；</span><br><span class="line">-n  ：后面接次数，每次 command 指令执行时，要使用几个参数的意思。</span><br><span class="line">当 xargs 后面没有接任何的指令时，默认是以 echo 来进行输出喔！</span><br></pre></td></tr></table></figure><p><code>范例一</code>：将 /etc/passwd 内的第一栏取出，仅取三行，使用 id 这个指令将每个帐号内容秀出来.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ id root</span><br><span class="line">uid=0（root） gid=0（root） groups=0（root）   </span><br><span class="line"># 这个 id 指令可以查询使用者的 UID/GID 等信息</span><br><span class="line"></span><br><span class="line">[dmtsai@study ~]$ id $(cut -d &apos;:&apos; -f 1 /etc/passwd | head -n 3)</span><br><span class="line"># 虽然使用 $（cmd） 可以预先取得参数，但可惜的是， id 这个指令“仅”能接受一个参数而已！</span><br><span class="line"># 所以上述的这个指令执行会出现错误！根本不会显示用户的 ID 啊！</span><br><span class="line"></span><br><span class="line">[dmtsai@study ~]$ cut -d &apos;:&apos; -f 1 /etc/passwd | head -n 3 | id</span><br><span class="line">uid=1000 (dmtsai) gid=1000 (dmtsai) groups=1000 (dmtsai),10(wheel)</span><br><span class="line"># 因为 id 并不是管线命令，因此在上面这个指令执行后，前面的东西通通不见！只会执行 id！</span><br><span class="line"></span><br><span class="line">[dmtsai@study ~]$ cut -d &apos;:&apos; -f 1 /etc/passwd | head -n 3 | xargs id</span><br><span class="line"># 依旧会出现错误！这是因为 xargs 一口气将全部的数据通通丢给 id 处理～但id 就接受 1 个参数！</span><br><span class="line"></span><br><span class="line">[dmtsai@study ~]$ cut -d &apos;:&apos; -f 1 /etc/passwd | head -n 3 | xargs -n 1 id</span><br><span class="line">uid=0（root） gid=0（root） groups=0（root）</span><br><span class="line">uid=1（bin） gid=1（bin） groups=1（bin）</span><br><span class="line">uid=2（daemon） gid=2（daemon） groups=2（daemon）</span><br><span class="line"># 通过 -n 来处理，一次给予一个参数，因此上述的结果就 OK 正常的显示啰！</span><br></pre></td></tr></table></figure><p><code>范例二</code>：同上，但是每次执行 id 时，都要询问使用者是否动作？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ cut -d &apos;:&apos; -f 1 /etc/passwd | head -n 3 | xargs -p -n 1 id</span><br><span class="line">id root ?...y</span><br><span class="line">uid=0（root） gid=0（root） groups=0（root）</span><br><span class="line">id bin ?...y</span><br><span class="line">.....（下面省略）.....</span><br><span class="line"># 呵呵！这个 -p 的选项可以让使用者的使用过程中，被询问到每个指令是否执行！</span><br></pre></td></tr></table></figure><p><code>范例三</code>：将所有的 /etc/passwd 内的帐号都以 id 查阅，但查到 sync 就结束指令串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ cut -d &apos;:&apos; -f 1 /etc/passwd | xargs -e&apos;sync&apos; -n 1 id</span><br><span class="line"># 仔细与上面的案例做比较。也同时注意，那个 -e&apos;sync&apos; 是连在一起的，中间没有空白键。</span><br><span class="line"># 上个例子当中，第六个参数是 sync 啊，那么我们下达 -e&apos;sync&apos; 后，则分析到 sync 这个字串时，</span><br><span class="line"># 后面的其他 stdin 的内容就会被 xargs 舍弃掉了！</span><br></pre></td></tr></table></figure><p><strong><em>很多指令其实并不支持管线命令，因此我们可以通过 xargs 来提供该指令引用 standard input 之用！</em></strong></p><p><code>范例四</code>：找出 /usr/sbin 下面具有特殊权限的文件名，并使用 ls -l 列出详细属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ find /usr/sbin -perm /7000 | xargs ls -l</span><br><span class="line">-rwx--s--x. 1 root lock      11208 Jun 10  2014 /usr/sbin/lockdev</span><br><span class="line">-rwsr-xr-x. 1 root root     113400 Mar  6 12:17 /usr/sbin/mount.nfs</span><br><span class="line">-rwxr-sr-x. 1 root root      11208 Mar  6 11:05 /usr/sbin/netreport</span><br><span class="line">.....（下面省略）.....</span><br><span class="line"># 也可以使用“ ls -l $（find /usr/sbin -perm /7000） ”来处理这个范例！</span><br></pre></td></tr></table></figure><h3 id="减号-“-“-的用途"><a href="#减号-“-“-的用途" class="headerlink" title="减号 “ - “ 的用途"></a>减号 “ - “ 的用途</h3><p>管线命令当中，常常会使用到前一个指令的 stdout 作为这次的 stdin ， 某些指令需要用到文件名称 （例如 tar） 来进行处理时，该 stdin 与 stdout 可以利用减号 “-“ 来替代.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# mkdir /tmp/homeback</span><br><span class="line">[root@study ~]# tar -cvf - /home | tar -xvf - -C /tmp/homeback</span><br></pre></td></tr></table></figure><blockquote><p>上面这个例子是：“将 /home 里面的文件给他打包，但打包的数据不是纪录到文件，而是传送到 stdout； 经过管线后，将 tar -cvf - /home 传送给后面的 tar -xvf - ”。后面的这个 - 则是取用前一个指令的 stdout， 因此，我们就不需要使用 filename 了</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;Shell&quot;&gt;&lt;a href=&quot;#Shell&quot; class=&quot;headerlink&quot; title=&quot;Shell&quot;&gt;&lt;/a&gt;Shell&lt;/h2&gt;&lt;p&gt;/etc/shells记录系统所有shell&lt;/p&gt;
&lt;h2 id=&quot;Bash-shell-功能&quot;&gt;&lt;a href=&quot;#Bash-shell-功能&quot; class=&quot;headerlink&quot; title=&quot;Bash shell 功能&quot;&gt;&lt;/a&gt;Bash shell 功能&lt;/h2&gt;&lt;h3 id=&quot;命令编修能力&quot;&gt;&lt;a href=&quot;#命令编修能力&quot; class=&quot;headerlink&quot; title=&quot;命令编修能力&quot;&gt;&lt;/a&gt;命令编修能力&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;默认指令记忆功能可以达到1000个&lt;br&gt;记录位置~/.bash_history(当前指令用户指令在内存中,登出后才记录到文件此内)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;命令与文件实例功能(tab补全)&lt;/li&gt;
&lt;li&gt;命令别名设置功能&lt;/li&gt;
&lt;li&gt;工作控制/前景背景控制&lt;/li&gt;
&lt;li&gt;程序化脚本shell script&lt;/li&gt;
&lt;li&gt;万用字符(*)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Linux" scheme="http://fcwalkers.com/tags/Linux/"/>
    
      <category term="Linux学习笔记" scheme="http://fcwalkers.com/tags/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>文件压缩/打包/备份</title>
    <link href="http://fcwalkers.com/2018/03/02/Linux/%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9:%E6%89%93%E5%8C%85:%E5%A4%87%E4%BB%BD/"/>
    <id>http://fcwalkers.com/2018/03/02/Linux/文件压缩:打包:备份/</id>
    <published>2018-03-01T16:00:00.000Z</published>
    <updated>2018-05-02T10:14:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="压缩文件的技术"><a href="#压缩文件的技术" class="headerlink" title="压缩文件的技术"></a>压缩文件的技术</h2><p>压缩文件简单原理:目前我们使用的计算机系统中都是使用所谓的 Bytes 单位来计量的！不过，事实上，计算机最小的计量单位应该是 bits 才对啊。此外，我们也知道 1 Byte = 8 bits 。但是如果今天我们只是记忆一个数字，亦即是 1 这个数字呢?由于我们记录数字是 1 ，考虑计算机所谓的二进制喔，如此一来， 1 会在最右边占据 1 个 bit ，而其他的 7 个 bits 将会自动的被填上 0 啰！你看看，其实在这样的例子中，那 7 个 bits 应该是“空的”才对！不过，为了要满足目前我们的操作系统数据的存取，所以就会将该数据转为 Byte 的型态来记录了！而一些聪明的计算机工程师就利用一些复杂的计算方式， 将这些没有使用到的空间“丢”出来，以让文件占用的空间变小！这就是压缩的技术啦！ </p><a id="more"></a><p>另外一种压缩技术也很有趣，他是将重复的数据进行统计记录的。举例来说，如果你的数据为“111….”共有100个1时， 那么压缩技术会记录为“100个1”而不是真的有100个1的位存在！<br>简单的说，你可以将他想成，其实文件里面有相当多的“空间”存在，并不是完全填满的， 而“压缩”的技术就是将这些“空间”填满，以让整个文件占用的容量下降！ 不过，这些“压缩过的文件”并无法直接被我们的操作系统所使用的，因此， 若要使用这些被压缩过的文件数据，则必须将他“还原”回来未压缩前的模样， 那就是所谓的“解压缩</p><h2 id="常见的压缩指令"><a href="#常见的压缩指令" class="headerlink" title="常见的压缩指令"></a>常见的压缩指令</h2><blockquote><p><em>.Z         compress 程序压缩的文件；</em>.zip       zip 程序压缩的文件；<br><em>.gz        gzip 程序压缩的文件；</em>.bz2       bzip2 程序压缩的文件；<br><em>.xz        xz 程序压缩的文件；</em>.tar       tar 程序打包的数据，并没有压缩过；<br><em>.tar.gz    tar 程序打包的文件，其中并且经过 gzip 的压缩</em>.tar.bz2   tar 程序打包的文件，其中并且经过 bzip2 的压缩<br>*.tar.xz    tar 程序打包的文件，其中并且经过 xz 的压缩</p></blockquote><ul><li>gzip, zcat/zmore/zless/zgrep<br>gzip是目前应用最广的压缩指令,后缀为*.gz<br>如果压缩的文件是文本文件,压缩后可以使用zcat相关指令读取出来.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ gzip [-cdtv#] 文件名</span><br><span class="line">选项与参数：</span><br><span class="line">-c  ：将压缩的数据输出到屏幕上，可通过数据流重导向来处理；</span><br><span class="line">-d  ：解压缩的参数；</span><br><span class="line">-t  ：可以用来检验一个压缩文件的一致性～看看文件有无错误；</span><br><span class="line">-v  ：可以显示出原文件/压缩文件的压缩比等信息；</span><br><span class="line">-#  ：#为数字的意思，代表压缩等级，-1最快，但是压缩比最差、-9最慢，但是压缩比最好！默认是 -6</span><br></pre></td></tr></table></figure><p>gzip压缩默认会删除原文件,如果想保留原文件可以使用如下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study tmp]$ gzip -9 -c services &gt; services.gz</span><br><span class="line">-c 选项打印出文件到屏幕,然后使用 &gt; 重定向</span><br></pre></td></tr></table></figure><p>找出压缩文件中的关键字命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study tmp]$ zgrep -n &apos;http&apos; services.gz</span><br><span class="line">14:#       http://www.iana.org/assignments/port-numbers</span><br><span class="line">89:http            80/tcp          www www-http    # WorldWideWeb HTTP</span><br><span class="line">90:http            80/udp          www www-http    # HyperText Transfer Protocol</span><br><span class="line">.....（下面省略）.....</span><br></pre></td></tr></table></figure><ul><li>bzip2, bzcat/bzmore/bzless/bzgrep<br>与gzip用法类似,比gzip压缩比更好<br>后缀为*.bz2</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ bzip2 [-cdkzv#] 文件名</span><br><span class="line">选项与参数：</span><br><span class="line">-c  ：将压缩的过程产生的数据输出到屏幕上！</span><br><span class="line">-d  ：解压缩的参数</span><br><span class="line">-k  ：保留原始文件，而不会删除原始的文件喔！</span><br><span class="line">-z  ：压缩的参数 （默认值，可以不加）</span><br><span class="line">-v  ：可以显示出原文件/压缩文件的压缩比等信息；</span><br><span class="line">-#  ：与 gzip 同样的，都是在计算压缩比的参数， -9 最佳， -1 最快！</span><br></pre></td></tr></table></figure><ul><li>xz, xzcat/xzmore/xzless/xzgrep<br>与gzip,bzip2用法类似,比bzip2压缩比更好<br>后缀为*.xz</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ xz [-dtlkc#] 文件名</span><br><span class="line">选项与参数：</span><br><span class="line">-d  ：就是解压缩啊！</span><br><span class="line">-t  ：测试压缩文件的完整性，看有没有错误</span><br><span class="line">-l  ：列出压缩文件的相关信息</span><br><span class="line">-k  ：保留原本的文件不删除～</span><br><span class="line">-c  ：同样的，就是将数据由屏幕上输出的意思！</span><br><span class="line">-#  ：同样的，也有较佳的压缩比的意思！”</span><br></pre></td></tr></table></figure><h2 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h2><p>虽然 gzip, bzip2, xz 也能够针对目录来进行压缩，不过， 这两个指令对目录的压缩指的是“将目录内的所有文件 “分别” 进行压缩”的动作！而不像在 Windows 的系统，可以使用类似 WinRAR 这一类的压缩软件来将好多数据“包成一个文件”的样式。</p><h3 id="tar命令常用选项"><a href="#tar命令常用选项" class="headerlink" title="tar命令常用选项"></a>tar命令常用选项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ tar [-z|-j|-J][cv][-f 待创建的新文件名] filename... &lt;==打包与压缩</span><br><span class="line">[dmtsai@study ~]$ tar [-z|-j|-J][tv] [-f 既有的 tar文件名]     &lt;==察看文件名</span><br><span class="line">[dmtsai@study ~]$ tar [-z|-j|-J] [xv] [-f 既有的 tar文件名][-C 目录]   &lt;==解压缩</span><br><span class="line">选项与参数：</span><br><span class="line">-c  ：创建打包文件，可搭配 -v 来察看过程中被打包的文件名（filename）</span><br><span class="line">-t  ：察看打包文件的内容含有哪些文件名，重点在察看“文件名”就是了；</span><br><span class="line">-x  ：解打包或解压缩的功能，可以搭配 -C （大写） 在特定目录解开</span><br><span class="line">      特别留意的是， -c, -t, -x 不可同时出现在一串命令行中。</span><br><span class="line">-z  ：通过 gzip  的支持进行压缩/解压缩：此时文件名最好为 *.tar.gz</span><br><span class="line">-j  ：通过 bzip2 的支持进行压缩/解压缩：此时文件名最好为 *.tar.bz2</span><br><span class="line">-J  ：通过 xz    的支持进行压缩/解压缩：此时文件名最好为 *.tar.xz</span><br><span class="line">      特别留意， -z, -j, -J 不可以同时出现在一串命令行中</span><br><span class="line">-v  ：在压缩/解压缩的过程中，将正在处理的文件名显示出来！</span><br><span class="line">-f filename：-f 后面要立刻接要被处理的文件名！建议 -f 单独写一个选项啰！（比较不会忘记）</span><br><span class="line">-C 目录    ：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。</span><br><span class="line"></span><br><span class="line">其他后续练习会使用到的选项介绍：</span><br><span class="line">-p（小写） ：保留备份数据的原本权限与属性，常用于备份（-c）重要的配置文件</span><br><span class="line">-P（大写） ：保留绝对路径，亦即允许备份数据中含有根目录存在之意；</span><br><span class="line">--exclude=FILE：在压缩的过程中，不要将 FILE 打包！</span><br></pre></td></tr></table></figure><h3 id="tar备份"><a href="#tar备份" class="headerlink" title="tar备份"></a>tar备份</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ su -  # 因为备份 /etc 需要 root 的权限，否则会出现一堆错误</span><br><span class="line">[root@study ~]# time tar -zpcv -f /root/etc.tar.gz /etc</span><br><span class="line">tar: Removing leading `/&apos; from member names  &lt;==注意这个警告讯息</span><br><span class="line">/etc/</span><br><span class="line">....（中间省略）....</span><br><span class="line">/etc/hostname</span><br><span class="line"></span><br><span class="line">#多了time会显示程序运行时间</span><br><span class="line">#加上&quot;-p&quot;选项原因是为了保存原本文件的权限和属性</span><br></pre></td></tr></table></figure><p><em>tar备份默认是没有根目录的,那为什么要拿掉根目录呢？主要是为了安全！我们使用 tar 备份的数据可能会需要解压缩回来使用， 在 tar 所记录的文件名 （就是我们刚刚使用 tar -jtvf 所察看到的文件名） 那就是解压缩后的实际文件名。 如果拿掉了根目录，假设你将备份数据在 /tmp 解开，那么解压缩的文件名就会变成“/tmp/etc/xxx”。 但“如果没有拿掉根目录，解压缩后的文件名就会是绝对路径， 亦即解压缩后的数据一定会被放置到 /etc/xxx 去！”如此一来，你的原本的 /etc/ 下面的数据， 就会被备份数据所覆盖过去了！如果想保存根目录可以使用-P选项</em></p><h3 id="解压tar包内单一文件"><a href="#解压tar包内单一文件" class="headerlink" title="解压tar包内单一文件"></a>解压tar包内单一文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 1. 先找到我们要的文件名，假设解开 shadow 文件好了：</span><br><span class="line">[root@study ~]# tar -jtv -f /root/etc.tar.bz2 | grep &apos;shadow&apos;</span><br><span class="line">---------- root/root       721 2015-06-17 00:20 etc/gshadow</span><br><span class="line">---------- root/root      1183 2015-06-17 00:20 etc/shadow-</span><br><span class="line">---------- root/root      1210 2015-06-17 00:20 etc/shadow  &lt;==这是我们要的！</span><br><span class="line">---------- root/root       707 2015-06-17 00:20 etc/gshadow-</span><br><span class="line"># 先搜寻重要的文件名！其中那个 grep 是“撷取”关键字的功能！我们会在第三篇说明！</span><br><span class="line"># 这里您先有个概念即可！那个管线 | 配合 grep 可以撷取关键字的意思！</span><br><span class="line"></span><br><span class="line"># 2. 将该文件解开！语法与实际作法如下：</span><br><span class="line">[root@study ~]# tar -jxv -f 打包档.tar.bz2 待解开文件名</span><br><span class="line">[root@study ~]# tar -jxv -f /root/etc.tar.bz2 etc/shadow</span><br><span class="line">etc/shadow</span><br><span class="line">[root@study ~]# ll etc</span><br><span class="line">total 4</span><br><span class="line">----------. 1 root root 1210 Jun 17 00:20 shadow</span><br><span class="line"># 很有趣！此时只会解开一个文件而已！不过，重点是那个文件名！你要找到正确的文件名。</span><br><span class="line"># 在本例中，你不能写成 /etc/shadow ！因为记录在 etc.tar.bz2 内的并没有 / 之故！</span><br></pre></td></tr></table></figure><h3 id="tarfile与tarball"><a href="#tarfile与tarball" class="headerlink" title="tarfile与tarball"></a>tarfile与tarball</h3><p>使用tar打包的文件称为tarfile<br>如果打包文件同时使用压缩则称为tarball.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;压缩文件的技术&quot;&gt;&lt;a href=&quot;#压缩文件的技术&quot; class=&quot;headerlink&quot; title=&quot;压缩文件的技术&quot;&gt;&lt;/a&gt;压缩文件的技术&lt;/h2&gt;&lt;p&gt;压缩文件简单原理:目前我们使用的计算机系统中都是使用所谓的 Bytes 单位来计量的！不过，事实上，计算机最小的计量单位应该是 bits 才对啊。此外，我们也知道 1 Byte = 8 bits 。但是如果今天我们只是记忆一个数字，亦即是 1 这个数字呢?由于我们记录数字是 1 ，考虑计算机所谓的二进制喔，如此一来， 1 会在最右边占据 1 个 bit ，而其他的 7 个 bits 将会自动的被填上 0 啰！你看看，其实在这样的例子中，那 7 个 bits 应该是“空的”才对！不过，为了要满足目前我们的操作系统数据的存取，所以就会将该数据转为 Byte 的型态来记录了！而一些聪明的计算机工程师就利用一些复杂的计算方式， 将这些没有使用到的空间“丢”出来，以让文件占用的空间变小！这就是压缩的技术啦！ &lt;/p&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Linux" scheme="http://fcwalkers.com/tags/Linux/"/>
    
      <category term="Linux学习笔记" scheme="http://fcwalkers.com/tags/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>例行性工作调度</title>
    <link href="http://fcwalkers.com/2017/12/11/Linux/%E4%BE%8B%E8%A1%8C%E6%80%A7%E5%B7%A5%E4%BD%9C%E8%B0%83%E5%BA%A6/"/>
    <id>http://fcwalkers.com/2017/12/11/Linux/例行性工作调度/</id>
    <published>2017-12-10T16:00:00.000Z</published>
    <updated>2018-05-02T10:14:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="循环性执行的例行性工作高度"><a href="#循环性执行的例行性工作高度" class="headerlink" title="循环性执行的例行性工作高度"></a>循环性执行的例行性工作高度</h2><p>循环执行的例行性工作调度由cron(crond)服务 控制.Lnux上有非常多的例行性工作,因此这个服务是默认启动的.</p><ul><li>使用者的设置  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/cron.allow 允许使用crontab的用户</span><br><span class="line">/etc/cron.deny 不允许使用crontab的用户</span><br><span class="line">allow优先级优于deny</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>当用户使用crontab指令创建工作调度之后,该项工作被纪录到/var/spool/cron里,而且是以账号作为判别的.如:用Windus使用后会纪录到/var/spool/cron/Windus<code>注意:不要使用vim编辑该文件,可能由于输入法错误导致无法执行cron</code><br>另外,cron执行的每一项任务都纪录到/var/log/cron中.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# crontab [-u username] [-l|-e|-r]</span><br><span class="line">选项与参数：</span><br><span class="line">-u  ：只有 root 才能进行这个任务，亦即帮其他使用者创建/移除 crontab 工作调度；</span><br><span class="line">-e  ：编辑 crontab 的工作内容</span><br><span class="line">-l  ：查阅 crontab 的工作内容</span><br><span class="line">-r  ：移除所有的 crontab 的工作内容，若仅要移除一项，请用 -e 去编辑。</span><br></pre></td></tr></table></figure><p><strong>每项工作格式都有六个字段,意义为:</strong></p><table style="width:100%;"><br><tr><br>    <th>代表意义</th><br>    <td>分</td><br>    <td>时</td><br>    <td>日期</td><br>    <td>月</td><br>    <td>周</td><br>    <td>指令</td><br></tr><br><tr><br>    <th>数字范围</th><br>    <td>0~59</td><br>    <td>0~23</td><br>    <td>1~31</td><br>    <td>1~12</td><br>    <td>0~7</td><br>    <td>执行指令</td><br></tr><br></table><p><code>注意:周指令0和7都代表星期天</code></p><table style="width:100%;"><br><thead><br>    <tr><br>        <th colspan="2" style="text-align:center;">特殊字符</th><br>    </tr><br></thead><br><tr><br>    <th style="text-align:center">字符</th><br>    <th style="text-align:center">意义</th><br></tr><br><tr><br>    <th>*(星号)</th><br>    <td>代表任何时刻都接受的意思！举例来说，范例一内那个日、月、周都是 <em> ， 就代表着“不论何月、何日的礼拜几的 12:00 都执行后续指令”的意思！<br>    </em></td><br></tr><br><tr><br>    <th>,(逗号)</th><br>    <td>代表分隔时段的意思。举例来说，如果要下达的工作是 3:00 与 6:00 时，就会是：0 3,6  <em> </em> command<br>时间参数还是有五栏，不过第二栏是 3,6 ，代表 3 与 6 都适用！<br>    </td><br></tr><br><tr><br>    <th>-(减号)</th><br>    <td>代表一段时间范围内，举例来说， 8 点到 12 点之间的每小时的 20 分都进行一项工作：20 8-12 <em> </em> <em> command<br>仔细看到第二栏变成 8-12 喔！代表 8,9,10,11,12 都适用的意思！<br>    </em></td><br></tr><br><tr><br>    <th>/n(斜线)</th><br>    <td>那个 n 代表数字，亦即是“每隔 n 单位间隔”的意思，例如每五分钟进行一次，则：/5 <em> </em> <em> </em> command 用 * 与 /5 来搭配，也可以写成 0-59/5 ，相同意思!<br>    </td><br></tr><br></table> <ul><li>crond服务读取配置文件位置  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- /etc/crontab</span><br><span class="line">- /etc/cron.d/*</span><br><span class="line">- /var/spool/cron/*</span><br><span class="line"></span><br><span class="line">前两个跟系统有关的配置文件,后一个跟用户有关</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;循环性执行的例行性工作高度&quot;&gt;&lt;a href=&quot;#循环性执行的例行性工作高度&quot; class=&quot;headerlink&quot; title=&quot;循环性执行的例行性工作高度&quot;&gt;&lt;/a&gt;循环性执行的例行性工作高度&lt;/h2&gt;&lt;p&gt;循环执行的例行性工作调度由cron(crond)服务 控制.Lnux上有非常多的例行性工作,因此这个服务是默认启动的.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用者的设置  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/etc/cron.allow 允许使用crontab的用户&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/etc/cron.deny 不允许使用crontab的用户&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;allow优先级优于deny&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Linux" scheme="http://fcwalkers.com/tags/Linux/"/>
    
      <category term="Linux学习笔记" scheme="http://fcwalkers.com/tags/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>磁盘与文件管理</title>
    <link href="http://fcwalkers.com/2017/09/29/Linux/%E7%A3%81%E7%9B%98%E4%B8%8E%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <id>http://fcwalkers.com/2017/09/29/Linux/磁盘与文件管理/</id>
    <published>2017-09-28T16:00:00.000Z</published>
    <updated>2018-06-11T08:30:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="EXT2文件系统"><a href="#EXT2文件系统" class="headerlink" title="EXT2文件系统"></a>EXT2文件系统</h2><p><img src="/2017/09/29/Linux/磁盘与文件管理/QQ20180117-095156@2x.png" alt="ext2文件系统示意图"></p><a id="more"></a><h3 id="data-block-用来放置文件内容数据的地方-在EXT2文件系统中支持block大小有1k-2k-4k"><a href="#data-block-用来放置文件内容数据的地方-在EXT2文件系统中支持block大小有1k-2k-4k" class="headerlink" title="data block 用来放置文件内容数据的地方.在EXT2文件系统中支持block大小有1k 2k 4k."></a>data block 用来放置文件内容数据的地方.在EXT2文件系统中支持block大小有1k 2k 4k.</h3><pre><code>&gt; 每个block大小在与数量在格式化完成后就确定,不能再改变了.(**除非格        式化或使用resize2fs等指令变更文件系统大小**)&gt; 每个block最多只能放一个文件&gt; 如果文件大于block大小,那文件会占用多个block&gt; 如果文件大小小于block,那么剩余容量就不能再使用了(磁盘空间会浪费).</code></pre><h3 id="inode-table"><a href="#inode-table" class="headerlink" title="inode table"></a>inode table</h3><ul><li><p>记录内容:  </p><blockquote><p>该文件的存取模式（read/write/excute）<br>该文件的拥有者与群组（owner/group）<br>该文件的容量<br>该文件创建或状态改变的时间（ctime）<br>最近一次的读取时间（atime）<br>最近修改的时间（mtime）<br>定义文件特性的旗标（flag），如 SetUID…<br>该文件真正内容的指向 （pointer）<br>不记录文件名(文件名记录在block上)</p></blockquote></li><li><p>特点:  </p><blockquote><p>每个 inode 大小均固定为 128 Bytes（新的 ext4 与 xfs 可设置到         256 Bytes）<br>每个文件都仅会占用一个 inode 而已<br>承上，因此文件系统能够创建的文件数量与 inode 的数量有关<br>系统读取文件时需要先找到 inode，并分析 inode 所记录的权限与使用        者是否符合，若符合才能够开始实际读取 block 的内容。  </p></blockquote></li></ul><p><img src="/2017/09/29/Linux/磁盘与文件管理/QQ20180109-160713@2x.png" alt="inode结构示意图"></p><p><strong><em>inode要记录的数据特别多,而只有128Bytes.inode记录一个block号码要4Byte,所以大文件一个inode肯定是不够用的.为此,inode记录block号码区域定义了12个直接,一个间接,一个双间接,一个三间接记录区.</em></strong>  </p><blockquote><p>如上图,最左边为 inode 本身 （128 Bytes），里面有 12 个直接指向 block 号码的对照，这 12 笔记录就能够直接取得 block 号码啦！ 至于所谓的间接就是再拿一个 block 来当作记录 block 号码的记录区，如果文件太大时， 就会使用间接的 block 来记录号码。如上图 7.1.4 当中间接只是拿一个 block 来记录额外的号码而已。 同理，如果文件持续长大，那么就会利用所谓的双间接，第一个 block 仅再指出下一个记录号码的 block 在哪里， 实际记录的在第二个 block 当中。依此类推，三间接就是利用第三层 block 来记录号码啦！</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">inode指定block大小计算(block为1k):</span><br><span class="line">- 12 个直接指向： 12*1K=12K</span><br><span class="line">  由于是直接,12所以总共可以记录12笔</span><br><span class="line">- 1  个间接： 256*1K=256K</span><br><span class="line">  每笔 block 号码的记录会花去 4Bytes，因此 1K 的大小能够记录 256 笔记录</span><br><span class="line">- 1  个双间接: 256*256*1K=2562K</span><br><span class="line">  第一层 block 会指定256个第二层,每个第二层可以指定 256个号码</span><br><span class="line">- 1  个三间接： 256*256*256*1K=2563K</span><br><span class="line">  第一层 block 会指定256个第二层,每个第二层可以指定256个第三层，每个第三层可以指定 256 个号码</span><br><span class="line">得到:12 + 256 + 256*256 + 256*256*256 （K） = 16GB</span><br><span class="line"></span><br><span class="line">上面方法不能用在2k及4k block大小计算中,因为大于2k block将会受到EXT2文件系统本身的限制,所以计算结果会不太符合之故.</span><br></pre></td></tr></table></figure><h3 id="super-block-记录整个文件系统信息-没有它就没有文件系统"><a href="#super-block-记录整个文件系统信息-没有它就没有文件系统" class="headerlink" title="super block 记录整个文件系统信息,没有它就没有文件系统"></a>super block 记录整个文件系统信息,没有它就没有文件系统</h3><ul><li>记录信息  </li></ul><blockquote><p>block 与 inode 的总量<br>未使用与已使用的 inode / block 数量<br>block 与 inode 的大小（block为1,2,4K,inode为 128Bytes或 256Bytes）<br>filesystem 的挂载时间、最近一次写入数据的时间、最近一次检验磁盘 （fsck） 的时间等文件系统的相关信息<br>一个 valid bit 数值，若此文件系统已被挂载，则 valid bit 为 0 ，若未被挂载，则 valid bit 为 1      </p></blockquote><p><em>superblock大小为1024Bytes,文件系统除了第一个block group含有superblock以外,后续的block group都不一定含有supperblock,若含有则是对第一个block group的备份.</em></p><h3 id="block-bitmap-区块对照表"><a href="#block-bitmap-区块对照表" class="headerlink" title="block bitmap (区块对照表)"></a>block bitmap (区块对照表)</h3><pre><code>文件修改时,记录block是否被占用.  </code></pre><h3 id="inode-bitmap-inode对照表"><a href="#inode-bitmap-inode对照表" class="headerlink" title="inode bitmap (inode对照表)"></a>inode bitmap (inode对照表)</h3><pre><code>与block bitmap功能类似,记录inode占用情况.  </code></pre><h3 id="Filesystem-Description-（文件系统描述说明）"><a href="#Filesystem-Description-（文件系统描述说明）" class="headerlink" title="Filesystem Description （文件系统描述说明）"></a>Filesystem Description （文件系统描述说明）</h3><pre><code>这个区段可以描述每个 block group 的开始与结束的 block 号码，以及说明每个区段 （superblock, bitmap, inodemap, data block） 分别介于哪一个 block 号码之间。  </code></pre><h4 id="dumpe2fs-查询-Ext-家族-superblock-信息的指令"><a href="#dumpe2fs-查询-Ext-家族-superblock-信息的指令" class="headerlink" title="dumpe2fs 查询 Ext 家族 superblock 信息的指令"></a>dumpe2fs 查询 Ext 家族 superblock 信息的指令</h4><blockquote><p>由于目前centos7以xfs为默认文件系统,所以这个指令无法使用.  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# dumpe2fs [-bh] 设备文件名</span><br><span class="line">选项与参数：</span><br><span class="line">-b ：列出保留为坏轨的部分（一般用不到吧！？）</span><br><span class="line">-h ：仅列出 superblock 的数据，不会列出其他的区段内容！</span><br></pre></td></tr></table></figure><hr><h3 id="目录树的操作"><a href="#目录树的操作" class="headerlink" title="目录树的操作"></a>目录树的操作</h3><p>由于目录树是由根目录开始读起，因此系统通过挂载的信息可以找到挂载点的 inode 号码，此时就能够得到根目录的 inode 内容，并依据该 inode 读取根目录的 block 内的文件名数据，再一层一层的往下读到正确的文件名。  </p><ul><li>读取步骤   </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# ll -di / /etc /etc/passwd  </span><br><span class="line"></span><br><span class="line">128 dr-xr-xr-x.  17 root root 4096 May  4 17:56 /</span><br><span class="line">33595521 drwxr-xr-x. 131 root root 8192 Jun 17 00:20 /etc</span><br><span class="line">36628004 -rw-r--r--.   1 root root 2092 Jun 17 00:20 /etc/passwd</span><br></pre></td></tr></table></figure><ol><li><p>/ 的 inode：</p><pre><code>通过挂载点的信息找到 inode 号码为 128 的根目录 inode，且 inode 规范的权限让我们可以读取该 block 的内容（有 r 与 x） ；</code></pre></li><li><p>/ 的 block：</p><pre><code>经过上个步骤取得 block 的号码，并找到该内容有 etc/ 目录的 inode 号码 （33595521）； </code></pre></li><li><p>etc/ 的 inode：<br> 读取 33595521 号 inode 得知 dmtsai 具有 r 与 x 的权限，因此可以读取 etc/ 的 block 内容； </p></li><li><p>etc/ 的 block：<br> 经过上个步骤取得 block 号码，并找到该内容有 passwd 文件的 inode 号码 （36628004）； </p></li><li><p>passwd 的 inode：<br> 读取 36628004 号 inode 得知 dmtsai 具有 r 的权限，因此可以读取 passwd 的 block 内容;  </p></li><li><p>passwd 的 block：<br> 最后将该 block 内容的数据读出来。</p></li></ol><ul><li>写步骤  </li></ul><ol><li>先确定使用者对于欲新增文件的目录是否具有 w 与 x 的权限，若有的话才能新增；</li><li>根据 inode bitmap 找到没有使用的 inode 号码，并将新文件的权限/属性写入；</li><li>根据 block bitmap 找到没有使用中的 block 号码，并将实际的数据写入 block 中，且更新 inode 的 block 指向数据；</li><li>将刚刚写入的 inode 与 block 数据同步更新 inode bitmap 与 block bitmap，并更新 superblock 的内容。</li></ol><h3 id="日志式文件系统"><a href="#日志式文件系统" class="headerlink" title="日志式文件系统"></a>日志式文件系统</h3><p>由于各种情况,可能造成数据发生问题,导致写入数据只有inode/block,而缺失bitmap,此时发生metadata与实际数据存放区产生不一致的情况.<br>    在早期的 Ext2 文件系统中，如果发生这个问题， 那么系统在重新开机的时候，就会借由 Superblock 当中记录的 valid bit （是否有挂载） 与 filesystem state （clean 与否） 等状态来判断是否强制进行数据一致性的检查！若有需要检查时则以 e2fsck 这支程序来进行的。<br>因为要针对metadata区域和实际数据存放区域进行比对,所以非常耗时.<br>为了避免上述问题的发生,应运而生了日志文件系统,具体执行步骤:  </p><ol><li>预备：当系统要写入一个文件时，会先在日志记录区块中纪录某个文件准备要写入的信息；  </li><li>实际写入：开始写入文件的权限与数据；开始更新 metadata 的数据；  </li><li>结束：完成数据与 metadata 的更新后，在日志记录区块当中完成该文件的纪录。  </li></ol><p><em>在这样的程序当中，万一数据的纪录过程当中发生了问题，那么我们的系统只要去检查日志记录区块， 就可以知道哪个文件发生了问题，针对该问题来做一致性的检查即可，而不必针对整块 filesystem 去检查， 这样就可以达到快速修复 filesystem 的能力</em></p><h2 id="XFS文件系统"><a href="#XFS文件系统" class="headerlink" title="XFS文件系统"></a>XFS文件系统</h2><p><em>EXT文件系统目前对于格式化处理,采用预先规划出inode/block/meta data等数据,未来系统可以直接使用,由于现在硬盘越来越大,所以格式化越来越慢.因此,从centos7.x开始文件系统已默认更换成XFS这个比较适合大容量磁盘与巨型文件,性能较佳的文件系统了.</em></p><hr><p>基本止,xfs就是一个日志文件系统,最早之前它就是被开发来用于大容量磁盘以及高性能文件系统之用.Ext4几乎所有的功能xfs都具备.<br>xfs文件系统在数据分布上,主要规划三个部分:一个数据区(data section),一个文件系统活动登录区(log section),一个实时运行区(realtime section).</p><h3 id="数据区-data-section"><a href="#数据区-data-section" class="headerlink" title="数据区(data section)"></a>数据区(data section)</h3><p>基本上,数据区和Ext文件系统一样,包括inode/data block/superblock等数据,都放在这个区块.这个数据区与Ext家族的block group类似,也是分为多个存储区群组(allocation groups)来分别放置文件系统所要的数据.每个存储区群组都包含了(1)整个文件系统的superblock(2)剩余空间管理机制(3)inode的分配与追踪.此外，inode与 block 都是系统需要用到时， 这才动态配置产生，所以格式化动作超级快！</p><blockquote><p>另外，与 ext 家族不同的是， xfs 的 block 与 inode 有多种不同的容量可供设置，block 容量可由 512Bytes ~ 64K 调配，不过，Linux 的环境下， 由于内存控制的关系 （分页档 pagesize 的容量之故），因此最高可以使用的 block 大小为 4K 而已！（鸟哥尝试格式化 block 成为 16K 是没问题的，不过，Linux 核心不给挂载！ 所以格式化完成后也无法使用啦！） 至于 inode 容量可由 256Bytes 到 2M 这么大！不过，大概还是保留 256Bytes 的默认值就很够用了！  </p></blockquote><h3 id="文件系统活动登录区-log-section"><a href="#文件系统活动登录区-log-section" class="headerlink" title="文件系统活动登录区(log section)"></a>文件系统活动登录区(log section)</h3><p>这个区域主要用来被记录文件系统的变化,其实有点像日志区.</p><h3 id="实时运行区-realtime-section"><a href="#实时运行区-realtime-section" class="headerlink" title="实时运行区(realtime section)"></a>实时运行区(realtime section)</h3><p>当有文件被创建时,xfs会在这个区域找一个到数个extent区块,将文件放置在这个区块内,等分配完毕后再写入data section的inode与block中去.<br>这个extent区块大小要在格式化时候指定,最小值4K,最大可到1G.<br>一般非磁盘阵列的磁盘默认64K,而具有磁盘阵列的情况下,则建议extent设置为与stripe一样大较佳.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xfs文件系统的描述数据观察:</span><br><span class="line">#找出系统 /boot 这个挂载点下面的文件系统的 superblock 纪录 </span><br><span class="line">[root@study ~]# df -T /boot</span><br><span class="line">Filesystem   Type 1K-blocks   Used Available Use% Mounted on</span><br><span class="line">/dev/vda2     xfs    1038336 133704    904632  13% /boot</span><br><span class="line"></span><br><span class="line">[root@study ~]# xfs_info /dev/vda2</span><br></pre></td></tr></table></figure><ul><li>df命令<br>列出文件系统的整体磁盘使用量 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# df [-ahikHTm] [目录或文件名]</span><br><span class="line">选项与参数：</span><br><span class="line">-a  ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</span><br><span class="line">-k  ：以 KBytes 的容量显示各文件系统；</span><br><span class="line">-m  ：以 MBytes 的容量显示各文件系统；</span><br><span class="line">-h  ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</span><br><span class="line">-H  ：以 M=1000K 取代 M=1024K 的进位方式；</span><br><span class="line">-T  ：连同该 partition 的 filesystem 名称 （例如 xfs） 也列出；</span><br><span class="line">-i  ：不用磁盘容量，而以 inode 的数量来显示</span><br></pre></td></tr></table></figure><ul><li>du命令<br>评估文件系统的磁盘使用量（常用在推估目录所占容量）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# du [-ahskm] 文件或目录名称</span><br><span class="line">选项与参数：</span><br><span class="line">-a  ：列出所有的文件与目录容量，因为默认仅统计目录下面的文件量而已。</span><br><span class="line">-h  ：以人们较易读的容量格式 （G/M） 显示；</span><br><span class="line">-s  ：列出总量而已，而不列出每个各别的目录占用容量；</span><br><span class="line">-S  ：不包括子目录下的总计，与 -s 有点差别。</span><br><span class="line">-k  ：以 KBytes 列出容量显示；</span><br><span class="line">-m  ：以 MBytes 列出容量显示；</span><br></pre></td></tr></table></figure><p><em>df 主要读取的数据几乎都是针对一整个文件系统，因此读取的范围主要是在 Superblock 内的信息， 所以这个指令显示结果的速度非常的快速.</em><br><em>du 这个指令其实会直接到文件系统内去搜寻所有的文件数据，这个指令的会执行一小段时间！</em></p><ul><li>Hard Link （实体链接, 硬式链接或实际链接）<br>由于每个文件都占用一个inode,文件内容由inode记录指向,想要读取文件必须经过目录记录的文件名来指向到正确的inode号码才能读取.也就是说,其实文件名只与目录有关,但是文件内容则与inode有关.<br>如果有多个文件名对应一个inode,那就是实体链接的由来.<br><strong>限制:</strong>  </li></ul><blockquote><ul><li>不能跨FileSystem</li><li>不能link目录</li></ul></blockquote><p><em>如果hard link到链接到目录时,链接的数据需要连同被链接目录下面的所有数据都创建链接，举例来说，如果你要将 /etc 使用实体链接创建一个 /etc_hd 的目录时，那么在 /etc_hd 下面的所有文件名同时都与 /etc 下面的文件名要创建 hard link 的，而不是仅链接到 /etc_hd 与 /etc 而已。 并且，未来如果需要在 /etc_hd 下面创建新文件时，连带的， /etc 下面的数据又得要创建一次 hard link ，因此造成环境相当大的复杂度.所以啰，目前 hard link 对于目录暂时还是不支持的啊！</em></p><ul><li>Symbolic Link(符号链接)<br>Symbolic link 就是在创建一个独立的文件，而这个文件会让数据的读取指向他 link 的那个文件的文件名！由于只是利用文件来做为指向的动作， 所以，当来源文件被删除之后，symbolic link 的文件会“开不了”， 会一直说“无法打开某文件！”。实际上就是找不到原始“文件名”而已啦！</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# ln -s /etc/crontab crontab2</span><br><span class="line">[root@study ~]# ll -i /etc/crontab /root/crontab2</span><br><span class="line">34474855 -rw-r--r--. 2 root root 451 Jun 10  2014 /etc/crontab</span><br><span class="line">53745909 lrwxrwxrwx. 1 root root  12 Jun 23 22:31 /root/crontab2 -&gt; /etc/crontab</span><br></pre></td></tr></table></figure><p>上面结果我们可以知道两个文件指向不同的 inode 号码，当然就是两个独立的文件存在！ 而且链接文件的重要内容就是他会写上目标文件的“文件名”， 你可以发现为什么上表中链接文件的大小为 12 Bytes 呢？ 因为箭头（–&gt;）右边的文件名“/etc/crontab”总共有 12 个英文，每个英文占用 1 个 Bytes ，所以文件大小就是 12Bytes了！</p><ul><li>ln命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# ln [-sf] 来源文件 目标文件</span><br><span class="line">选项与参数：</span><br><span class="line">-s  ：如果不加任何参数就进行链接，那就是hard link，至于 -s 就是symbolic link</span><br><span class="line">-f  ：如果 目标文件 存在时，就主动的将目标文件直接移除后再创建！</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;EXT2文件系统&quot;&gt;&lt;a href=&quot;#EXT2文件系统&quot; class=&quot;headerlink&quot; title=&quot;EXT2文件系统&quot;&gt;&lt;/a&gt;EXT2文件系统&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2017/09/29/Linux/磁盘与文件管理/QQ20180117-095156@2x.png&quot; alt=&quot;ext2文件系统示意图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Linux" scheme="http://fcwalkers.com/tags/Linux/"/>
    
      <category term="Linux学习笔记" scheme="http://fcwalkers.com/tags/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>文件与目录管理</title>
    <link href="http://fcwalkers.com/2017/09/13/Linux/%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/"/>
    <id>http://fcwalkers.com/2017/09/13/Linux/文件与目录管理/</id>
    <published>2017-09-12T16:00:00.000Z</published>
    <updated>2018-05-02T10:15:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="目录相关操作"><a href="#目录相关操作" class="headerlink" title="目录相关操作"></a>目录相关操作</h2><blockquote><p>.         代表此层目录<br>..        代表上一层目录  </p><ul><li>代表前一个工作目录<br>~         代表“目前使用者身份”所在的主文件夹<br>~account  代表 account 这个使用者的主文件夹（account是个帐号名称）</li></ul></blockquote><a id="more"></a><h3 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示所在目录</span></span><br><span class="line">root@study ~]<span class="comment"># pwd [-P]</span></span><br><span class="line">-P  ：显示出确实的路径，而非使用链接 （link） 路径。</span><br><span class="line"></span><br><span class="line">[root@study mail]<span class="comment"># ls -ld /var/mail</span></span><br><span class="line">lrwxrwxrwx. 1 root root 10 May  4 17:51 /var/mail -&gt; spool/mail</span><br><span class="line">[root@study ~]<span class="comment"># cd /var/mail   </span></span><br><span class="line">[root@study mail]<span class="comment"># pwd</span></span><br><span class="line">/var/mail         &lt;==列出目前的工作目录</span><br><span class="line">[root@study mail]<span class="comment"># pwd -P</span></span><br><span class="line">/var/spool/mail</span><br></pre></td></tr></table></figure><h3 id="mkdir-创建目录"><a href="#mkdir-创建目录" class="headerlink" title="mkdir  创建目录"></a>mkdir  创建目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@study ~]<span class="comment"># mkdir [-p] 目录名</span></span><br><span class="line">-p : 创建层级目录</span><br><span class="line">mkdir -p /home/windus/<span class="built_in">test</span>/linux</span><br></pre></td></tr></table></figure><h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">选项与参数：</span><br><span class="line">-a  ：全部的文件，连同隐藏文件（ 开头为 . 的文件） 一起列出来（常用）</span><br><span class="line">-A  ：全部的文件，连同隐藏文件，但不包括 . 与 .. 这两个目录</span><br><span class="line">-d  ：仅列出目录本身，而不是列出目录内的文件数据（常用）</span><br><span class="line">-f  ：直接列出结果，而不进行排序 （ls 默认会以文件名排序！）</span><br><span class="line">-F  ：根据文件、目录等信息，给予附加数据结构，例如：</span><br><span class="line">      *:代表可可执行文件； /:代表目录； =:代表 socket 文件； |:代表 FIFO 文件；</span><br><span class="line">-h  ：将文件大小以人类较易读的方式（例如 GB, KB 等等）列出来；</span><br><span class="line">-i  ：列出 inode 号码，inode 的意义下一章将会介绍；</span><br><span class="line">-l  ：长数据串行出，包含文件的属性与权限等等数据；（常用）</span><br><span class="line">字段说明:</span><br><span class="line">1.文件属性：drwxr-xr-x</span><br><span class="line">2.文件硬链接数量 3</span><br><span class="line">3.所有者：user</span><br><span class="line">4.所属用户组：group</span><br><span class="line">5.文件大小：102 byte</span><br><span class="line">6.修改时间：Mar11　22:56</span><br><span class="line">7.文件名：Filename</span><br><span class="line">-n  ：列出 UID 与 GID 而非使用者与群组的名称 （UID与GID会在帐号管理提到！）</span><br><span class="line">-r  ：将排序结果反向输出，例如：原本文件名由小到大，反向则为由大到小；</span><br><span class="line">-R  ：连同子目录内容一起列出来，等于该目录下的所有文件都会显示出来；</span><br><span class="line">-S  ：以文件大小大小排序，而不是用文件名排序；</span><br><span class="line">-t  ：依时间排序，而不是用文件名。</span><br><span class="line">--color=never  ：不要依据文件特性给予颜色显示；</span><br><span class="line">--color=always ：显示颜色</span><br><span class="line">--color=auto   ：让系统自行依据设置来判断是否给予颜色</span><br><span class="line">--full-time    ：以完整时间模式 （包含年、月、日、时、分） 输出</span><br><span class="line">--time=&#123;atime,ctime&#125; ：输出 access 时间或改变权限属性时间 （ctime）而非内容变更时间 （modification time）</span><br></pre></td></tr></table></figure><h3 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">选项与参数:</span><br><span class="line">-a  ：相当于 -dr --preserve=all 的意思，至于 dr 请参考下列说明；（常用）</span><br><span class="line">-d  ：若来源文件为链接文件的属性（link file），则复制链接文件属性而非文件本身；</span><br><span class="line">-i  ：若目标文件（destination）已经存在时，在覆盖时会先询问动作的进行（常用）</span><br><span class="line">-l  ：进行硬式链接（hard link）的链接文件创建，而非复制文件本身；</span><br><span class="line">-p  ：连同文件的属性（权限、用户、时间）一起复制过去，而非使用默认属性（备份常用）；</span><br><span class="line">-r  ：递回持续复制，用于目录的复制行为；（常用）</span><br><span class="line">-s  ：复制成为符号链接文件 （symbolic link），亦即“捷径”文件；</span><br><span class="line">-u  ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制。</span><br><span class="line">--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了。</span><br></pre></td></tr></table></figure><h3 id="rmdir命令"><a href="#rmdir命令" class="headerlink" title="rmdir命令"></a>rmdir命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@study ~]# rmdir [-p] 目录名称</span><br><span class="line">选项与参数：</span><br><span class="line">-p ：连同“上层”“空的”目录也一起删除</span><br></pre></td></tr></table></figure><h3 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h3><blockquote><p>1.在指令前加上反斜线，可以忽略掉 alias 的指定选项喔！<strong>^[详见bash章节]</strong><br>2.删除一个带有 - 开头的文件。（因为“－”是选项,所以系统误判了！</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#错误</span><br><span class="line">[root@study tmp]# rm -aaa-</span><br><span class="line">rm: invalid option -- &apos;a‘</span><br><span class="line">#正确 rm --help查找</span><br><span class="line">[root@study tmp]# rm ./-aaa-</span><br><span class="line">[root@study tmp]# rm -- -aaa-</span><br></pre></td></tr></table></figure><h3 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">选项与参数：</span><br><span class="line">-f  ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</span><br><span class="line">-i  ：若目标文件 （destination） 已经存在时，就会询问是否覆盖！</span><br><span class="line">-u  ：若目标文件已经存在，且 source 比较新，才会更新 （update）</span><br></pre></td></tr></table></figure><blockquote><p>特殊用处:<br>1.文件更名(类似命令rename)<br>2.可同时移动多个文件到同一目录</p></blockquote><h3 id="rename命令"><a href="#rename命令" class="headerlink" title="rename命令"></a>rename命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数:</span><br><span class="line">原字符串：将文件名需要替换的字符串；   </span><br><span class="line">目标字符串：将文件名中含有的原字符替换成目标字符串； </span><br><span class="line">文件：指定要改变文件名的文件列表</span><br><span class="line">#</span><br><span class="line">[root@study tmp]# rename .htm .html *.htm</span><br></pre></td></tr></table></figure><h3 id="basename"><a href="#basename" class="headerlink" title="basename"></a>basename</h3><p>获取文件/目录名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">选项:</span><br><span class="line">-a, --multiple       support multiple arguments and treat each as a NAME</span><br><span class="line">-s, --suffix=SUFFIX  remove a trailing SUFFIX</span><br><span class="line">-z, --zero           separate output with NUL rather than newline</span><br><span class="line">  </span><br><span class="line">#例子</span><br><span class="line">basename /usr/bin/sort          -&gt; &quot;sort&quot;</span><br><span class="line">basename include/stdio.h .h     -&gt; &quot;stdio&quot;</span><br><span class="line">basename -s .h include/stdio.h  -&gt; &quot;stdio&quot;</span><br><span class="line">basename -a any/str1 any/str2   -&gt; &quot;str1&quot; followed by &quot;str2&quot;</span><br></pre></td></tr></table></figure><h3 id="dirname"><a href="#dirname" class="headerlink" title="dirname"></a>dirname</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#例子</span><br><span class="line">dirname /usr/bin/          -&gt; &quot;/usr&quot;</span><br><span class="line">dirname dir1/str dir2/str  -&gt; &quot;dir1&quot; followed by &quot;dir2&quot;</span><br><span class="line">dirname stdio.h            -&gt; &quot;.&quot;</span><br></pre></td></tr></table></figure><h2 id="文件内容审阅"><a href="#文件内容审阅" class="headerlink" title="文件内容审阅"></a>文件内容审阅</h2><h3 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h3><p><em>由第一行开始显示内容(与tac相反)</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">选项与参数：</span><br><span class="line">-A  ：相当于 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</span><br><span class="line">-b  ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</span><br><span class="line">-E  ：将结尾的断行字符 $ 显示出来；</span><br><span class="line">-n  ：打印出行号，连同空白行也会有行号，与 -b 的选项不同；</span><br><span class="line">-T  ：将 [tab] 按键以 ^I 显示出来；</span><br><span class="line">-v  ：列出一些看不出来的特殊字符</span><br></pre></td></tr></table></figure><h3 id="nl指令"><a href="#nl指令" class="headerlink" title="nl指令"></a>nl指令</h3><p><em>添加行号打印,默认不打印空行行号.“其默认的结果与 cat -n 有点不太一样， nl 可以将行号做比较多的显示设计，包括位数与是否自动补齐 0 等等的功能呢。</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">nl [选项]... [文件]...</span><br><span class="line">-b  ：指定行号指定的方式，主要有两种：</span><br><span class="line">-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；</span><br><span class="line">-b t ：如果有空行，空的那一行不要列出行号(默认值)；</span><br><span class="line">-n  ：列出行号表示的方法，主要有三种：</span><br><span class="line">-n ln ：行号在萤幕的最左方显示；</span><br><span class="line">-n rn ：行号在自己栏位的最右方显示，且不加 0 ；</span><br><span class="line">-n rz ：行号在自己栏位的最右方显示，且加 0 ；</span><br><span class="line">-w  ：行号栏位的占用的位数。(与-n ln 或 -n rz配合使用)</span><br><span class="line">-p 在逻辑定界符处不重新开始计算。</span><br><span class="line"></span><br><span class="line">$ nl -n ln -w 3 test.txt</span><br></pre></td></tr></table></figure><h3 id="可翻页检视-more-less"><a href="#可翻页检视-more-less" class="headerlink" title="可翻页检视 more / less"></a>可翻页检视 more / less</h3><p><em>两者区别在于前者不能向前翻页(管线操作),后者可以向前翻页并支持更多其它操作</em></p><h3 id="数据撷取"><a href="#数据撷取" class="headerlink" title="数据撷取"></a>数据撷取</h3><pre><code>- head 撷取前面几行- tail 取出后几行,默认10行  ***注意:当用-f |grep 选项时,默认会有缓存区不能及时显示可加--line-buffered***</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例题：</span><br><span class="line">假如我想要显示 /etc/man_db.conf 的第 11 到第 20 行呢？</span><br><span class="line">head -n 20 /etc/man_db.conf | tail -n 10</span><br></pre></td></tr></table></figure><h3 id="非纯文本文件-od"><a href="#非纯文本文件-od" class="headerlink" title="非纯文本文件　od"></a>非纯文本文件　od</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">选项或参数：</span><br><span class="line">-t  ：后面可以接各种“类型 （TYPE）”的输出，例如：</span><br><span class="line">      a       ：利用默认的字符来输出；</span><br><span class="line">      c       ：使用 ASCII 字符来输出</span><br><span class="line">      d[size] ：利用十进制（decimal）来输出数据，每个整数占用 size Bytes ；</span><br><span class="line">      f[size] ：利用浮点数值（floating）来输出数据，每个数占用 size Bytes ；</span><br><span class="line">      o[size] ：利用八进位（octal）来输出数据，每个整数占用 size Bytes ；</span><br><span class="line">      x[size] ：利用十六进制（hexadecimal）来输出数据，每个整数占用 size Bytes ；</span><br></pre></td></tr></table></figure><blockquote><p>如果对纯文本文件使用这个指令，你甚至可以发现到 ASCII 与字符的对照表！<br>例题：想要立刻找到 password 这几个字的 ASCII 对照，该如何通过 od 来判断？<br>答：<br>echo password | od -t oCc</p></blockquote><h3 id="文件时间"><a href="#文件时间" class="headerlink" title="文件时间"></a>文件时间</h3><ul><li>modification time （mtime）：<br>当该文件的“内容数据”变更时，就会更新这个时间！内容数据指的是文件的内容，而不是文件的属性或权限喔！  </li><li>status time （ctime）：<br>当该文件的“状态 （status）”改变时，就会更新这个时间，举例来说，像是权限与属性被更改了，都会更新这个时间啊。 </li><li>access time （atime）：<br>当“该文件的内容被取用”时，就会更新这个读取时间 （access）。举例来说，我们使用 cat 去读取 /etc/man_db.conf ， 就会更新该文件的 atime 了。</li></ul><h3 id="修改文件时间-touch命令"><a href="#修改文件时间-touch命令" class="headerlink" title="修改文件时间 touch命令"></a>修改文件时间 touch命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">选项与参数：</span><br><span class="line">-a  ：仅修订 access time；</span><br><span class="line">-c  ：仅修改文件的时间，若该文件不存在则不创建新文件；</span><br><span class="line">-d  ：后面可以接欲修订的日期而不用目前的日期，也可以使用 --date=&quot;日期或时间&quot;</span><br><span class="line">-m  ：仅修改 mtime ；</span><br><span class="line">-t  ：后面可以接欲修订的时间而不用目前的时间，格式为[YYYYMMDDhhmm].</span><br></pre></td></tr></table></figure><p><em>该命令也可用来新建文件</em></p><h3 id="file命令"><a href="#file命令" class="headerlink" title="file命令"></a>file命令</h3><p><em>查看某个文件的基本数据类型,如:ASCII/data文件/binary文件等等信息,也可用来判断tar包文件是用哪种压缩功能打包的.</em></p><p>##文件与文件夹权限<br><em>在Linux传统的Ext2/Ext3/Ext4文件系统下，我们还可以设置其他的系统隐藏属性， 这部份可使用 chattr 来设置，而以 lsattr 来查看，最重要的属性就是可以设置其不可修改的特性！让连文件的拥有者都不能进行修改！ 这个属性可是相当重要的，尤其是在安全机制上面 （security）！比较可惜的是，在 CentOS 7.x 当中利用 xfs 作为默认文件系统， 但是 xfs 就没有支持所有的 chattr 的参数了！仅有部份参数还有支持而已！</em></p><h3 id="文件默认权限-umask"><a href="#文件默认权限-umask" class="headerlink" title="文件默认权限 umask"></a>文件默认权限 umask</h3><p><strong><em>umask 的分数指的是“该默认值需要减掉的权限！</em></strong>   </p><ul><li><p>若使用者创建为“文件”则默认“没有可执行（ x ）权限”，亦即只有 rw 这两个项目，也就是最大为 666 分，默认权限如下：-rw-rw-rw-  </p></li><li><p>若使用者创建为“目录”，则由于 x 与是否可以进入此目录有关，因此默认为所有权限均开放，亦即为 777 分，默认权限如下：drwxrwxrwx</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# umask</span><br><span class="line">0022             &lt;==与一般权限有关的是后面三个数字！</span><br><span class="line">[root@study ~]# umask -S</span><br><span class="line">u=rwx,g=rx,o=rx  </span><br><span class="line">[root@study ~]# umask 022 &lt;==设置默认权限</span><br></pre></td></tr></table></figure><h3 id="文件隐藏属性-chattr"><a href="#文件隐藏属性-chattr" class="headerlink" title="文件隐藏属性 chattr"></a>文件隐藏属性 chattr</h3><p><em>chattr指令只能在Ext2/Ext3/Ext4的 Linux 传统文件系统上面完整生效， 其他的文件系统可能就无法完整的支持这个指令了，例如 xfs 仅支持部份参数而已</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# chattr [+-=][ASacdistu] 文件或目录名称</span><br><span class="line">选项与参数：</span><br><span class="line">+   ：增加某一个特殊参数，其他原本存在参数则不动。</span><br><span class="line">-   ：移除某一个特殊参数，其他原本存在参数则不动。</span><br><span class="line">=   ：设置一定，且仅有后面接的参数</span><br><span class="line">A  ：当设置了 A 这个属性时，若你有存取此文件（或目录）时，他的存取时间 atime 将不会被修改，</span><br><span class="line">     可避免 I/O 较慢的机器过度的存取磁盘。（目前建议使用文件系统挂载参数处理这个项目）</span><br><span class="line">S  ：一般文件是非同步写入磁盘的（原理请参考前一章sync的说明），如果加上 S 这个属性时，当你进行任何文件的修改，该更动会“同步”写入磁盘中。</span><br><span class="line">a  ：当设置 a 之后，这个文件将只能增加数据，而不能删除也不能修改数据，只有root 才能设置这属性</span><br><span class="line">c  ：这个属性设置之后，将会自动的将此文件“压缩”，在读取的时候将会自动解压缩，</span><br><span class="line">     但是在储存的时候，将会先进行压缩后再储存（看来对于大文件似乎蛮有用的！）</span><br><span class="line">d  ：当 dump 程序被执行的时候，设置 d 属性将可使该文件（或目录）不会被 dump 备份</span><br><span class="line">i  ：这个 i 可就很厉害了！他可以让一个文件“不能被删除、改名、设置链接也无法写入或新增数据！</span><br><span class="line">    对于系统安全性有相当大的助益！只有 root 能设置此属性</span><br><span class="line">s  ：当文件设置了 s 属性时，如果这个文件被删除，他将会被完全的移除出这个硬盘空间，</span><br><span class="line">     所以如果误删了，完全无法救回来了喔！</span><br><span class="line">u  ：与 s 相反的，当使用 u 来设置文件时，如果该文件被删除了，则数据内容其实还存在磁盘中，</span><br><span class="line">     可以使用来救援该文件喔！</span><br><span class="line">注意1：属性设置常见的是 a 与 i 的设置值，而且很多设置值必须要身为 root 才能设置</span><br><span class="line">注意2：xfs 文件系统仅支持 AadiS 而已</span><br></pre></td></tr></table></figure><h3 id="显示文件隐藏属性-lsattr"><a href="#显示文件隐藏属性-lsattr" class="headerlink" title="显示文件隐藏属性 lsattr"></a>显示文件隐藏属性 lsattr</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@study ~]# lsattr [-adR] 文件或目录</span><br><span class="line">选项与参数：</span><br><span class="line">“-a ：将隐藏文件的属性也秀出来；</span><br><span class="line">-d ：如果接的是目录，仅列出目录本身的属性而非目录内的文件名；</span><br><span class="line">-R ：连同子目录的数据也一并列出来！ </span><br><span class="line">[root@study tmp]# chattr +aiS attrtest</span><br><span class="line">[root@study tmp]# lsattr attrtest</span><br><span class="line">--S-ia---------- attrtest</span><br></pre></td></tr></table></figure><h3 id="文件特殊权限"><a href="#文件特殊权限" class="headerlink" title="文件特殊权限"></a>文件特殊权限</h3><h4 id="Set-UID-gt-SUID权限"><a href="#Set-UID-gt-SUID权限" class="headerlink" title="Set UID -&gt; SUID权限"></a>Set UID -&gt; SUID权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]<span class="comment"># ls -l /usr/bin/passwd</span></span><br><span class="line">-rwsr-xr-x. 1 root root 27832 Jun 10  2014 /usr/bin/</span><br></pre></td></tr></table></figure><blockquote><p>注意:上面passwd指令,一般账号没有写入权限,为什么一般账号还能修改密码呢?<br>这就是USID的功能了（注意拥有者的“s”）:<br>1、dmtsai 对于 /usr/bin/passwd 这个程序来说是<strong>具有 x 权限</strong>的，表示 dmtsai 能执行 passwd；<br>2、passwd 的拥有者是 root 这个帐号；<br>3、dmtsai 执行 passwd 的过程中，会“暂时”获得 root 的权限；<br>4、/etc/shadow 就可以被 dmtsai 所执行的 passwd 所修改。<br>如果一般用户用cat去读取/etc/shadow时,会提示权限不够,因为cat指令没有SUID权限。<strong>另外SUID只对二进制程序有用,不能用于shell脚本。</strong></p></blockquote><h4 id="Set-GID-gt-SGID权限"><a href="#Set-GID-gt-SGID权限" class="headerlink" title="Set GID -&gt; SGID权限"></a>Set GID -&gt; SGID权限</h4><p><em>与SUID类似，当s标志在文件群组的x位置时，则称为SGID</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# ll /usr/bin/locate /var/lib/mlocate/mlocate.db</span><br><span class="line">-rwx--s--x. 1 root slocate   40496 Jun 10  2014 /usr/bin/locate</span><br><span class="line">-rw-r-----. 1 root slocate 2349055 Jun 15 03:44 /var/lib/mlocate/mlocate.db</span><br></pre></td></tr></table></figure><blockquote><p>使用 dmtsai 这个帐号去执行 locate 时，那 dmtsai 将会取得 slocate 群组的支持， 因此就能够去读取 mlocate.db 啦</p></blockquote><p>除了 binary program 之外，事实上 SGID 也能够用在目录上，这也是非常常见的一种用途！ 当一个目录设置了 SGID 的权限后，他将具有如下的功能：  </p><ul><li>使用者若对于此目录具有 r 与 x 的权限时，该使用者能够进入此目录；</li><li>使用者在此目录下的有效群组（effective group）将会变成该目录的群组；</li><li>用途：若使用者在此目录下具有 w 的权限（可以新建文件），则使用者所创建的新文件，该新文件的群组与此目录的群组相同。</li></ul><h4 id="Sticky-Bit-gt-SBIT权限"><a href="#Sticky-Bit-gt-SBIT权限" class="headerlink" title="Sticky Bit -&gt; SBIT权限"></a>Sticky Bit -&gt; SBIT权限</h4><p>*目前这个权限仅针对目录有效，对于文件已经没有效果了。在others上的t标识</p><ul><li>当使用者对于此目录具有 w, x 权限，亦即具有写入的权限时；</li><li>当使用者在该目录下创建文件或目录时，仅有自己与 root 才有权力删除该文件<br>如:/tmp 本身的权限是“drwxrwxrwt”， 在这样的权限内容下，任何人都可以在 /tmp 内新增、修改文件，但仅有该文件/目录创建者与 root 能够删除自己的目录或文件。</li></ul><h4 id="SUID-SGID-SBIT-权限设置"><a href="#SUID-SGID-SBIT-权限设置" class="headerlink" title="SUID/SGID/SBIT 权限设置"></a>SUID/SGID/SBIT 权限设置</h4><p><strong><em>SUID : 4 SGID : 2 SBIT : 1</em></strong><br>在数字权限前面加上一个数字就表示几个特殊权限了.</p><blockquote><p>假设要将一个文件权限改为“-rwsr-xr-x”时，由于 s 在使用者权限中，所以是 SUID ，因此， 在原先的 755 之前还要加上 4 ，也就是：“ chmod 4755 filename ”来设置！此外，还有大 S 与大 T 的产生喔！参考下面的范例啦！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@study tmp]<span class="comment"># chmod 7666 test; ls -l test &lt;==具有空的 SUID/SGID 权限</span></span><br><span class="line">-rwSrwSrwT 1 root root 0 Jun 16 02:53 <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><em>注意:上面大写SST,因为特殊权限要求必须有执行权限(上面是666),所以权限不能启作用为空权限</em></p><p><strong><em>除了数字方法外,也可以通过符号来处理.其中 SUID 为 u+s ，而 SGID 为 g+s ，SBIT 则是 o+t</em></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#设置权限成为 -rws--x--x 的模样：</span></span><br><span class="line">[root@study tmp]<span class="comment"># chmod u=rwxs,go=x test; ls -l test</span></span><br><span class="line">-rws--x--x 1 root root 0 Jun 16 02:53 <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#承上，加上 SGID 与 SBIT 在上述的文件权限中！</span></span><br><span class="line">[root@study tmp]<span class="comment"># chmod g+s,o+t test; ls -l test</span></span><br><span class="line">-rws--s--t 1 root root 0 Jun 16 02:53 <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="指令与文件的搜寻"><a href="#指令与文件的搜寻" class="headerlink" title="指令与文件的搜寻"></a>指令与文件的搜寻</h2><h3 id="指令文件名搜寻"><a href="#指令文件名搜寻" class="headerlink" title="指令文件名搜寻"></a>指令文件名搜寻</h3><h4 id="which-寻找”可执行文件”"><a href="#which-寻找”可执行文件”" class="headerlink" title="which (寻找”可执行文件”)"></a>which (寻找”可执行文件”)</h4><p><em>默认查找PATH内所规范的目录第一个被找到的执行文件</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">选项参数:</span><br><span class="line">-a 将所有由 PATH 目录中可以找到的指令均列出，而不止第一个被找到的指令名称</span><br><span class="line"></span><br><span class="line">root@study ~]# which history</span><br><span class="line">/usr/bin/which: no history in （/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class="line">/usr/sbin:/usr/bin:/root/bin）</span><br></pre></td></tr></table></figure><blockquote><p>因为history是bash内置命令所以不能用which查找，可以通过type命令查看。^<strong>[详见bash章节]</strong></p></blockquote><h3 id="文件文件名搜寻"><a href="#文件文件名搜寻" class="headerlink" title="文件文件名搜寻"></a>文件文件名搜寻</h3><h4 id="whereis-由一些特定的目录中寻找文件文件名"><a href="#whereis-由一些特定的目录中寻找文件文件名" class="headerlink" title="whereis (由一些特定的目录中寻找文件文件名)"></a>whereis (由一些特定的目录中寻找文件文件名)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# whereis [-bmsu] 文件或目录名</span><br><span class="line">选项与参数：</span><br><span class="line">-l    :可以列出 whereis 会去查询的几个主要目录而已</span><br><span class="line">-b    :只找 binary 格式的文件</span><br><span class="line">-m    :只找在说明文档 manual 路径下的文件</span><br><span class="line">-s    :只找 source 来源文件</span><br><span class="line">-u    :搜寻不在上述三个项目当中的其他特殊文件</span><br></pre></td></tr></table></figure><h4 id="locate-updatedb"><a href="#locate-updatedb" class="headerlink" title="locate / updatedb"></a>locate / updatedb</h4><p><em>locate寻找的数据是由/var/lib/mlocate里面的数据搜索到的,所以不用搜索硬盘,速度快。但由于数据库默认每天创建一次，所以新建的文件可能搜索不到，或者已删除文件还能搜索到</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# locate [-ir] keyword</span><br><span class="line">选项与参数：</span><br><span class="line">-i  ：忽略大小写的差异；</span><br><span class="line">-c  ：不输出文件名，仅计算找到的文件数量</span><br><span class="line">-l  ：仅输出几行的意思，例如输出五行则是 -l 5</span><br><span class="line">-S  ：输出 locate 所使用的数据库文件的相关信息，包括该数据库纪录的文件/目录数量等</span><br><span class="line">-r  ：后面可接正则表达式的显示方式</span><br></pre></td></tr></table></figure><blockquote><p>想要实时搜索就要手动更新数据库：updatedb<br><em>updatedb：根据 /etc/updatedb.conf 的设置去搜寻系统硬盘内的文件名，并更新 /var/lib/mlocate 内的数据库文件；</em>locate：依据 /var/lib/mlocate 内的数据库记载，找出使用者输入的关键字文件名。<br>*因为 updatedb 会去搜寻硬盘，所以当你执行 updatedb 时，可能会等待数分钟的时间喔！</p></blockquote><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# find [PATH] [option] [action]</span><br><span class="line">选项与参数：</span><br><span class="line">1. 与时间有关的选项：共有 -atime, -ctime 与 -mtime ，以 -mtime 说明</span><br><span class="line">   -mtime  n ：n 为数字，意义为在 n 天之前的“一天之内”被更动过内容的文件；</span><br><span class="line">   -mtime +n ：列出在 n 天之前（不含 n 天本身）被更动过内容的文件文件名；</span><br><span class="line">   -mtime -n ：列出在 n 天之内（含 n 天本身）被更动过内容的文件文件名。</span><br><span class="line">   -newer file ：file 为一个存在的文件，列出比 file 还要新的文件文件名 </span><br><span class="line">   </span><br><span class="line">2. 与使用者或群组名称有关的参数：</span><br><span class="line">   -uid n ：n 为数字，这个数字是使用者的帐号 ID，亦即 UID ，这个 UID 是记录在/etc/passwd 里面与帐号名称对应的数字。这方面我们会在第四篇介绍。</span><br><span class="line">   -gid n ：n 为数字，这个数字是群组名称的 ID，亦即 GID，这个 GID 记录在/etc/group</span><br><span class="line">   -user name ：name 为使用者帐号名称喔！例如 dmtsai </span><br><span class="line">   -group name：name 为群组名称喔，例如 users ；</span><br><span class="line">   -nouser    ：寻找文件的拥有者不存在 /etc/passwd 的人！</span><br><span class="line">   -nogroup   ：寻找文件的拥有群组不存在于 /etc/group 的文件！</span><br><span class="line">                当你自行安装软件时，很可能该软件的属性当中并没有文件拥有者，</span><br><span class="line">                这是可能的！在这个时候，就可以使用 -nouser 与 -nogroup 搜寻。</span><br><span class="line"></span><br><span class="line">3. 与文件权限及名称有关的参数：</span><br><span class="line">-name filename ：搜寻文件名称为 filename 的文件；</span><br><span class="line">   -size [+-]SIZE ：搜寻比 SIZE 还要大（+）或小（-）的文件。这个 SIZE 的规格有：</span><br><span class="line">c: 代表 Byte， </span><br><span class="line">k: 代表 1024Bytes。</span><br><span class="line">所以，要找比50KB还要大的文件，就是“ -size +50k”</span><br><span class="line">   -type TYPE ：搜寻文件的类型为 TYPE 的，</span><br><span class="line">   类型主要有：</span><br><span class="line">   一般正规文件（f）, </span><br><span class="line">   设备文件（b, c）,</span><br><span class="line">     目录（d）,</span><br><span class="line">     链接文件（l）, </span><br><span class="line">     socket（s）, </span><br><span class="line">     及 FIFO（p） 等属性。</span><br><span class="line">  -perm mode ：搜寻文件权限“刚好等于” mode 的文件，这个 mode 为类似 chmod的属性值，举例来说， -rwsr-xr-x 的属性为 4755 ！</span><br><span class="line">   -perm -mode ：搜寻文件权限“必须要全部囊括 mode 的权“限”的文件。</span><br><span class="line">   -perm /mode : 任何权限位 mode 被设置了的文件。</span><br><span class="line">举例：</span><br><span class="line">[root@study ~]# find / -perm +7000 </span><br><span class="line">*所谓的 7000 就是 ---s--s--t ，那么只要含有 s 或 t 的就列出，所以当然要使用 /7000，</span><br><span class="line">*使用 -7000 表示要同时含有 ---s--s--t 的所有三个权限。而只需要任意一个，就是 /7000 ～瞭乎？</span><br><span class="line">(旧版是：-perm +7000已经被/7000替换)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. 额外可进行的动作：</span><br><span class="line">-exec command ：command 为其他指令，-exec 后面可再接额外的指令来处理搜寻到的结果。</span><br><span class="line">-print ：将结果打印到屏幕上，这个动作是默认动作！</span><br><span class="line">[root@study ~]# find / -name &quot;passwd&quot; -exec ls -l &#123;&#125; \;</span><br></pre></td></tr></table></figure><p><strong><em>-exec 后面不支持别名所以上面使用 ls -l<br>{} 代表的是“由find找到的内容”<br>由于find命令是硬盘搜索，所以速度会相对很慢</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;目录相关操作&quot;&gt;&lt;a href=&quot;#目录相关操作&quot; class=&quot;headerlink&quot; title=&quot;目录相关操作&quot;&gt;&lt;/a&gt;目录相关操作&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;.         代表此层目录&lt;br&gt;..        代表上一层目录  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代表前一个工作目录&lt;br&gt;~         代表“目前使用者身份”所在的主文件夹&lt;br&gt;~account  代表 account 这个使用者的主文件夹（account是个帐号名称）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Linux" scheme="http://fcwalkers.com/tags/Linux/"/>
    
      <category term="Linux学习笔记" scheme="http://fcwalkers.com/tags/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>文件目录权限</title>
    <link href="http://fcwalkers.com/2017/09/12/Linux/%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90/"/>
    <id>http://fcwalkers.com/2017/09/12/Linux/文件目录权限/</id>
    <published>2017-09-11T16:00:00.000Z</published>
    <updated>2018-05-02T10:15:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h2><p><img src="/2017/09/12/Linux/文件目录权限/QQ20170911-172829@2x.png" alt="执行命令"></p><a id="more"></a><ul><li><p>第一栏代表文件类型与权限</p><blockquote><p><strong>列表第一个字符意义:</strong><br>当为[ d ]则是目录，例如上表文件名为“.config”的那一行；<br>当为[ - ]则是文件，例如上表第三行；<br>若是[ l ]则表示为链接文件（link file）；<br>若是[ b ]则表示为设备文件里面的可供储存的周边设备（可随机存取设备）；<br>若是[ c ]则表示为设备文件里面的序列埠设备，例如键盘、鼠标（一次性读取设备）。  </p></blockquote></li><li><p>第二栏表示有多少文件名链接到此节点上</p></li><li>第三栏表示这个文件“拥有者账号”</li><li>第四栏表示这个文件所属群组</li><li>第五栏表示这个文件大小，默认单位Bytes</li><li>第六栏表示文件的创建日期或修改日期</li><li>第七栏为文件名</li></ul><h2 id="改变文件属性与权限"><a href="#改变文件属性与权限" class="headerlink" title="改变文件属性与权限"></a>改变文件属性与权限</h2><ul><li>改变文件群组</li></ul><blockquote><p>chgrp [-R] 群组名 文件或目录</p></blockquote><ul><li>改变文件拥有者</li></ul><blockquote><p>chown [-R] 账号名:群组名 文件或目录</p></blockquote><ul><li><p>改变权限<br><em>数字类型改变文件权限</em>  </p><blockquote><p>r:4 w:2 o:1<br>chmod [-R] 权限和 文件/文件夹  </p></blockquote><p><em>符号类型改变文件权限</em> </p><blockquote><p>user:u group:g others:o all:a<br>+加入权限 -去除权限 =设置权限<br>写法:<br>chmod [-R] u=rwx,g=rw,o=rw 文件/文件夹</p></blockquote></li></ul><h2 id="Linux目录配置"><a href="#Linux目录配置" class="headerlink" title="Linux目录配置"></a>Linux目录配置</h2><p><img src="/2017/09/12/Linux/文件目录权限/QQ20170912-092638@2x.png" alt="Linux目录"></p><h3 id="HFS要求必须存在的目录"><a href="#HFS要求必须存在的目录" class="headerlink" title="HFS要求必须存在的目录"></a>HFS要求必须存在的目录</h3><ol><li><strong>/bin</strong> 放置的是单人维护模式下还能够被操作的命令。主要有：cat、chmod、chown、date、mv、mkdir、cp、bash等常用指令。  </li><li><strong>/boot</strong> 此目录主要放置在开机会使用的文件,包括Linux核心文件以及开机菜单与开机所需要的配置文件等等。  </li><li><strong>/dev</strong> Linux上,任何设置与周边设置都以文件形态存在于这个目录。通过读取这个目录下的文件，就等于存取这个设备。比较重要的文件有：/dev/null,/dev/zero,/dev/tty等等。</li><li><p><strong>/etc</strong> 系统主要配置文件几乎都放在这个目录内,例如人员账号密码档、各种服务启动档等等。一般来说这个目录文件可以让一般用户查阅，但是只有root用户可以修改。<strong><em>FHS建议不要放置可可执行文件(binary)在这个目录中。</em></strong> 比较重要的文件有：/etc/modprobe.d/, /etc/passwd, /etc/fstab, /etc/issue  </p><blockquote><p>/etc/opt(必要) 这个目录放置第三方软件/opt的相关配置文件。</p></blockquote></li><li><p><strong>/lib</strong> 放置的是开机时会用到的函数库,以及在/bin或/sbin下指令会调用的函数库.</p><blockquote><p><strong>/lib/modules</strong> (必要) 这个目录放置可抽换式的核心模块(驱动程序)</p></blockquote></li><li><p><strong>/media</strong> 放置可移除设置。包括：软盘、光盘、DVD等等设置都暂时挂载于此。常见的文件名有：/media/floppy, /media/cdrom等等。</p></li><li><strong>/mnt</strong> 如果你想要暂时挂载某些额外的设备，一般建议你可以放置到这个目录中。 在早时候，这个目录的用途与/media相同啦！只是有了/media之后，这个目录就用来暂时挂载用了。</li><li><strong>/opt</strong> 第三方协力软件放置的目录。什么是第三方协力软件啊？ 举例来说，KDE这个桌面管理系统是一个独立的计划，不过他可以安装到Linux系统中，因此KDE的软件就建议放置到此目录下了。 另外，如果你想要自行安装额外的软件（非原本的distribution提供的），那么也能够将你的软件安装到这里来。 不过，以前的Linux系统中，我们还是习惯放置在/usr/local目录下呢！  </li><li><strong>/run</strong> 早期的 FHS 规定系统开机后所产生的各项信息应该要放置到 /var/run 目录下，新版的 FHS 则规范到 /run 下面。 由于 /run 可以使用内存来仿真，因此性能上会好很多！</li><li><strong>/sbin</strong> 放在/sbin下面的为开机过程中所需要的，里面包括了开机、修复、还原系统所需要的指令。 至于某些服务器软件程序，一般则放置到/usr/sbin/当中。至于本机自行安装的软件所产生的系统可执行文件（system binary）， 则放置到/usr/local/sbin/当中了。常见的指令包括：fdisk, fsck, ifconfig, mkfs等等。</li><li><strong>/srv</strong> srv可以视为“service”的缩写，是一些网络服务启动之后，这些服务所需要取用的数据目录。 常见的服务例如WWW, FTP等等。举例来说，WWW服务器需要的网页数据就可以放置在/srv/www/里面。 不过，系统的服务数据如果尚未要提供给网际网络任何人浏览的话，默认还是建议放置到 /var/lib 下面即可。</li><li><strong>/tmp</strong> 这是让一般使用者或者是正在执行的程序暂时放置文件的地方。 这个目录是任何人都能够存取的，所以你需要定期的清理一下。当然，重要数据不可放置在此目录啊！ 因为FHS甚至建议在开机时，应该要将/tmp下的数据都删除唷！</li><li><strong>/usr</strong> 第二层FHS设置,见后续…</li><li><strong>/var</strong> 第二层FHS设置,见后续…</li></ol><h3 id="HFS要求可以存在的目录"><a href="#HFS要求可以存在的目录" class="headerlink" title="HFS要求可以存在的目录"></a>HFS要求可以存在的目录</h3><ol><li><p><strong>/home</strong> 这是系统默认的使用者主文件夹（home directory）。在你新增一个一般使用者帐号时， 默认的使用者主文件夹都会规范到这里来</p><blockquote><p>~：代表目前这个使用者的主文件夹<br>~dmtsai ：则代表 dmtsai 的主文件夹！</p></blockquote></li><li><p><strong>/lib\<qual></qual></strong> 用来存放与 /lib 不同的格式的二进制函数库，例如支持 64 位的 /lib64 函数库等</p></li><li><strong>/root</strong> 系统管理员（root）的主文件夹。之所以放在这里，是因为如果进入单人维护模式而仅挂载根目录时， 该目录就能够拥有root的主文件夹，所以我们会希望root的主文件夹与根目录放置在同一个分区中。</li></ol><hr><p>事实上FHS针对根目录定义的标准仅有上面这些,不过Linux还有许多目录需要了解一下.下面几个目录也非常重要:</p><hr><ol><li><strong>/lost+found</strong> 这个目录是使用标准的ext2/ext3/ext4文件系统格式才会产生的一个目录，目的在于当文件系统发生错误时， 将一些遗失的片段放置到这个目录下。不过如果使用的是 xfs 文件系统的话，就不会存在这个目录了！</li><li><strong>/proc</strong> 这个目录本身是一个虚拟目录.它放置 的数据都是在内存中.例如系统核心、行程信息、周边设备状态以及网络状态等等。因为这个目录数据都在内存当中，所以本身不占任何磁盘空间。比较重要的文件例如：/proc/cpuinfo, /proc/dma, /proc/interrupts, /proc/ioports, /proc/net/* 等等。</li><li><p><strong>/sys</strong> 这个目录其实跟/proc非常类似，也是一个虚拟的文件系统，主要也是记录核心与系统硬件信息较相关的信息。 包括目前已载入的核心模块与核心侦测到的硬件设备信息等等。这个目录同样不占硬盘容量喔！</p><h3 id="usr目录"><a href="#usr目录" class="headerlink" title="/usr目录"></a>/usr目录</h3><blockquote><p><strong>/usr</strong> 目录是Unix Software Resource的缩写， 也就是“Unix操作系统软件资源”所放置的目录，而不是使用者的数据啦！这点要注意。 FHS建议所有软件开发者，应该将他们的数据合理的分别放置到这个目录下的次目录，而不要自行创建该软件自己独立的目录。</p></blockquote><h4 id="FHS要求必须存在的目录"><a href="#FHS要求必须存在的目录" class="headerlink" title="FHS要求必须存在的目录"></a>FHS要求必须存在的目录</h4><ul><li><strong>/usr/bin</strong> 所有一般用户使用的指令都放在这里! 目前CentOS7已经将全部指令放置于此,而使用链接文件的方式将 <strong>/bin</strong> 链接至此! 也就是说 <strong>/bin</strong> 与 <strong>/usr/bin</strong> 是一模一样了! 另外,FHS要求在此目录下不应该有子目录!</li><li><strong>/usr/lib</strong> 基本上，与 /lib 功能相同，所以 /lib 就是链接到此目录中的！</li><li><strong>/usr/local</strong> 系统管理员在本机自行安装自己下载的软件(非distribution默认提供者)建议安装到此目录,这样会比较方便管理. 举例来说，你的distribution提供的软件较旧，你想安装较新的软件但又不想移除旧版， 此时你可以将新版软件安装于/usr/local/目录下，可与原先的旧版软件有分别啦！ 你可以自行到/usr/local去看看，该目录下也是具有bin, etc, include, lib…的次目录喔！</li><li><strong>/usr/sbin</strong> 非系统正常运行所需要的系统指令。最常见的就是某些网络服务器软件的服务指令（daemon）啰！不过基本功能与 /sbin 也差不多， 因此目前 /sbin 就是链接到此目录中的。</li><li><strong>/usr/share</strong> 主要放置只读架构的数据文件，当然也包括共享文件。在这个目录下放置的数据几乎是不分硬件架构均可读取的数据， 因为几乎都是文字文件嘛！<blockquote><p>常见的还有这些次目录：<br><strong>/usr/share/man</strong> 线上说明文档<br><strong>/usr/share/doc</strong> 软件杂项文件说明<br><strong>/usr/share/zoneinfo</strong> 与时区有关的时区文件</p></blockquote></li></ul><h4 id="FHS建议可以存在的目录"><a href="#FHS建议可以存在的目录" class="headerlink" title="FHS建议可以存在的目录"></a>FHS建议可以存在的目录</h4><ul><li><strong>/usr/games</strong> 与游戏比较相关的数据放置处</li><li><strong>/usr/include</strong> c/c++等程序语言的文件开始（header）与包含档（include）放置处，当我们以tarball方式 （*.tar.gz 的方式安装软件）安装某些数据时，会使用到里头的许多包含档喔！</li><li><strong>/usr/libexec</strong> 某些不被一般使用者惯用的可执行文件或脚本（script）等等，都会放置在此目录中。例如大部分的 X 窗口下面的操作指令， 很多都是放在此目录下的。</li><li>**/usr/lib\<qual> 与 /lib\<qual>/功能相同，因此目前 /lib<qual> 就是链接到此目录中</qual></qual></qual></li><li><strong>/usr/src</strong> 一般源代码建议放在这里, src有source的意思. 至于核心源代码建议放到 <strong>/usr/src/linux</strong> 目录下.<h3 id="var目录"><a href="#var目录" class="headerlink" title="/var目录"></a>/var目录</h3><blockquote><p>如果 <strong>/usr</strong> 是安装时会占用较大硬盘容量的目录，那么 <strong>/var</strong> 就是在系统运行后才会渐渐占用硬盘容量的目录。 因为 <strong>/var</strong> 目录主要针对常态性变动的文件，包括高速缓存（cache）、登录文件（log file）以及某些软件运行所产生的文件， 包括程序文件（lock file, run file），或者例如MySQL数据库的文件等等</p><ul><li>FHS要求必须存在的目录</li></ul></blockquote></li><li><strong>/var/cache</strong> 应用程序运行中会产生的一些暂存盘</li><li><strong>/var/lib</strong> 程序本身执行的过程中，需要使用到的数据文件放置的目录。在此目录下各自的软件应该要有各自的目录。 举例来说，MySQL的数据库放置到/var/lib/mysql/而rpm的数据库则放到/var/lib/rpm去！</li><li><strong>/var/lock</strong> 某些设备或者是文件资源一次只能被一个应用程序所使用，如果同时有两个程序使用该设备时， 就可能产生一些错误的状况，因此就得要将该设备上锁（lock），以确保该设备只会给单一软件所使用。 举例来说，烧录机正在烧录一块光盘，你想一下，会不会有两个人同时在使用一个烧录机烧片？ 如果两个人同时烧录，那片子写入的是谁的数据？所以当第一个人在烧录时该烧录机就会被上锁， 第二个人就得要该设备被解除锁定（就是前一个人用完了）才能够继续使用啰。目前此目录也已经挪到 <em>/run/lock</em> 中</li><li><strong>/var/log</strong> 重要到不行！这是登录文件放置的目录！里面比较重要的文件如 <strong>/var/log/messages</strong> ,  <strong>/var/log/wtmp</strong>（记录登陆者的信息）等。</li><li><strong>/var/mail</strong> 放置个人电子邮件信箱的目录，不过这个目录也被放置到 <strong>/var/spool/mail/</strong> 目录中！ 通常这两个目录是互为链接文件啦！</li><li><strong>/var/run</strong> 某些程序或者服务启动后, 会将它们的PID放置在这个目录下! 与 <strong>/run</strong> 相同，这个目录链接到 <strong>/run</strong> 去了！</li><li><strong>/var/spool</strong> 这个目录通常放置一些伫列数据，所谓的“伫列”就是排队等待其他程序使用的数据啦！ 这些数据被使用后通常都会被删除。举例来说，系统收到新信会放置到/var/spool/mail/中， 但使用者收下该信件后该封信原则上就会被删除。信件如果暂时寄不出去会被放到/var/spool/mqueue/中， 等到被送出后就被删除。如果是工作调度数据（crontab），就会被放置到/var/spool/cron/目录中！</li></ul></li></ol><h2 id="CentOS观察"><a href="#CentOS观察" class="headerlink" title="CentOS观察"></a>CentOS观察</h2><ul><li>uname</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[dmtsai@study ~]$ uname -r   # 查看核心版本</span><br><span class="line">3.10.0-229.el7.x86_64</span><br><span class="line">[dmtsai@study ~]$ uname -m   # 查看操作系统的位版本</span><br><span class="line">x86_64</span><br></pre></td></tr></table></figure><ul><li>lsb_release指令已经不是默认安装软件了.使用前需要安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# dnf install redhat-lsb</span><br><span class="line">[root@study ~]# lsb_release -a</span><br><span class="line">LSB Version::core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch</span><br><span class="line">Distributor ID:CentOS</span><br><span class="line">Description:CentOS Linux release 7.3.1611 (Core)</span><br><span class="line">Release:7.3.1611</span><br><span class="line">Codename:Core</span><br></pre></td></tr></table></figure><ul><li>/etc/*</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# cat /etc/issue</span><br><span class="line">CentOS release 5.5 (Final)</span><br><span class="line">Kernel r on an m</span><br><span class="line">[root@study ~]# cat /etc/redhat-release</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;文件属性&quot;&gt;&lt;a href=&quot;#文件属性&quot; class=&quot;headerlink&quot; title=&quot;文件属性&quot;&gt;&lt;/a&gt;文件属性&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2017/09/12/Linux/文件目录权限/QQ20170911-172829@2x.png&quot; alt=&quot;执行命令&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Linux" scheme="http://fcwalkers.com/tags/Linux/"/>
    
      <category term="Linux学习笔记" scheme="http://fcwalkers.com/tags/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>开关机</title>
    <link href="http://fcwalkers.com/2017/09/11/Linux/%E5%BC%80%E5%85%B3%E6%9C%BA/"/>
    <id>http://fcwalkers.com/2017/09/11/Linux/开关机/</id>
    <published>2017-09-10T16:00:00.000Z</published>
    <updated>2018-05-02T10:15:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="重要热键"><a href="#重要热键" class="headerlink" title="重要热键"></a>重要热键</h2><blockquote><p>Tab 自动补全<br>Ctrl+C 中断目前程序<br>Ctrl+d 键盘输入结束<br>Shift+Page [Up][Down] 上下翻页<br>[Ctrl] + [Alt] + [F1]~[F6]的组合按钮 终端切换 </p></blockquote><a id="more"></a><h2 id="开关机"><a href="#开关机" class="headerlink" title="开关机"></a>开关机</h2><ul><li><p>shutdown [-krhc] [时间] [警告讯息]　<em>关机命令</em></p><blockquote><p>-k     ： 不要真的关机，只是发送警告讯息出去！<br>-r     ： 在将系统的服务停掉之后就重新开机（常用）<br>-h     ： 将系统的服务停掉后，立即关机。 （常用）<br>-c     ： 取消已经在进行的 shutdown 指令内容。<br>时间   ： 指定系统关机的时间！时间的范例下面会说明。若没有这个项目，则默认 1 分钟后自动进行。</p></blockquote></li><li><p>reboot　<em>重新开机命令</em></p><blockquote><p>sync;reboot<br>实际开关机命令默认都会执行sync命令,但为了保险起见还是手动执行一下此命令。</p></blockquote></li><li><p>实际使用关机管理工具<br>systemctl  [指令]<br>　<em>上面提到的开关机命令实际都是调用此命令执行开关机</em>  </p><blockquote><p>halt       进入系统停止的模式，屏幕可能会保留一些讯息，这与你的电源管理模式有关<br>poweroff   进入系统关机模式，直接关机没有提供电力喔！<br>reboot     直接重新开机<br>suspend    进入休眠模式<br>[root@study ~]# systemctl reboot    # 系统重新开机<br>[root@study ~]# systemctl poweroff  # 系统关机  </p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;重要热键&quot;&gt;&lt;a href=&quot;#重要热键&quot; class=&quot;headerlink&quot; title=&quot;重要热键&quot;&gt;&lt;/a&gt;重要热键&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Tab 自动补全&lt;br&gt;Ctrl+C 中断目前程序&lt;br&gt;Ctrl+d 键盘输入结束&lt;br&gt;Shift+Page [Up][Down] 上下翻页&lt;br&gt;[Ctrl] + [Alt] + [F1]~[F6]的组合按钮 终端切换 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Linux" scheme="http://fcwalkers.com/tags/Linux/"/>
    
      <category term="Linux学习笔记" scheme="http://fcwalkers.com/tags/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记——深入React组件(v15.5)</title>
    <link href="http://fcwalkers.com/2017/05/04/React/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%B7%B1%E5%85%A5React%E7%BB%84%E4%BB%B6(v15.5)/"/>
    <id>http://fcwalkers.com/2017/05/04/React/React学习笔记——深入React组件(v15.5)/</id>
    <published>2017-05-03T16:00:00.000Z</published>
    <updated>2018-05-02T10:13:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>组件让UI独立，可重复利用，并且单独解决每块问题。React.Component是由React提供的。</p><p>React.Component是一个抽象的基类，因此它很少的被直接使用。反而，你会用一个有代表性的子类，并且至少定义一个render()方法。</p><a id="more"></a><p>使用JavaScript定义一个简单的类组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你没有使用ES6，你需要使用react-create-class模块创建。可以参考React中不使用ES6。</p><h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><p>每个组件都有几个生命周期，你可重写它们并在特定时间，它们会被执行。前缀是will的方法会在行为发生前被调用;前缀为did的方法会在行为发生后被调用。</p><h4 id="Mounting"><a href="#Mounting" class="headerlink" title="Mounting"></a>Mounting</h4><p>当一个组件实例被创建并且插入到DOM时，这些方法被调用：</p><blockquote><p>constructor()<br>componentWillMount()<br>render()<br>componentDidMount()</p></blockquote><h4 id="Updating"><a href="#Updating" class="headerlink" title="Updating"></a>Updating</h4><p>可能由props或state引发的更新。当组件被重新渲染时，这些方法被调用：</p><blockquote><p>componentWillReceiveProps()<br>shouldComponentUpdate()<br>componentWillUpdate()<br>render()<br>componentDidUpdate()  </p></blockquote><h4 id="Unmounting"><a href="#Unmounting" class="headerlink" title="Unmounting"></a>Unmounting</h4><p>当组件被移出DOM时，这个方法被调用：</p><blockquote><p>componentWillUnmount()  </p></blockquote><h4 id="其它API"><a href="#其它API" class="headerlink" title="其它API"></a>其它API</h4><p>每个组件也提供一些其它API。</p><blockquote><p>setState()<br>forceUpdate()  </p></blockquote><h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><blockquote><p>defaultProps<br>displayName  </p></blockquote><h4 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h4><blockquote><p>props<br>state  </p></blockquote><h3 id="方法使用说明"><a href="#方法使用说明" class="headerlink" title="方法使用说明"></a>方法使用说明</h3><h4 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h4><p>这个方法是必须存在的方法。</p><p>当被调用时，它会检查props和state，并且返回单一的React元素。这个元素可以是一个本地DOM组件，如\<div>，也可以是一个自定义的合成组件。</div></p><p>你也可以返回null或者false，表示你不想要任何渲染。当返回的是null或者false时，ReactDOM.findDOMNode(this)返回的是null。</p><p>这个方法是纯粹的，也就是说它不能更新state，每次调用返回相同的结果，并且它不直接与浏览器交互。</p><p>注意：如果shouldComponentUpdate()方法返回false，render()不会被调用。</p><h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a>constructor()</h4><p>构造函数是初始化state的正确位置。如果你不需要初始化state并且也不绑定方法，那就不需要实现构造函数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props);</span><br><span class="line">  <span class="keyword">this</span>.state = &#123;</span><br><span class="line">    color: props.initialColor</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate()"></a>componentWillUpdate()</h4><p>这个方法在mounting发生前调用，并且在render()方法之前调用。因此，在这个方法设置state同步，不会触发重新渲染。避免了任副作用和订阅。</p><p>这仅仅是 服务器渲染时调用的生命周期的钩子。一般推荐使用constructor()代替。</p><h4 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a>componentDidMount()</h4><p>这个方法mounting发生后调用。在这个方法设置state会触发重新渲染。可以在这里初始化必要的DOM，如果需要加载远程数据，这里是发起请求的好地方。</p><h4 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps()"></a>componentWillReceiveProps()</h4><p>这个方法在一个已加载的组件接收新prop前调用。在这个方法里可以使用setState()比较this.props和nextProps。</p><p>注意：即使props没有改变，React也可能调用这个方法。因此，请确保比较当前值和即将改变的值。</p><p>在mounting期间初始化props，React不会调用这个方法。它只在组件props被更新时调用。调用setState()通常不会触发此方法。</p><h4 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate()"></a>shouldComponentUpdate()</h4><p>此方法默认行为是，当state改变时组件重新渲染。</p><p>当props或state 被接收到时，这个方法将在render()之前调用。当初始化渲染和使用forceUpdate()方法时，此方法不被调用。</p><p>此方法返回false时，并不能阻止子组件由于state改变后重新渲染。</p><p>目前，此方法返回false时componentWillUpdate()、render() 和 componentDidUpdate()方法不会被调用。注意，这在将来可能只是一个提示，而不是严格的指令，也就是说即使该方法返回false，仍然会重新渲染组件。</p><h4 id="componentWillUpdate-1"><a href="#componentWillUpdate-1" class="headerlink" title="componentWillUpdate()"></a>componentWillUpdate()</h4><p>此方法被调用在prop和state被接收后组件渲染前，组件初始化渲染不调用此方法。</p><p><strong>注意</strong>：</p><p>1、你不能在这个方法中调用this.setState()，如果你想在props变化后更新state请使用componentWillReceiveProps()代替。</p><p>2、如果shouldComponentUpdate()方法返回false，此方法不会被调用。</p><h4 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate()"></a>componentDidUpdate()</h4><p>这个方法在updating发生后立即调用，并且在组件初始化渲染时也不调用。</p><p>在组件更新后，在这个方法中操作DOM是个很好的机会。这也是一个做网络请求的好地方。</p><p>注意：如果shouldComponentUpdate()方法返回false，此方法不会被调用。</p><h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h4><p>此方法会在组件被卸载和销毁之前立即调用。在这个方法可以执行必要的清理工作。如：无效的定时器、取消网络请求或者清理componentDidMount()创建的DOM元素。</p><h4 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="forceUpdate()"></a>forceUpdate()</h4><p>默认情况下，当组件的state或props改变时就会重新渲染。如果你的render()方法需要依赖一此其它数据，你可以通过调用forceUpdate()方法告诉React组件需要重新渲染。</p><p>调用forceUpdate()，会引起render()直接调用，而跳过shouldComponentUpdate()。但是它会正常触发每一个子组件的生命周期方法。</p><p>通常应该避免使用此方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;组件让UI独立，可重复利用，并且单独解决每块问题。React.Component是由React提供的。&lt;/p&gt;
&lt;p&gt;React.Component是一个抽象的基类，因此它很少的被直接使用。反而，你会用一个有代表性的子类，并且至少定义一个render()方法。&lt;/p&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="React" scheme="http://fcwalkers.com/tags/React/"/>
    
      <category term="JavaScript" scheme="http://fcwalkers.com/tags/JavaScript/"/>
    
      <category term="NodeJs" scheme="http://fcwalkers.com/tags/NodeJs/"/>
    
      <category term="HTML" scheme="http://fcwalkers.com/tags/HTML/"/>
    
      <category term="React学习笔记" scheme="http://fcwalkers.com/tags/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记——引用和DOM(v15.5)</title>
    <link href="http://fcwalkers.com/2017/05/03/React/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%BC%95%E7%94%A8%E5%92%8CDOM(v15.5)/"/>
    <id>http://fcwalkers.com/2017/05/03/React/React学习笔记——引用和DOM(v15.5)/</id>
    <published>2017-05-02T16:00:00.000Z</published>
    <updated>2018-05-02T10:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>在典型的React数据流中，props是父组件与子组件交互的唯一方式。想要修改子组件的，你需要重新渲染父组件的props。然而，有一些种情况是你需要在典型数据流的外面立即修改子组件。要修改的子组件可以是React组件的实例或者是一个DOM元素。对于这两种情况，React 提供了一个解决方案。</p><a id="more"></a><h3 id="何时使用Refs"><a href="#何时使用Refs" class="headerlink" title="何时使用Refs"></a>何时使用Refs</h3><blockquote><p>1、管理焦点、选中或者是媒体重放。<br>2、触发命令动画。<br>3、与第三方DOM库集成。  </p></blockquote><h3 id="避免在可声明的事物上使用refs。"><a href="#避免在可声明的事物上使用refs。" class="headerlink" title="避免在可声明的事物上使用refs。"></a>避免在可声明的事物上使用refs。</h3><p>例如：不在Dialog组件上暴露open()和close()方法，而是传递一个isOpen属性。</p><h3 id="在DOM元素上添加一个ref"><a href="#在DOM元素上添加一个ref" class="headerlink" title="在DOM元素上添加一个ref"></a>在DOM元素上添加一个ref</h3><p>React支持在任何组件上添加一个特殊的属性。ref属性接收一个回调函数，并且这个函数在组件mounted和unmounted时会立即执行。</p><p>当ref属性被用在一个HTML元素上时，ref回调函数接收的是基础的DOM元素作为它的参数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomTextInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.focus = <span class="keyword">this</span>.focus.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  focus() &#123;</span><br><span class="line">    <span class="comment">// 明确文本框使用的原始DOM　API focus</span></span><br><span class="line">    <span class="keyword">this</span>.textInput.focus();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// ref回调函数存储文本框DOM</span></span><br><span class="line">    <span class="comment">// element in an instance field (for example, this.textInput).</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">"text"</span></span><br><span class="line">          ref=&#123;(input) =&gt; &#123; <span class="keyword">this</span>.textInput = input; &#125;&#125; /&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">"button"</span></span><br><span class="line">          value=<span class="string">"Focus the text input"</span></span><br><span class="line">          onClick=&#123;<span class="keyword">this</span>.focus&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>当组件mounts时，React会调用ref回调函数，并向其传入DOM元素;当组件unmounts时，React调用ref回调函数，并向其传入null。</p><p>使用ref回调函数为类设置一个属性，访问DOM元素是一种常见的方式。首先的方法就是向上面一样在ref回调函数中设置一个属性。有一个更简单的写法是：ref={input =&gt; this.textInput = input}</p><h3 id="在类的组件上添加一个ref"><a href="#在类的组件上添加一个ref" class="headerlink" title="在类的组件上添加一个ref"></a>在类的组件上添加一个ref</h3><p>当ref属性被添加到一个以类方式定义的组件上时，它的回调函数接收的是已mount组件的实例作为实例。例如：想要模拟组件在mount后直接被点击：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoFocusTextInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.textInput.focus();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;CustomTextInput</span><br><span class="line">        ref=&#123;(input) =&gt; &#123; <span class="keyword">this</span>.textInput = input; &#125;&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：只有组件以类的方式定义才有效。</p><h3 id="Refs和函数式组件"><a href="#Refs和函数式组件" class="headerlink" title="Refs和函数式组件"></a>Refs和函数式组件</h3><p>不能在函数式组件上使用ref属性，因为函数式组件没有实例</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyFunctionalComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;input /&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Parent extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    // This will *not* work!</span><br><span class="line">    return (</span><br><span class="line">      &lt;MyFunctionalComponent</span><br><span class="line">        ref=&#123;(input) =&gt; &#123; this.textInput = input; &#125;&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你需要使用它，你应该将组件转换为类，就像你需要使用生命周期或者状态时候一样。</p><p>但是，你可以在函数式组件内部使用ref属性，只要是DOM元素或类组件上就可以。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomTextInput</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// textInput must be declared here so the ref callback can refer to it</span></span><br><span class="line">  <span class="keyword">let</span> textInput = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    textInput.focus();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">"text"</span></span><br><span class="line">        ref=&#123;(input) =&gt; &#123; textInput = input; &#125;&#125; /&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">"button"</span></span><br><span class="line">        value=<span class="string">"Focus the text input"</span></span><br><span class="line">        onClick=&#123;handleClick&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );  </span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="暴露DOM-Refs到父组件"><a href="#暴露DOM-Refs到父组件" class="headerlink" title="暴露DOM Refs到父组件"></a>暴露DOM Refs到父组件</h3><p>在极少的情况下，你可能想要在一个父组件中接收子组件的DOM节点。这种做法通常是不推荐的，但是对于触发焦点和测试DOM的大小或位置，它偶尔也是有用的。</p><p>虽然，可以在子组件上添加一个ref属性，但这不理想的解决方案，你只会得到一个组件的实例，而不是组件的DOM节点。此外，这也不会在函数式组件上工作。</p><p>相反，在这种情况下，我们希望暴露一个特殊的prop在子组件上。子组件接收一个任意名字的函数作为prop，并且在一DOM节点上加上一个ref属性。这让父组件通过中间件传递ref回调函数到子组件的DOM节点上。</p><p>它在类组件和函数式组件上都可以工作。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomTextInput</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input ref=&#123;props.inputRef&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Parent extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;CustomTextInput</span></span><br><span class="line"><span class="regexp">        inputRef=&#123;el =&gt; this.inputElement = el&#125;</span></span><br><span class="line"><span class="regexp">      /</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，结果this.inputElement在Parent组件中被设置为CustomTextInput组件input元素相应的DOM节点。</p><p>这种模式的好处是，它可以纵向深入使用。例如：Parent组件不需要DOM节点，但是另一个组件渲染Parent组件的需要DOM节点（我们叫它GrandParent），我们可以在GrandParent组件中传递inputRef到Parent组件，并且让Parent组件向下传递它到CustomTextInput组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomTextInput</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input ref=&#123;props.inputRef&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Parent(props) &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      My input: &lt;CustomTextInput inputRef=&#123;props.inputRef&#125; /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Grandparent extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;Parent</span></span><br><span class="line"><span class="regexp">        inputRef=&#123;el =&gt; this.inputElement = el&#125;</span></span><br><span class="line"><span class="regexp">      /</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，如果此种方法需要在子组件中添加代码，如果你对子组件没有绝对的控制权，那么你只能使用findDOMNode()，但是它是不被鼓励使用的。</p><h3 id="不要过渡使用Refs"><a href="#不要过渡使用Refs" class="headerlink" title="不要过渡使用Refs"></a>不要过渡使用Refs</h3><p>你可能倾向使用ref来解决问题应用中的问题，如果是这种情况，请花费一些时间考虑一下，状态应该在组件的层次结构什么位置。通常，拥有该状态的适当位置应该是更高层级的组件上。参考状态提升示例。</p><h3 id="旧版API：字符串Refs"><a href="#旧版API：字符串Refs" class="headerlink" title="旧版API：字符串Refs"></a>旧版API：字符串Refs</h3><p>如果你之前使用过React，你可能会熟悉一个较旧的API,其中ref属性是一个字符串，如像”textInput”,DOM节点被这样访问this.refs.textInput。我们建议不这样使用。因为字符串引用有一些被认为是遗留的问题，并且可能在未来的一个版本中被删除。如果你目前正在使用this.refs.textInput访问refs,我们建议你使用回调模式。</p><p><strong>注意</strong></p><p>如果ref回调被定义为内联函数，它将在更新期间被调用两次，第一次调用传入null,第二次调用传入DOM 元素。这是因为函数的新实例是通过每次渲染创建的，因此React需要清除旧的引用并设置新的引用。你可以通过将ref回调定义为类上的绑定方法来避免这种情况，但请注意，在大多数情况下它不重要。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;在典型的React数据流中，props是父组件与子组件交互的唯一方式。想要修改子组件的，你需要重新渲染父组件的props。然而，有一些种情况是你需要在典型数据流的外面立即修改子组件。要修改的子组件可以是React组件的实例或者是一个DOM元素。对于这两种情况，React 提供了一个解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="React" scheme="http://fcwalkers.com/tags/React/"/>
    
      <category term="JavaScript" scheme="http://fcwalkers.com/tags/JavaScript/"/>
    
      <category term="NodeJs" scheme="http://fcwalkers.com/tags/NodeJs/"/>
    
      <category term="HTML" scheme="http://fcwalkers.com/tags/HTML/"/>
    
      <category term="React学习笔记" scheme="http://fcwalkers.com/tags/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记——使用PropTypes类型检查(v15.5)</title>
    <link href="http://fcwalkers.com/2017/05/03/React/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8PropTypes%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5(v15.5)/"/>
    <id>http://fcwalkers.com/2017/05/03/React/React学习笔记——使用PropTypes类型检查(v15.5)/</id>
    <published>2017-05-02T16:00:00.000Z</published>
    <updated>2018-05-02T10:13:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>React v15.5中React.PropTypes已经被废弃了，建议使用prop-types库代替。</p><p>随着应用的增长，可能遇到越来越多的类型检查方面的bug，对于一些应用，你可以使用JavaScript的扩展如：flow、typescript来检查你整个应用。但是，对于React来说，即使你不使用这些，其也内置了一些类型检查能力。要使用类型检查作用于组件，你可以指定一个特殊的属性proptypes：</p><a id="more"></a><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;Hello, &#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Greeting.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  name: PropTypes.string</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>下面是React对不同类型检查的示例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line">MyComponent.propTypes = &#123;</span><br><span class="line">  <span class="comment">// You can declare that a prop is a specific JS primitive. By default, these</span></span><br><span class="line">  <span class="comment">// are all optional.</span></span><br><span class="line">  optionalArray: PropTypes.array,</span><br><span class="line">  optionalBool: PropTypes.bool,</span><br><span class="line">  optionalFunc: PropTypes.func,</span><br><span class="line">  optionalNumber: PropTypes.number,</span><br><span class="line">  optionalObject: PropTypes.object,</span><br><span class="line">  optionalString: PropTypes.string,</span><br><span class="line">  optionalSymbol: PropTypes.symbol,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Anything that can be rendered: numbers, strings, elements or an array</span></span><br><span class="line">  <span class="comment">// (or fragment) containing these types.</span></span><br><span class="line">  optionalNode: PropTypes.node,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// A React element.</span></span><br><span class="line">  optionalElement: PropTypes.element,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// You can also declare that a prop is an instance of a class. This uses</span></span><br><span class="line">  <span class="comment">// JS's instanceof operator.</span></span><br><span class="line">  optionalMessage: PropTypes.instanceOf(Message),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// You can ensure that your prop is limited to specific values by treating</span></span><br><span class="line">  <span class="comment">// it as an enum.</span></span><br><span class="line">  optionalEnum: PropTypes.oneOf([<span class="string">'News'</span>, <span class="string">'Photos'</span>]),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// An object that could be one of many types</span></span><br><span class="line">  optionalUnion: PropTypes.oneOfType([</span><br><span class="line">    PropTypes.string,</span><br><span class="line">    PropTypes.number,</span><br><span class="line">    PropTypes.instanceOf(Message)</span><br><span class="line">  ]),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// An array of a certain type</span></span><br><span class="line">  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// An object with property values of a certain type</span></span><br><span class="line">  optionalObjectOf: PropTypes.objectOf(PropTypes.number),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// An object taking on a particular shape</span></span><br><span class="line">  optionalObjectWithShape: PropTypes.shape(&#123;</span><br><span class="line">    color: PropTypes.string,</span><br><span class="line">    fontSize: PropTypes.number</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// You can chain any of the above with `isRequired` to make sure a warning</span></span><br><span class="line">  <span class="comment">// is shown if the prop isn't provided.</span></span><br><span class="line">  requiredFunc: PropTypes.func.isRequired,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// A value of any data type</span></span><br><span class="line">  requiredAny: PropTypes.any.isRequired,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// You can also specify a custom validator. It should return an Error</span></span><br><span class="line">  <span class="comment">// object if the validation fails. Don't `console.warn` or throw, as this</span></span><br><span class="line">  <span class="comment">// won't work inside `oneOfType`.</span></span><br><span class="line">  customProp: <span class="function"><span class="keyword">function</span>(<span class="params">props, propName, componentName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(props[propName])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Invalid prop `'</span> + propName + <span class="string">'` supplied to'</span> +</span><br><span class="line">        <span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// You can also supply a custom validator to `arrayOf` and `objectOf`.</span></span><br><span class="line">  <span class="comment">// It should return an Error object if the validation fails. The validator</span></span><br><span class="line">  <span class="comment">// will be called for each key in the array or object. The first two</span></span><br><span class="line">  <span class="comment">// arguments of the validator are the array or object itself, and the</span></span><br><span class="line">  <span class="comment">// current item's key.</span></span><br><span class="line">  customArrayProp: PropTypes.arrayOf(<span class="function"><span class="keyword">function</span>(<span class="params">propValue, key, componentName, location, propFullName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(propValue[key])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Invalid prop `'</span> + propFullName + <span class="string">'` supplied to'</span> +</span><br><span class="line">        <span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要一个子元素</p><p>使用Proptypes.element，你可以指定只有一个子元素可以被传入组件中。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// This must be exactly one element or it will warn.</span></span><br><span class="line">    <span class="keyword">const</span> children = <span class="keyword">this</span>.props.children;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;children&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">MyComponent.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  children: PropTypes.element.isRequired</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="prop默认值"><a href="#prop默认值" class="headerlink" title="prop默认值"></a>prop默认值</h3><p>你可以通过指定一个特殊的属性defaultProps，来设定prop的默认值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;Hello, &#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Specifies the default values for props:</span></span><br><span class="line"><span class="regexp">Greeting.defaultProps = &#123;</span></span><br><span class="line"><span class="regexp">  name: 'Stranger'</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Renders "Hello, Stranger":</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Greeting /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;React v15.5中React.PropTypes已经被废弃了，建议使用prop-types库代替。&lt;/p&gt;
&lt;p&gt;随着应用的增长，可能遇到越来越多的类型检查方面的bug，对于一些应用，你可以使用JavaScript的扩展如：flow、typescript来检查你整个应用。但是，对于React来说，即使你不使用这些，其也内置了一些类型检查能力。要使用类型检查作用于组件，你可以指定一个特殊的属性proptypes：&lt;/p&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="React" scheme="http://fcwalkers.com/tags/React/"/>
    
      <category term="JavaScript" scheme="http://fcwalkers.com/tags/JavaScript/"/>
    
      <category term="NodeJs" scheme="http://fcwalkers.com/tags/NodeJs/"/>
    
      <category term="HTML" scheme="http://fcwalkers.com/tags/HTML/"/>
    
      <category term="React学习笔记" scheme="http://fcwalkers.com/tags/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记——深入理解JSX(v15.5)</title>
    <link href="http://fcwalkers.com/2017/05/02/React/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JSX(v15.5)/"/>
    <id>http://fcwalkers.com/2017/05/02/React/React学习笔记——深入理解JSX(v15.5)/</id>
    <published>2017-05-01T16:00:00.000Z</published>
    <updated>2018-05-02T10:13:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>从根本上讲，React语法仅仅是React.createElement(component, props, …children)方法的语法糖。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSX代码</span></span><br><span class="line">&lt;MyButton color=<span class="string">"blue"</span> shadowSize=&#123;<span class="number">2</span>&#125;&gt;</span><br><span class="line">  Click Me</span><br><span class="line">&lt;<span class="regexp">/MyButton&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/编译后：</span></span><br><span class="line"><span class="regexp">React.createElement(</span></span><br><span class="line"><span class="regexp">  MyButton,</span></span><br><span class="line"><span class="regexp">  &#123;color: 'blue', shadowSize: 2&#125;,</span></span><br><span class="line"><span class="regexp">  'Click Me'</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">如果标签没有子元素，可以使用闭口标签。</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/JSX代码</span></span><br><span class="line"><span class="regexp">&lt;div className="sidebar" /</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译后</span></span><br><span class="line">React.createElement(</span><br><span class="line">  <span class="string">'div'</span>,</span><br><span class="line">  &#123;<span class="attr">className</span>: <span class="string">'sidebar'</span>&#125;,</span><br><span class="line">  <span class="literal">null</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="指定React元素类型"><a href="#指定React元素类型" class="headerlink" title="指定React元素类型"></a>指定React元素类型</h3><h4 id="react必须在作用域里"><a href="#react必须在作用域里" class="headerlink" title="react必须在作用域里"></a>react必须在作用域里</h4><p>由于JSX编译后调用的是React.createElement方法，因此React库必须始终在JSX代码作用域中。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> CustomButton <span class="keyword">from</span> <span class="string">'./CustomButton'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WarningButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// return React.createElement(CustomButton, &#123;color: 'red'&#125;, null);</span></span><br><span class="line">  <span class="keyword">return</span> &lt;CustomButton color="red" /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不使用JavaScript打包工具并且已经使用\<script>标签引入React。它就已经在全局作用域中了。</p><h4 id="JSX类型使用点表达式"><a href="#JSX类型使用点表达式" class="headerlink" title="JSX类型使用点表达式"></a>JSX类型使用点表达式</h4><p>你也可以在JSX中使用点表达式引用组件。如果有一个模块导出很多组件的时候，这是很方便的。例如：MyComponents.DatePicker是一个组件，你可以直接在JSX中使用它：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponents = &#123;</span><br><span class="line">  DatePicker: <span class="function"><span class="keyword">function</span> <span class="title">DatePicker</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;Imagine a &#123;props.color&#125; datepicker here.&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BlueDatePicker</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;MyComponents.DatePicker color="blue" /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户定义组件必须大写"><a href="#用户定义组件必须大写" class="headerlink" title="用户定义组件必须大写"></a>用户定义组件必须大写</h4><p>当一个元素以小写字母开始，它指的就是一个内建组件，如：\<div>或者\<span>，结果就会将’div’或’span’被传入React.createElement方法。而大写字母开始的组件如<Foo/>会编译成React.createElement(Foo)，并且它符合一个组件的定义。</p><p>我们推荐使用大写字母定义一个组件。如果你有一个组件是使用小写字母开始，在JSX中使用它前把它赋值给一个大写变量。</p><p>例如，下面代码不会如期运行：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误！这是一个组件应该产首字母大写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 正确! 这使用的是&lt;div&gt;标签，因为它是一个有效的HTML标签</span></span><br><span class="line">  <span class="keyword">return</span> &lt;div&gt;Hello &#123;props.toWhat&#125;&lt;/div&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HelloWorld</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 错误! Reac认为 &lt;hello /&gt; 是一个HTML标签，因为它首字母是小写</span></span><br><span class="line">  <span class="keyword">return</span> &lt;hello toWhat="World" /&gt;;</span><br><span class="line">&#125;</span><br><span class="line">修复这些问题，重命名hello为Hello，并且在涉及到它的地方使用&lt;Hello/&gt;：</span><br><span class="line"></span><br><span class="line">import React from 'react';</span><br><span class="line"></span><br><span class="line">// Correct! This is a component and should be capitalized:</span><br><span class="line">function Hello(props) &#123;</span><br><span class="line">  // Correct! This use of &lt;div&gt; is legitimate because div is a valid HTML tag:</span><br><span class="line">  return &lt;div&gt;Hello &#123;props.toWhat&#125;&lt;/div&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function HelloWorld() &#123;</span><br><span class="line">  // Correct! React knows &lt;Hello /&gt; is a component because it's capitalized.</span><br><span class="line">  return &lt;Hello toWhat="World" /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行时选择类型"><a href="#运行时选择类型" class="headerlink" title="运行时选择类型"></a>运行时选择类型</h4><p>你不能使用普通表达式作为React元素的类型。如果你想使用普通表达式表明元素的类型，首先将其赋值给一个大写变量。这种情况经常出现在你想依据prop渲染不同组件的时候。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PhotoStory, VideoStory &#125; <span class="keyword">from</span> <span class="string">'./stories'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> components = &#123;</span><br><span class="line">  photo: PhotoStory,</span><br><span class="line">  video: VideoStory</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Story</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 错误! JSX 类型不能使用表达式</span></span><br><span class="line">  <span class="keyword">return</span> &lt;components[props.storyType] story=&#123;props.story&#125; /&gt;;</span><br><span class="line">&#125;</span><br><span class="line">修复这个，首先将其赋值给一个大写变量：</span><br><span class="line"></span><br><span class="line">import React from 'react';</span><br><span class="line">import &#123; PhotoStory, VideoStory &#125; from './stories';</span><br><span class="line"></span><br><span class="line">const components = &#123;</span><br><span class="line">  photo: PhotoStory,</span><br><span class="line">  video: VideoStory</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function Story(props) &#123;</span><br><span class="line">  // 正确! JSX 类型可以使用一个大写变量代替.</span><br><span class="line">  const SpecificStory = components[props.storyType];</span><br><span class="line">  return &lt;SpecificStory story=&#123;props.story&#125; /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSX的Props"><a href="#JSX的Props" class="headerlink" title="JSX的Props"></a>JSX的Props</h3><h4 id="JavaScript表达式作为-Props"><a href="#JavaScript表达式作为-Props" class="headerlink" title="JavaScript表达式作为 Props"></a>JavaScript表达式作为 Props</h4><p>你可以通过{}传递任何表达式作为prop。例如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent foo=&#123;<span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p>if表达式和for循环在JavaScript中不是表达式，因此不能直接在JSX中使用。你可以把它们放在周围代码中：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberDescriber</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> description;</span><br><span class="line">  <span class="keyword">if</span> (props.number % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    description = &lt;strong&gt;even&lt;/strong&gt;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    description = &lt;i&gt;odd&lt;/i&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &lt;div&gt;&#123;props.number&#125; is an &#123;description&#125; number&lt;/div&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>你可以传递一个字符串作为prop。这两个JSX表达式是等价的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent message=<span class="string">"hello world"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;MyComponent message=&#123;<span class="string">'hello world'</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p>当你传递一个字符串时，它的值是未转义的HTML。这两个表达式是等价的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent message=<span class="string">"&amp;lt;3"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;MyComponent message=&#123;<span class="string">'&lt;3'</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><h4 id="Props默认值true"><a href="#Props默认值true" class="headerlink" title="Props默认值true"></a>Props默认值true</h4><p>如果你传递一个没有值的prop，它默认传递的是true。这两个表达式是等价的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyTextBox autocomplete /&gt;</span><br><span class="line"></span><br><span class="line">&lt;MyTextBox autocomplete=&#123;<span class="literal">true</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p>一般来说，不建议使用默认值，因为ES6的语法中对象简写{foo}等价于{foo:foo}而不是{foo:true}，所以这样写容易混淆。只有这个行为和HTML行相同的时候才能这么使用。</p><h4 id="扩展属性"><a href="#扩展属性" class="headerlink" title="扩展属性"></a>扩展属性</h4><p>如果你已经有一个props的对象，并且希望这个props传递给JSX中。可以使用…作为扩展运算符传递整个props对象。下面两个组件是相等的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;Greeting firstName="Ben" lastName="Hector" /&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function App2() &#123;</span><br><span class="line">  const props = &#123;firstName: 'Ben', lastName: 'Hector'&#125;;</span><br><span class="line">  return &lt;Greeting &#123;...props&#125; /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你创建通用的容器时，扩展属性是很有用的。然而，它也能使你的代码产品混乱，它很容易使组件产生很多无关紧要的props。我们建议很少使用这个语法。</p><h3 id="JSX子元素"><a href="#JSX子元素" class="headerlink" title="JSX子元素"></a>JSX子元素</h3><p>在JSX表达式中包含一个开始标签和一个结束标签，标签中内容通过一个特殊的prop：props.children传递。有几种不同方法传递子元素</p><h4 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h4><p>你可以在开始和结束标签之间放一字符串，这样props.children的值就是一个字符串。这对于很多内置的HTML元素来说是很有用的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent&gt;Hello world!&lt;/MyComponent&gt;</span><br></pre></td></tr></table></figure><h4 id="JSX子元素-1"><a href="#JSX子元素-1" class="headerlink" title="JSX子元素"></a>JSX子元素</h4><p>你可以提供更多的JSX元素作为子元素，这对于显示嵌套组件是很有用的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyContainer&gt;</span><br><span class="line">  &lt;MyFirstComponent /&gt;</span><br><span class="line">  &lt;MySecondComponent /&gt;</span><br><span class="line">&lt;<span class="regexp">/MyContainer&gt;</span></span><br></pre></td></tr></table></figure><p>你可以混合不同类型的子元素，因此你可以使用字符串在JSX子元素中，这是另一种方式的JSX，看起来就像HTML，所以这既是有效的JSX，也是有效的HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  Here is a list:</span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个React组件不能同时返回多个React元素，但是一个JSX表达式可以有多个子元素。因此，如果你想要一个组件呈现多个事情的时候，你可以像上面一样将它包裹在一个div里。</p><h4 id="JavaScript表达式作为子元素"><a href="#JavaScript表达式作为子元素" class="headerlink" title="JavaScript表达式作为子元素"></a>JavaScript表达式作为子元素</h4><p>你可以通过{}传递任何JavaScript表达式作为子元素。例如：这些表达式是相等的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent&gt;foo&lt;<span class="regexp">/MyComponent&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;MyComponent&gt;&#123;'foo'&#125;&lt;/</span>MyComponent&gt;</span><br></pre></td></tr></table></figure><p>这对于渲染任意长度的JSX表达式列表是很有用的。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Item</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;props.message&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TodoList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> todos = [<span class="string">'finish doc'</span>, <span class="string">'submit pr'</span>, <span class="string">'nag dan to review'</span>];</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;todos.map(<span class="function">(<span class="params">message</span>) =&gt;</span> &lt;Item key=&#123;message&#125; message=&#123;message&#125; /&gt;)&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>JavaScript表达式可以和其它类型混合成子元素。这在字符串模板里是很有用的。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;props.addressee&#125;!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数作为子元素"><a href="#函数作为子元素" class="headerlink" title="函数作为子元素"></a>函数作为子元素</h4><p>通常，JavaScript表达式插入到JSX中得到一个字符串，一个React元素或者是那些东西的列表。然而，props.children就像其它prop一样可以传递任何类型的数据，不仅仅是React知道如何渲染的类型。例如，如果你有一个自定义组件，你可以让它带一个回调函数作为props.children：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Calls the children callback numTimes to produce a repeated component</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Repeat</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> items = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; props.numTimes; i++) &#123;</span><br><span class="line">    items.push(props.children(i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;items&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListOfTenThings</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Repeat numTimes=&#123;<span class="number">10</span>&#125;&gt;</span><br><span class="line">      &#123;(index) =&gt; <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>This is item &#123;index&#125; in the list<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line">    &lt;<span class="regexp">/Repeat&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>子元素可以通过自定义组件传递任何类型。</p><p>被忽略的Boolean、Null和Undefined</p><p>fase、null、undefined和true是有效的子元素。它们只是不渲染。下面JSX表达式呈现的效果是一样的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div /&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;div&gt;&#123;<span class="literal">false</span>&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div&gt;&#123;null&#125;&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;&#123;<span class="literal">undefined</span>&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div&gt;&#123;true&#125;&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>这些在条件渲染React元素的时候是有用的。下面代码，如果showHeader是true则渲染<Header/>组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;showHeader &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">Header</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">Content</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>但请注意，一些“falsy” 值，诸如数字0，仍然会被渲染。例如：下面代码不会得到预期的行为，因为props.messages为空值的时候会打印0</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;props.messages.length &amp;&amp;</span><br><span class="line">    &lt;MessageList messages=&#123;props.messages&#125; /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>修复上面代码，确保表达式&amp;&amp;前总是布尔值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;props.messages.length &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">    &lt;MessageList messages=&#123;props.messages&#125; /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>相反地，如果你想要打印出false、true、null或者undefined，你必须先把它转换成一个字符串：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  My JavaScript variable is &#123;<span class="built_in">String</span>(myVariable)&#125;.</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></script></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;从根本上讲，React语法仅仅是React.createElement(component, props, …children)方法的语法糖。&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//JSX代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;MyButton color=&lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt; shadowSize=&amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Click Me&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/MyButton&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/编译后：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;React.createElement(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  MyButton,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  &amp;#123;color: &#39;blue&#39;, shadowSize: 2&amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  &#39;Click Me&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;如果标签没有子元素，可以使用闭口标签。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/JSX代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;lt;div className=&quot;sidebar&quot; /&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//编译后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;React.createElement(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;div&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;sidebar&#39;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="React" scheme="http://fcwalkers.com/tags/React/"/>
    
      <category term="JavaScript" scheme="http://fcwalkers.com/tags/JavaScript/"/>
    
      <category term="NodeJs" scheme="http://fcwalkers.com/tags/NodeJs/"/>
    
      <category term="HTML" scheme="http://fcwalkers.com/tags/HTML/"/>
    
      <category term="React学习笔记" scheme="http://fcwalkers.com/tags/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记——提升state(v15.5)</title>
    <link href="http://fcwalkers.com/2017/04/25/React/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%8F%90%E5%8D%87state(v15.5)/"/>
    <id>http://fcwalkers.com/2017/04/25/React/React学习笔记——提升state(v15.5)/</id>
    <published>2017-04-24T16:00:00.000Z</published>
    <updated>2018-05-02T10:14:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>通常几个组件需要反映相同数据变化，我们推荐提升共享的state到它们最近的共同祖先元素。实现如下：</p><p>创建一个温度计算器来计算，给定温度的水是否会沸腾。</p><p>我们将从一个BoilingVerdict组件开始，它接收一个celsius作为prop参数，并且打印水温度。</p><a id="more"></a><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BoilingVerdict</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (props.celsius &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;p&gt;The water would boil.&lt;/p&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &lt;p&gt;The water would not boil.&lt;/p&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，创建一个Calculator组件，它渲染一个\<input>用来输入一个摄氏温度，并且保存它的值在this.state.temperature之中。</p><p>此外，它根据输入的值来渲染BoilingVerdict组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">temperature</span>: <span class="string">''</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(e) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">temperature</span>: e.target.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> temperature = <span class="keyword">this</span>.state.temperature;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;fieldset&gt;</span><br><span class="line">        &lt;legend&gt;Enter temperature <span class="keyword">in</span> Celsius:&lt;/legend&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          value=&#123;temperature&#125;</span><br><span class="line">          onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">        &lt;BoilingVerdict</span><br><span class="line">          celsius=&#123;<span class="built_in">parseFloat</span>(temperature)&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/fieldset&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>添加第二个输入框</p><p>我们的新要求是，除了一个摄氏度输入外，再提供一个华氏度输入，并且它们保持同步。</p><p>我们可以从Calculator组件提取一个TemperatureInput组件，增加一个scale prop参数，它可的取值可以是“c”或者“f”:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scaleNames = &#123;</span><br><span class="line">  c: <span class="string">'Celsius'</span>,</span><br><span class="line">  f: <span class="string">'Fahrenheit'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemperatureInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">temperature</span>: <span class="string">''</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(e) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">temperature</span>: e.target.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> temperature = <span class="keyword">this</span>.state.temperature;</span><br><span class="line">    <span class="keyword">const</span> scale = <span class="keyword">this</span>.props.scale;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;fieldset&gt;</span><br><span class="line">        &lt;legend&gt;Enter temperature <span class="keyword">in</span> &#123;scaleNames[scale]&#125;:&lt;/legend&gt;</span><br><span class="line">        &lt;input value=&#123;temperature&#125;</span><br><span class="line">               onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/fieldset&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>现在，修改Calculator组件，渲染两个不同的温度输入：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;TemperatureInput scale=<span class="string">"c"</span> /&gt;</span><br><span class="line">        &lt;TemperatureInput scale=<span class="string">"f"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>现在已经实现了两个输入框，接下来实现输入其中一个，另一个同时更新功能。</p><h3 id="编写转换函数"><a href="#编写转换函数" class="headerlink" title="编写转换函数"></a>编写转换函数</h3><p>首先，我们写两个函数用于在摄氏度和华氏度之间的单位转换：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toCelsius</span>(<span class="params">fahrenheit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (fahrenheit - <span class="number">32</span>) * <span class="number">5</span> / <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toFahrenheit</span>(<span class="params">celsius</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (celsius * <span class="number">9</span> / <span class="number">5</span>) + <span class="number">32</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个是转换数字的函数，我们将另外写一个函数，它接收一个字符串temperature参数和一个converter函数作为参数，并返回一个字符串。我们使用它基于一个输入框的值计算出另一个输入框的值。</p><p>当它接收一个无效的temperature参数时返回空字符串，并且它保证输出到小数点后三位。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tryConvert</span>(<span class="params">temperature, convert</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> input = <span class="built_in">parseFloat</span>(temperature);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Number</span>.isNaN(input)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> output = convert(input);</span><br><span class="line">  <span class="keyword">const</span> rounded = <span class="built_in">Math</span>.round(output * <span class="number">1000</span>) / <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">return</span> rounded.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，tryConvert(‘abc’, toCelsius)返回一个空字符串;　tryConvert(‘10.22’, toFahrenheit)　返回　‘50.396’。</p><h3 id="提升state"><a href="#提升state" class="headerlink" title="提升state"></a>提升state</h3><p>一般的，TemperatureInput组件的值独立保存到它们的局部state上，然而我们想让两个输入框同步，就需要将共享state移动到需要它的最近共同的祖先组件上。这就叫做“提升state”。</p><p>我们将移除TemperatureInput组件局部state到Calculator组件上。</p><p>具体步骤：</p><p>1.把TemperatureInput组件的　this.state.temperature　换成　this.props.temperature</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="comment">// 修改前: const temperature = this.state.temperature;</span></span><br><span class="line">    <span class="keyword">const</span> temperature = <span class="keyword">this</span>.props.temperature;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p>我们知道props是只读的。当temperature在局部state时，可以能setState()修改。然而，现在temperature作为一个prop从父类传过来，TemperatureInput组件无法再控制它。</p><p>在React中，通常用组件来解决这种控制问题。就像Dom元素\<input>接收一个value和一个onChange作为prop参数一样，因此可以自定义TemperatureInput组件接收temperature和onTemperatureChange作为prop参数，从它的父组件Calculator中传过来。</p><p>现在当TemperatureInput组件想要更新它的temperature时，它可以调用this.props.onTemperatureChange：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">handleChange(e) &#123;</span><br><span class="line">    <span class="comment">// 修改前: this.setState(&#123;temperature: e.target.value&#125;);</span></span><br><span class="line">    <span class="keyword">this</span>.props.onTemperatureChange(e.target.value);</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p>注意此处的temperature 或者 onTemperatureChange仅仅作为prop参数名，没有什么特殊的涵义。我们可以定义任意自己喜欢的名字，像value和onChange这种通用的惯例。</p><p>onTemperatureChange和temperature作为prop参数由父组件Calculator提供。它将通过修改局部state时行改变，因此两个input的值被重新呈现。修改后的完整代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemperatureInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(e) &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onTemperatureChange(e.target.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> temperature = <span class="keyword">this</span>.props.temperature;</span><br><span class="line">    <span class="keyword">const</span> scale = <span class="keyword">this</span>.props.scale;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;fieldset&gt;</span><br><span class="line">        &lt;legend&gt;Enter temperature <span class="keyword">in</span> &#123;scaleNames[scale]&#125;:&lt;/legend&gt;</span><br><span class="line">        &lt;input value=&#123;temperature&#125;</span><br><span class="line">               onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/fieldset&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="实现Calculator组件"><a href="#实现Calculator组件" class="headerlink" title="实现Calculator组件"></a>实现Calculator组件</h3><p>我们会将input里的temperature 和 scale存储到Calulator组件的局部state，这个state是从inputs中提升来的，并且作为它们的数据源。这是我们为了显示两个input值所需要知道的最小条件。</p><p>例如，我们摄氏度input中输入37，Calculator组件的state应为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">temperature: '37',</span><br><span class="line">scale: 'c'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在华氏度的input中输入212，Calculator组件的state应为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">temperature: '212',</span><br><span class="line">scale: 'f'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以同时保存两个input的值，但它是不必要的。我们可以根据temperature 和 scale值推断出，其它输入框的值。</p><p>两个input保持同步的原因在于，它们的计算来自同一个state：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleCelsiusChange = <span class="keyword">this</span>.handleCelsiusChange.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.handleFahrenheitChange = <span class="keyword">this</span>.handleFahrenheitChange.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">temperature</span>: <span class="string">''</span>, <span class="attr">scale</span>: <span class="string">'c'</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleCelsiusChange(temperature) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">scale</span>: <span class="string">'c'</span>, temperature&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleFahrenheitChange(temperature) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">scale</span>: <span class="string">'f'</span>, temperature&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> scale = <span class="keyword">this</span>.state.scale;</span><br><span class="line">    <span class="keyword">const</span> temperature = <span class="keyword">this</span>.state.temperature;</span><br><span class="line">    <span class="keyword">const</span> celsius = scale === <span class="string">'f'</span> ? tryConvert(temperature, toCelsius) : temperature;</span><br><span class="line">    <span class="keyword">const</span> fahrenheit = scale === <span class="string">'c'</span> ? tryConvert(temperature, toFahrenheit) : temperature;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;TemperatureInput</span><br><span class="line">          scale=<span class="string">"c"</span></span><br><span class="line">          temperature=&#123;celsius&#125;</span><br><span class="line">          onTemperatureChange=&#123;<span class="keyword">this</span>.handleCelsiusChange&#125; /&gt;</span><br><span class="line">        &lt;TemperatureInput</span><br><span class="line">          scale=<span class="string">"f"</span></span><br><span class="line">          temperature=&#123;fahrenheit&#125;</span><br><span class="line">          onTemperatureChange=&#123;<span class="keyword">this</span>.handleFahrenheitChange&#125; /&gt;</span><br><span class="line">        &lt;BoilingVerdict</span><br><span class="line">          celsius=&#123;<span class="built_in">parseFloat</span>(celsius)&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="整体流程："><a href="#整体流程：" class="headerlink" title="整体流程："></a>整体流程：</h3><p>1、React在Dom的\<input>上通过onChange事件调用指定方法。在上面示例中是TemperatureInput组件中的handleChange方法。</p><p>2、方法handleChange中通过输入的值e.target.value调用this.props.onTemperatureChange()方法，它是父组件Calculator传递过来的一个prop。</p><p>3、当它被渲染的时候，父组件Calculator已经为TemperatureInput组件onTemperatureChange属性指定了摄氏度handleCelsiusChange和华氏度handleFahrenheitChange方法。它会依据被编辑的输入框，决定调用哪个方法。</p><p>4、在这些方法内部，Calculator组件通过input输入的值和scale来调用setState()方法修改state。</p><p>5、React调用Calculator组件的render方法，通过当前state，调用转换方法进行温度转换。</p><p>6、React在render方法中通过新的prop参数逐个调用TemperatureInput组件。</p><p>7、React更新匹配的input值，被编辑的input值保持不变，其它的input同步更新转换后的值。</p><p>每次更新都保持相同的步骤，所以input保持同步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;通常几个组件需要反映相同数据变化，我们推荐提升共享的state到它们最近的共同祖先元素。实现如下：&lt;/p&gt;
&lt;p&gt;创建一个温度计算器来计算，给定温度的水是否会沸腾。&lt;/p&gt;
&lt;p&gt;我们将从一个BoilingVerdict组件开始，它接收一个celsius作为prop参数，并且打印水温度。&lt;/p&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="React" scheme="http://fcwalkers.com/tags/React/"/>
    
      <category term="JavaScript" scheme="http://fcwalkers.com/tags/JavaScript/"/>
    
      <category term="NodeJs" scheme="http://fcwalkers.com/tags/NodeJs/"/>
    
      <category term="HTML" scheme="http://fcwalkers.com/tags/HTML/"/>
    
      <category term="React学习笔记" scheme="http://fcwalkers.com/tags/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记——组合与继承(v15.5)</title>
    <link href="http://fcwalkers.com/2017/04/25/React/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%BB%84%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF(v15.5)/"/>
    <id>http://fcwalkers.com/2017/04/25/React/React学习笔记——组合与继承(v15.5)/</id>
    <published>2017-04-24T16:00:00.000Z</published>
    <updated>2018-05-02T10:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>React有一个强大的组合模型，并且推荐组合代替继承，在组件间重用代码。</p><p>一些组件不能提前知道它们的子组件。它些问题在一些公共组件尤其明显。如：侧边栏或者弹出框等组件。</p><p>我们推荐这样的组件使用prop的特殊属性children，直接传递子元素到它们的输出中。</p><a id="more"></a><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyBorder</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;<span class="string">'FancyBorder FancyBorder-'</span> + props.color&#125;&gt;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/传递JSX中嵌套的任意子元素</span></span><br><span class="line"><span class="regexp">function WelcomeDialog() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;FancyBorder color="blue"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h1 className="Dialog-title"&gt;</span></span><br><span class="line"><span class="regexp">        Welcome</span></span><br><span class="line"><span class="regexp">      &lt;/</span>h1&gt;</span><br><span class="line">      &lt;p className=<span class="string">"Dialog-message"</span>&gt;</span><br><span class="line">        Thank you <span class="keyword">for</span> visiting our spacecraft!</span><br><span class="line">      &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>FancyBorder&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSX标签<fancyborder>内任何内容通过prop children参数传递到FancyBorder组件中。由于，FancyBorder组件把{prop.children}渲染在一个\<div>中，所以传入的元素最终被输入在这里。</div></fancyborder></p><p>虽然这种情况是不常见的，很多时候，我们需要的是在一个组件的多个地方，使用这种嵌套。在这种情况下，我们得自己定义规则来代替使用chidren。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SplitPane</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"SplitPane"</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">"SplitPane-left"</span>&gt;</span><br><span class="line">        &#123;props.left&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="SplitPane-right"&gt;</span></span><br><span class="line"><span class="regexp">        &#123;props.right&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;SplitPane</span></span><br><span class="line"><span class="regexp">      left=&#123;</span></span><br><span class="line"><span class="regexp">        &lt;Contacts /</span>&gt;</span><br><span class="line">      &#125;</span><br><span class="line">      right=&#123;</span><br><span class="line">        &lt;Chat /&gt;</span><br><span class="line">      &#125; /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React元素像\<contacts>和\<chat>只是对象，所以可以像其它任何数据一样作为prop传递它们。</chat></contacts></p><p>有时候，我们认为组件是其它组件的“特殊实例”。例如，我们可能说组件WelcomeDialog是组件Dialog它的特殊实例。</p><p>在React中，这也可以通过组合完成。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dialog</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;FancyBorder color=<span class="string">"blue"</span>&gt;</span><br><span class="line">      &lt;h1 className=<span class="string">"Dialog-title"</span>&gt;</span><br><span class="line">        &#123;props.title&#125;</span><br><span class="line">      &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p className="Dialog-message"&gt;</span></span><br><span class="line"><span class="regexp">        &#123;props.message&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/FancyBorder&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function WelcomeDialog() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;Dialog</span></span><br><span class="line"><span class="regexp">      title="Welcome"</span></span><br><span class="line"><span class="regexp">      message="Thank you for visiting our spacecraft!" /</span>&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组合对于类定义的组件同样有效。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dialog</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;FancyBorder color=<span class="string">"blue"</span>&gt;</span><br><span class="line">      &lt;h1 className=<span class="string">"Dialog-title"</span>&gt;</span><br><span class="line">        &#123;props.title&#125;</span><br><span class="line">      &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p className="Dialog-message"&gt;</span></span><br><span class="line"><span class="regexp">        &#123;props.message&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>p&gt;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">    &lt;<span class="regexp">/FancyBorder&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class SignUpDialog extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  constructor(props) &#123;</span></span><br><span class="line"><span class="regexp">    super(props);</span></span><br><span class="line"><span class="regexp">    this.handleChange = this.handleChange.bind(this);</span></span><br><span class="line"><span class="regexp">    this.handleSignUp = this.handleSignUp.bind(this);</span></span><br><span class="line"><span class="regexp">    this.state = &#123;login: ''&#125;;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;Dialog title="Mars Exploration Program"</span></span><br><span class="line"><span class="regexp">              message="How should we refer to you?"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input value=&#123;this.state.login&#125;</span></span><br><span class="line"><span class="regexp">               onChange=&#123;this.handleChange&#125; /</span>&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleSignUp&#125;&gt;</span><br><span class="line">          Sign Me Up!</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Dialog&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(e) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">login</span>: e.target.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSignUp() &#123;</span><br><span class="line">    alert(<span class="string">`Welcome aboard, <span class="subst">$&#123;<span class="keyword">this</span>.state.login&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;React有一个强大的组合模型，并且推荐组合代替继承，在组件间重用代码。&lt;/p&gt;
&lt;p&gt;一些组件不能提前知道它们的子组件。它些问题在一些公共组件尤其明显。如：侧边栏或者弹出框等组件。&lt;/p&gt;
&lt;p&gt;我们推荐这样的组件使用prop的特殊属性children，直接传递子元素到它们的输出中。&lt;/p&gt;
    
    </summary>
    
      <category term="软件开发" scheme="http://fcwalkers.com/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="React" scheme="http://fcwalkers.com/tags/React/"/>
    
      <category term="JavaScript" scheme="http://fcwalkers.com/tags/JavaScript/"/>
    
      <category term="NodeJs" scheme="http://fcwalkers.com/tags/NodeJs/"/>
    
      <category term="HTML" scheme="http://fcwalkers.com/tags/HTML/"/>
    
      <category term="React学习笔记" scheme="http://fcwalkers.com/tags/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
